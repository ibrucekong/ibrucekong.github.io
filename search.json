[{"title":"修改Docker下的MySQL密码校验方式","url":"/posts/2058601592/","content":"\n**Docker学习：**\n\n由于MySQL在版本升级后，验证加密的方式改变了，在使用Navicat连接时会报错，因此下记录解决方法。\n\n<!--more-->\n\n当使用docker的MySQL时，遇到了navicat无法连接mysql的情况，给出了两种解决方法，一是升级navicat驱动，暂时跳过该方法；二是修改mysql密码校验方式。\n\n```\n# 首先启动docker的mysql数据库服务\n$ docker start docker-mysql\n# 进入docker-mysql的命令行模式\n$ docker exec -it docker-mysql bash\n# 默认进入root用户下\n$ root@921c40c1c9d6:/#\n# 进入mysql命令，回车输入docker-mysql密码\n$ mysql -u root -p\n# 进入mysql数据库表\n$ use mysql;\n# 修改密码方式\n$ alter user 'root'@'%' identified with mysql_native_password by 'your password';\n# 两次 exit 退出命令行界面\n```\n使用Navicat连接mysql数据库成功。\n\n\n\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>\n","tags":["终端","Docker"],"categories":["languages"]},{"title":"Docker无法使用vim","url":"/posts/2392351684/","content":"\n**Docker学习：**\n\n从Docker仓库中下载的容器，由于需要进行自定义设置，但是环境却没有提供能编辑的功能，连VIM都未提供，记录在设置MySQL时遇到没有VIM环境的解决方法。\n\n<!--more-->\n\n当使用docker的MySQL时，遇到了navicat无法连接mysql的情况，给出了两种解决方法;\n* 一是升级navicat驱动；\n* 二是修改mysql密码校验方式。\n\n当时想看看mysql容器的配置文件，结果使用`vim`都报\n```\nbash: vi: command not found\n```\n显然是mysql基于的Linux容器没有安装vim，下面来联网安装一下：\n```\n# 安装vim\n$ apt update\n$ apt install vim\n```\n然后可以愉快的编辑了。\n\n\n\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>\n","tags":["终端","Docker"],"categories":["languages"]},{"title":"Splice和Slice引发的血案","url":"/posts/2464790768/","content":"\n**一字千里，何况是在代码里：**\n\n生活中一字之差，意思能千差万别，在代码中差了一字，运行结果更是差之千里。\n\n<!--more-->\n\n在项目中遇到了对数据进行Copy，实现浅拷贝想到了用Slice，但是却错写成了Splice，引发了一系列问题。\n\n下面借花献佛，讲解一下slice和splice的区别：\n\n>  slice(start,end)：方法可从已有数组中返回选定的元素，返回一个新数组，包含从start到end（不包含该元素）的数组元素。\n>\n> 注意：该方法不会改变原数组，而是返回一个子数组，如果想删除数组中的一段元素，应该使用Array.splice()方法。\n>\n> start参数：必须，规定从何处开始选取，如果为负数，规定从数组尾部算起的位置，-1是指最后一个元素。\n> end参数：可选（如果该参数没有指定，那么切分的数组包含从start倒数组结束的所有元素，如果这个参数为负数，那么规定是从数组尾部开始算起的元素）。\n\n\n\n```javascript\nvar arr = [1,2,3,4,5];\nconsole.log(arr.slice(1));//[2,3,4,5]  选择序列号从1到最后的所有元素组成的新数组。\nconsole.log(arr.slice(1,3))//[2,3]  不包含end，序列号为3的元素\n```\n\n\n\n> splice()：该方法向或者从数组中添加或者删除项目，返回被删除的项目。（该方法会改变原数组）\n>\n> splice（index,howmany,item1,...itemX）\n>\n> index参数：必须，整数，规定添加或者删除的位置，使用负数，从数组尾部规定位置。\n> howmany参数：必须，要删除的数量，如果为0，则不删除项目。\n> tem1,...itemX参数：可选，向数组添加的新项目。\n\n\n\n```javascript\nvar arr = [1,2,3,4,5];\nconsole.log(arr.splice(2,1,\"hello\"));//[3]  返回的新数组\nconsole.log(arr);//[1, 2, \"hello\", 4, 5]  改变了原数组\n```\n\n原文：[https://blog.csdn.net/xiaoqingpang/article/details/79108005](https://blog.csdn.net/xiaoqingpang/article/details/79108005)\n\n\n\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["编程语言","心得"],"categories":["languages"]},{"title":"吾爱破解论坛2018年11月11日开放注册通知","url":"/posts/3256505474/","content":"**吾爱破解论坛注册喜讯：**\n吾爱开放注册又又来了，此次是2018年第三次开放注册，在今年前两次未能成功上车的小伙伴，这次可要抓住了，又是正值周末，又是天时地利人和，赶快整理好自己的注册资料，期待“11.11”的到来吧。\n\n<!--more-->\n\n<div style=\"text-align: center;font-weight: bold;font-size: 2rem; color: red\">\n\t喜讯、喜讯、喜讯\n</div><div style=\"text-align: center;font-weight: bold;font-size: 1.5rem\">\n\t<span>吾爱破解论坛开通开放注册</span>\n\t<span>2018年11月11日12:00-14:00和20:00-22:00</span>\n</div><div style=\"text-align: center;font-weight: bold;font-size: 1.5rem;padding-top: 0;margin-top: 0;height: 106px;line-height: 106px\"><a href=\"https://www.52pojie.cn/?fromuid=575811\" style=\"text-align: center;\">我要吾爱</a></div>\n<div></div>\n\n***注册注意事项：***\n\n1. 吸取上次上车失败的教训！！！\n2. 注意不要错过注册时间\n3. 认真读注册须知（需要等10分钟）\n4. 事先把注册信息写在本子或word里（独一无二的邮箱和用户名） [需要准备什么](https://www.52pojie.cn/misc.php?mod=faq&action=faq&id=15&messageid=16)\n5. 耐心检查填写内容（看是否都符合要求）\n6. 邮箱验证阶段，有的要到邮箱的垃圾箱中查看有没有验证邮件，而有的邮箱则需要设置白名单才能收到验证邮件 [帮助](https://www.52pojie.cn/thread-98585-1-1.html)\n7. 提醒一下，在注册成功后，要记得保持活跃度哦，不要只在官网签到，还要有互动（发帖、回复），不然会被清理的。\n\n<div style=\"text-align: center;font-weight: bold;font-size: 1.5rem\">\n\t祝愿小伙伴们都能获得自己的吾爱账号！\n</div><div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["活动","吾爱破解"],"categories":["tips"]},{"title":"济南的中秋","url":"/posts/4186109665/","content":"<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/jinan-mid-autumn.png\" alt=\"\">\n</div>\n\n<!--more-->\n\n<br >\n<br >\n<br >\n\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <span style=\"font-size: 3rem;color: #696969;background-image: -webkit-linear-gradient(92deg, #d4290e, #ff71fb);-webkit-background-clip: text;-webkit-text-fill-color: transparent;-webkit-animation: hue 60s infinite linear;\">中秋一人，亦可三人成酒！</span>\n</div>\n\n<br >\n\n<br >\n\n<br >\n\n\n\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["中秋","济南"],"categories":["tips"]},{"title":"BIMserver入门笔记 - 02登录及模型展示","url":"/posts/3230248873/","content":"**BIMserver登录及模型展示：**\nBIMserver资料较少，没有成熟的接口文档，没有成熟的示例程序，但是BIMserver为我们提供了一个运维程序、示例数据，在Github中的[opensourceBIM](https://github.com/opensourceBIM)这个开源组织，给开发者提供了不少源码级的学习内容。从运维程序中我们可以梳理出BIMserver的执行过程，方便我们二次开发。\n\n<!--more-->\n\n1. [BIMserver入门笔记 - 01环境搭建、数据导入及预览](../3869274485/)\n\n2. BIMserver入门笔记 - 02登录及模型展示\n\n从上一节我们了解了BIMserver的安装配置和运维的使用，但是在项目中我们不可能去直接用BIMserver的运行界面，需要我根据自己的项目需求来自定义自己的BIM展示界面和功能，所以我们就要从开发者角度去审视BIMserver。\n\n### 准备什么\n\n既然是开发者，前端就至少要懂前端的，后端至少要懂后端的，最好两者都熟悉。准备工作除了能搭建起BIMserver环境，还要有以下的几个特点（建议）：\n\n* 一件趁手的兵器——IDE（前端就WebStorm咯，涉及到后台就IDEA咯）\n* 一个性能不错的本子——内存和CPU性能要好，关键还要有不错的显卡\n\n### 需要什么\n\n* 一个敢于钻研的劲头\n\n* 一个不服输、有韧性的心\n\n*新兴的技术或者前沿的技术，必要要耐得住性子*\n\n除了精神上的鼓舞，我还要掌握一些查资料的技能，特别是在对BIMserver二次开发中，资料少之又少，整个腾讯就两个群（一个群人数不超过一只手的手指头数）。另外官方也没有提供`Step by step`和接口文档，示例代码也是少的可怜，Stack Overflow、CSDN和博客园中资料也是凤毛麟角，所以二次开发的参考资料还是去查看官方的[接口源码](https://github.com/opensourceBIM/BIMserver/tree/parent-1.5.88/PluginBase/src/org/bimserver/shared/interfaces)，比如最常用的[接口源码](https://github.com/opensourceBIM/BIMserver/blob/parent-1.5.88/PluginBase/src/org/bimserver/shared/interfaces/ServiceInterface.java)。\n\n### 万里长征第一步\n\n万事开头难，先起个[Hellobim](https://github.com/ibrucekong/hellobim/)吧！\n\n#### 设计布局\n\n```html\n<div id=\"maincontainer\">\n  <div id=\"topsection\">\n    <h1>Hellobim</h1>\n  </div>\n  <div id=\"contentwrapper\">\n    <div id=\"colmid\">\n      <div id=\"colright\">\n        <div id=\"col1wrap\">\n          <div id=\"col1pad\">\n            <div id=\"viewerContainer\">\n            </div>\n          </div>\n        </div>\n        <div id=\"treeContainer\" class=\"bimsurfer-static-tree\">\n        </div>\n        <div id=\"dataContainer\" class=\"bimsurfer-metadata\">\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n#### 变量配置\n\n由于JavaScript代码比较多，所以拆分成了三部分，一个是变量配置模块，一个是登录模块，一个是模型加载展示。\n\n```javascript\nvar projectName = 'test1'; // address地址下的BIMserver服务中必须有test1项目，而且还要有模型\nvar address = \"http://192.168.1.116:8082\"; // 这三个是在安装BIMserver时配置的地址、账户和密码\nvar account = \"admin@163.com\";\nvar password = \"1234567890\";\nvar token, poid, lastRevisionId; // 这三个是在模型加载时需要用到的\nvar metadata; // 这是右侧元数据\n```\n\n#### 登录\n\n```javascript\n// 登录代码\ndocument.addEventListener(\"DOMContentLoaded\", function (event) {\n  function loadFromBimserver(address, username, password, target) {\n    var client = new BimServerClient(address);\n    client.init(function () {\n      client.login(username, password, function () {\n        // 根据项目名称获取该项目的模型场景\n        client.call(\"ServiceInterface\", \"getAllProjects\", {\n          onlyTopLevel: true,\n          onlyActive: true\n        }, function (projects) {\n          var totalFound = 0;\n          projects.forEach(function (project) {\n            if (project.name === projectName) {\n              token = client.token;\n              poid = project.oid;\n              lastRevisionId = project.lastRevisionId;\n            }\n          });\n        });\n      }, function (error) {\n        console.error(error);\n      });\n    });\n  }\n\n  try {\n    loadFromBimserver(address, account, password);\n  } catch (e) {\n    console.log(e);\n  }\n});\n```\n\n#### 模型加载及展示\n\n```javascript\n// 加载模型并展示\nrequire([\"bimsurfer/src/BimSurfer\",\n    \"bimsurfer/src/BimServerModelLoader\",\n    \"bimsurfer/src/StaticTreeRenderer\",\n    \"bimsurfer/src/MetaDataRenderer\",\n    \"bimsurfer/lib/domReady!\"],\n  function (BimSurfer, BimServerModelLoader, StaticTreeRenderer, MetaDataRenderer) {\n\n    function processBimSurferModel(bimSurferModel) {\n\n      bimSurferModel.getTree().then(function (tree) {\n\n        var domtree = new StaticTreeRenderer({\n          domNode: 'treeContainer'\n        });\n        domtree.addModel({name: \"\", id: lastRevisionId, tree: tree});\n        domtree.build();\n        metadata = new MetaDataRenderer({\n          domNode: 'dataContainer'\n        });\n\n        metadata.addModel({name: \"\", id: lastRevisionId, model: bimSurferModel});\n\n        bimSurfer.on(\"selection-changed\", function (selected) {\n          domtree.setSelected(selected, domtree.SELECT_EXCLUSIVE);\n          metadata.setSelected(selected);\n        });\n\n        domtree.on(\"click\", function (oid, selected) {\n          if (selected.length) {\n            bimSurfer.viewFit({\n              ids: selected,\n              animate: true\n            });\n          }\n          bimSurfer.setSelection({\n            ids: selected,\n            clear: true,\n            selected: true\n          });\n        });\n\n      });\n    }\n\n    var bimSurfer = new BimSurfer({\n      domNode: \"viewerContainer\"\n    });\n    window.bimSurfer = bimSurfer;\n\n    var bimServerClient = new BimServerClient(address, null);\n    bimServerClient.init(function () {\n\n      bimServerClient.setToken(token, function () {\n        var modelLoader = new BimServerModelLoader(bimServerClient, bimSurfer);\n\n        var models = {}; // roid -> Model\n\n        var nrProjects;\n\n        function loadModels(models, totalBounds) {\n          var center = [\n            (totalBounds.min[0] + totalBounds.max[0]) / 2,\n            (totalBounds.min[1] + totalBounds.max[1]) / 2,\n            (totalBounds.min[2] + totalBounds.max[2]) / 2\n          ];\n\n          var globalTransformationMatrix = [\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            -center[0], -center[1], -center[2], 1\n          ];\n          for (var roid in models) {\n            var model = models[roid];\n            modelLoader.setGlobalTransformationMatrix(globalTransformationMatrix);\n            modelLoader.loadFullModel(model).then(function (bimSurferModel) {\n              processBimSurferModel(bimSurferModel);\n              //填充下拉框\n              getModelOidAndName(bimSurferModel);\n            });\n          }\n        }\n\n        function getModelOidAndName(thisModel) {\n          var modelObj = thisModel.apiModel.objects;\n          Object.keys(modelObj).forEach(function (key) {\n            if (modelObj[key].object.hasChildren === undefined) {\n              var option = document.createElement(\"option\");\n              $(option).val(key);\n              if (modelObj[key].object.Name === undefined || modelObj[key].object.Name === \"\") {\n                $(option).text(key);\n              } else {\n                $(option).text(modelObj[key].object.Name);\n              }\n              $('#select').append(option);\n            }\n          });\n        }\n\n        bimServerClient.call(\"ServiceInterface\", \"getAllRelatedProjects\", {poid: poid}, function (projects) {\n          nrProjects = projects.length;\n          var totalBounds = {\n            min: [Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE],\n            max: [-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE]\n          };\n\n          projects.forEach(function (project) {\n\n            if (project.lastRevisionId !== -1) {\n              //lastRevisionId\n              bimServerClient.getModel(project.oid, project.lastRevisionId, project.schema, false, function (model) {\n                models[project.lastRevisionId] = model;\n\n                bimServerClient.call(\"ServiceInterface\", \"getModelMinBounds\", {roid: project.lastRevisionId}, function (minBounds) {\n                  bimServerClient.call(\"ServiceInterface\", \"getModelMaxBounds\", {roid: project.lastRevisionId}, function (maxBounds) {\n                    if (minBounds.x < totalBounds.min[0]) {\n                      totalBounds.min[0] = minBounds.x;\n                    }\n                    if (minBounds.y < totalBounds.min[1]) {\n                      totalBounds.min[1] = minBounds.y;\n                    }\n                    if (minBounds.z < totalBounds.min[2]) {\n                      totalBounds.min[2] = minBounds.z;\n                    }\n                    if (maxBounds.x > totalBounds.max[0]) {\n                      totalBounds.max[0] = maxBounds.x;\n                    }\n                    if (maxBounds.y > totalBounds.max[1]) {\n                      totalBounds.max[1] = maxBounds.y;\n                    }\n                    if (maxBounds.z > totalBounds.max[2]) {\n                      totalBounds.max[2] = maxBounds.z;\n                    }\n                    nrProjects--;\n                    if (nrProjects === 0) {\n                      loadModels(models, totalBounds);\n                    }\n                  });\n                });\n              });\n            } else {\n              nrProjects--;\n              if (nrProjects === 0) {\n                loadModels(models, totalBounds);\n              }\n            }\n          });\n        });\n      });\n    });\n});\n```\n\n#### 效果展示\n\n在index.html中右击，选择 `Run 'index.html'`或者Ctrl + Shift + F10启动页面，效果如图：\n\n![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-hellobim-01.png)\n\n点击任意部件，部件高亮并且可以查看部件的信息。\n\n![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-hellobim-02.png)\n\n\n\n*界面丑，待优化，至少模型加载并展示了嘛*\n\n*能力有限，如有错误或疑问请在评论区指出，谢谢。*\n\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["BIM","BIMserver"],"categories":["languages"]},{"title":"BIMserver入门笔记 - 01环境搭建、数据导入及预览","url":"/posts/3869274485/","content":"**轻松搭建BIMserver开发环境：**\nBIMserver在国内开发资料太少，关于环境搭建的有一些，我也是参照着这些教程一步步的搭建，该笔记把遇到的一些坑给记录下来，方便以后参考。\n\n<!--more-->\n\n1. BIMserver入门笔记 - 01环境搭建、数据导入及预览\n\n2. [BIMserver入门笔记 - 02登录及模型展示](../3230248873/)\n\n现在的工作就是，什么热就干什么（什么... 小李你说啥，Tom热~~），这年头就这样，能把自己的产品给推出去，并且能加码推出去就是胜利。\n\nBIM在行业里应用不多，大家都在积极的储备该技术，都指望着自己能厚积薄发。\n\n### 软件下载\n\n这里给出官方开源[地址](https://github.com/opensourceBIM/BIMserver)，下载相应版本的发布版本（这里以[v1.5.88](https://github.com/opensourceBIM/BIMserver/releases/tag/parent-1.5.88)为例，下载资料已经整理好了，点击[下载](https://github.com/ibrucekong/bimserver-env)）。\n\n*由于BIMserver的开发环境搭建时对版本的兼容性要求比较高，小版本不一样都会出错*\n\n### 环境搭建\n\n1. 选择一个文件夹命名`BIMserver`，且整个文件夹的路径中没有空格和中文；\n\n2. 将`bimserver-env`文件夹下的文件都拷贝进来\n\n3. 双击`bimserverjar-1.5.88.jar`，`Address`内容改为`你的IP`，然后点击`Start`\n\n4. 等服务启动成功后，点击`Launch Webbrowser`，打开平台自带的运维界面\n\n   这是一个主要的配置过程，过程就用图片来说明了，如下：\n\n   a. 找一个没有中文、没有空格的路径，存放jar文件\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-01.png) \n\n   b. 全程使用IP作为服务发布的地址，先获取IP再说\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-02.png) \n\n   c. 双击启动jar，将Address中的localhost改为刚才获取的IP，点击右下角的start按钮\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-03.png) \n\n   d. 当看到信息窗口中打印 Server started successfully即可，并点击 Launch Webbrowser\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-04.png) \n\n   e. 打开BIMserver的运维安装界面，填写服务名称、服务描述，其他默认即可，点击Next\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-05.png) \n\n   f. 设置管理员账号、密码，进入下一步\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-06.png) \n\n   g. 设置email服务，忽略，点击Next\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-07.png) \n\n   h. 勾选掉所有的插件的勾，点击upload JAR files of plugins，进行离线安装插件\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-08.png) \n\n   i. 由于每次只能打开一个插件，所以需要耐心的将每一个插件选择好（不要有遗漏哦）\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-09.png) \n\n   j. 这是插件列表，最好数一下\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-10.png) \n\n   k. 默认，下一步\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-11.png) \n\n   l. 点击 Setup，开始安装\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-12.png) \n\n   m. 安装过程中，打印了一行红色的字体，忽略，不用管，会继续安装\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-13.png) \n\n   n. 直至出现以下内容，表示安装成功，点击箭头指向的链接\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-14.png) \n\n   o. 刷新后，出现这些内容，主要使用的是bimviews，点击打开\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-15.png) \n\n   p. 需要身份验证，填写安装时填写的账号、密码\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-16.png) \n\n   q. 登录成功后，界面中是工程列表，但是没有工程\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-17.png) \n\n   r. 找到如图的新建项目的按钮\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-18.png) \n\n   s. 输入项目名称、项目描述，其他默认，点击Add\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-19.png) \n\n   t. 项目创建成功，点击箭头所指的按钮\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-20.png) \n\n   u. 选择 Checkin... 进行模型的导入\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-21.png) \n\n   v. 导入模型有两种方式，一种是本地文件，一种是URL，这里以本地文件为例进行演示\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-22.png) \n\n   w. 选择需要导入的模型文件\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-23.png) \n\n   x. 选择好后，文件类型和注释都有默认值，直接点击Checkin new revision\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-24.png) \n\n   y. 这个导入速度和使用的电脑性能有关\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-25.png) \n\n   z. 导入成功后，点击3D这个按钮\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-26.png) \n\n   aa. 在左侧布局中，有可以展开的树结构，和有控制显隐的眼睛\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-27.png) \n\n   ab. 模型展示效果，左键拖拽旋转，中键拖拽平移\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-28.png) \n\n   ac. 通过隐藏外面的部件，可以看到内部的细节\n\n   ![](https://coding.net/u/ibrucekong/p/images/git/raw/master/bimserver-29.png) \n\n### 注意事项\n\n1. BIMserver的文件夹 [不要有中文，不要有空格]*3 （假设说了三次）\n2. 服务地址最好填写为IP（管他呢，写localhost也行，但是总感觉后面会需要改为IP或域名）\n3. 记住账号，密码\n4. 安装插件式需要科学上网的（就因为这个，博主专门为搭建准备了完备的安装包和离线文件）\n\n\n\n*能力有限，如有错误或疑问请在评论区指出，谢谢。*\n\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["BIM","BIMserver"],"categories":["languages"]},{"title":"前端地图应用中几种监听事件","url":"/posts/1380263657/","content":"**轻松绑定解除事件监听：**\n在前端使用JavaScript给一个元素绑定、解除监听事件最为常用的是addEventListener，解除也很容易。在前端地图开发中，也会遇到很多事件绑定、解除的问题，下面我们就来讨论一下在这些环境下的事件监听是怎么实现的。\n\n<!--more-->\n\n从事GIS方向，和地图打交道比较多，对于各种地图的监听事件的使用比较多，对于常用的事件监听方法梳理了以下内容，作为笔记保存。\n\n### 事件监听\n\n>  JavaScript使我们有能力创建动态页面，网页中的每一个元素都可以产生某些触发JavaScript函数的事件。我们可以认为事件是可以被JavaScript侦测到的一种行为。\n\n### 地图开发中的事件监听\n\n* 百度\n* 高德\n* 谷歌\n* ArcGIS\n\n### 事件监听的使用\n\n#### 原生事件监听\n\n在Web项目中要对dom元素绑定监听事件，有onclick，原生方法一般使用attachEvent和addEventListener。其中attachEvent使用与IE早期版本，比如IE6、7、8，而addEventListener适用于IE9、10、11，还有FireFox、Chrome、Safari和Opera等现代浏览器。\n\n1. 直接添加\n\n   a. html方式\n\n   ```html\n   <!-- 最简单的是在dom上添加 onclick 属性 -->\n   <input type=\"button\" value=\"clickMe\" onclick=\"check(this)\">\n   ```\n\n   b. javascript方式\n\n   ```javascript\n   // 给元素添加 onclick 事件 ： onclick还可以是 ondblclick、ondrag等\n   element.onclick = function(){\n       // logic\n   }\n   ```\n\n2. attachEvent\n\n   在早期IE中，使用attachEvent作为添加监听的一种方式，对一个元素绑定监听可以按照以下方式进行：\n\n   ```javascript\n   /**\n   * 绑定监听\n   * element 需要添加事件监听的元素或dom\n   * event 事件类型（事件名称），是字符类型，比如包含\"onclick\"、\"onmouseover\"、\"onkeyup\"等\n   * callback 触发监听的回调函数\n   */ \n   element.attachEvent(event, callback)；\n   \n   /**\n   * 移除监听\n   * element 需要移除事件监听的元素或dom\n   * event 事件类型（事件名称），是字符类型，比如包含\"onclick\"、\"onmouseover\"、\"onkeyup\"等\n   * callback 触发监听的回调函数\n   */ \n   element.attachEvent(event, callback)；\n   \n   /**\n   * callback 是回调函数名，可以自定义\n   * e 是回调参数\n   */\n   function callback(e){\n       // logic\n   }\n   ```\n\n3. addEventListener\n\n```javascript\n/**\n* 绑定监听\n* element 需要添加事件监听的元素或dom\n* event 事件类型（事件名称），是字符类型，比如包含\"click\"、\"mouseover\"、\"keyup\"等\n* callback 触发监听的回调函数\n*/ \nelement.addEventListener(event, callback)；\n\n/**\n* 移除监听\n* element 需要移除事件监听的元素或dom\n* event 事件类型（事件名称），是字符类型，比如包含\"click\"、\"mouseover\"、\"keyup\"等\n* callback 触发监听的回调函数\n*/ \nelement.removeEventListener(event, callback)；\n\n/**\n* callback 是回调函数名，可以自定义\n* e 是回调参数\n*/\nfunction callback(e){\n    // logic\n}\n```\n\n4. 小结\n\n从以上两个方法我们可以看出其中存在着一些差别：\n\n1. 兼容性方面，attachEvent仅支持早期的IE版本，而addEventListener支持的较为广泛；\n2. attachEvent在事件类型上，比addEventListener多一个字符\"on\"，需要额外注意；\n3. 两者绑定监听都需要实名函数，匿名函数的绑定关系是无法移除的。\n\n#### 百度事件监听\n\n在百度地图中对dom元素的监听，官方给出的是addEventListener和removeEventListener，使用方法和原生的addEventListener类似，但是地图API事件监听是独立的，与原生的dom事件不同，而且还增加很多自定义的事件类型。\n\n```javascript\n/**\n* 绑定监听\n* element 需要添加事件监听的元素或dom\n* event 事件类型（事件名称），是字符类型，比如包含\"click\"、\"mouseover\"、\"dragstart\"等\n* callback 触发监听的回调函数\n*/ \nelement.addEventListener(event, callback)；\n\n/**\n* 移除监听\n* element 需要移除事件监听的元素或dom\n* event 事件类型（事件名称），是字符类型，比如包含\"click\"、\"mouseover\"、\"dragstart\"等\n* callback 触发监听的回调函数\n*/ \nelement.removeEventListener(event, callback)；\n\n/**\n* callback 是回调函数名，可以自定义\n* e 是回调参数\n*/\nfunction callback(e){\n    // logic\n}\n```\n\n需要注意的是，如果要能解绑事件，绑定监听时就需要使用实名函数，匿名函数是无法解绑的。\n\n#### 高德事件监听\n\n高德在事件监听上提供了众多的方法，使用最多的就是on/off组合，另外还有addDomListener、addListener、addListenerOnce、removeListener和trigger，此次主要介绍一下最为常用的使用方法。\n\n```javascript\n/**\n* 绑定监听\n* element 需要添加事件监听的元素或dom\n* event 事件类型（事件名称），是字符类型，比如包含\"click\"、\"mouseover\"、\"dragstart\"等\n* callback 触发监听的回调函数\n*/ \nelement.on(event, callback)；\n\n/**\n* 移除监听\n* element 需要移除事件监听的元素或dom\n* event 事件类型（事件名称），是字符类型，比如包含\"click\"、\"mouseover\"、\"dragstart\"等\n* callback 触发监听的回调函数\n*/ \nelement.off(event, callback)；\n\n/**\n* callback 是回调函数名，可以自定义\n* e 是回调参数\n*/\nfunction callback(e){\n    // logic\n}\n```\n\n同样的，在 绑定和解绑时都应该使用实名函数，除非之后不需要解绑。\n\n#### 谷歌事件监听\n\n```javascript\n/**\n* 绑定监听\n* element 需要添加事件监听的元素或dom\n* event 事件类型（事件名称），是字符类型，比如包含\"click\"、\"mouseover\"、\"dragstart\"等\n* callback 触发监听的回调函数\n*/ \nvar evt = google.maps.event.addListener(event, callback)；\n\n/**\n* 移除监听\n* element 需要移除事件监听的元素或dom\n* evt 绑定监听时的句柄\n*/ \ngoogle.maps.event.removeListener(evt)；\n\n/**\n* callback 是回调函数名，可以自定义\n* e 是回调参数\n*/\nfunction callback(e){\n    // logic\n}\n```\n\n到谷歌这里，绑定监听就不如百度和高德那样，而是通过绑定监听返回的句柄进行解绑操作。这样的话，在绑定监听时的回调函数就可以是匿名函数，也可以是实名函数了。所以说上帝为你关闭的一扇大门，肯定会给你打开一扇窗户，不会让你为难的。\n\n#### ArcGIS中的事件监听\n\nArcGIS的事件监听有两种方式，一种是很早之前的版本connect style，一种是on style。其中connect是通过dojo进行实现，不过现在更加推荐on来实现。\n\n1. connect style\n\n```javascript\n/**\n* 绑定监听\n* element 需要添加事件监听的元素或dom\n* event 事件类型（事件名称），是字符类型，比如包含\"onClick\"、\"onMouseOver\"等\n* callback 触发监听的回调函数\n*/ \nvar evt = dojo.connect(element, event, callback)；\n\n/**\n* 移除监听\n* evt 绑定监听时的句柄\n*/ \ndojo.disconnect(evt)；\n\n/**\n* callback 是回调函数名，可以自定义\n* e 是回调参数\n*/\nfunction callback(e){\n    // logic\n}\n```\n\n2. on style\n\n```javascript\n/**\n* 绑定监听\n* element 需要添加事件监听的元素或dom\n* event 事件类型（事件名称），是字符类型，比如包含\"click\"、\"mouse-over\"等\n* function 触发监听的回调函数\n*/ \nvar evt = element.on(event, callback)；\n\n/**\n* 移除监听\n* element 需要移除事件监听的元素或dom\n* evt 绑定监听时的句柄\n*/ \nevt.remove()；\n\n/**\n* callback 是回调函数名，可以自定义\n* e 是回调参数\n*/\nfunction callback(e){\n    // logic\n}\n```\n\n其中connect style和on style对于event格式不一样，除了方法名不一样外，在调用方面也存在一定的不同，需要额外注意，不要混淆。\n\n### 事件监听总结\n\n从上到下看过来，就会发现事件监听也是大同小异，调用方式、事件名称都是次要，关键是考虑好事件绑定后要不要解除，一般来讲都需要绑定实名函数（也有例外，比如谷歌和ArcGIS），方便解除监听事件。\n\n从事开发行业，特别是GIS行业，几乎在所有的项目中都会使用事件监听（主要指地图事件监听），所以希望小伙伴都能扎实的掌握好该技能。\n\n\n\n*能力有限，如有错误或疑问请在评论区指出，谢谢。*\n\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["事件监听"],"categories":["languages"]},{"title":"IE和Chrome带有多个参数的互相跳转","url":"/posts/1077207737/","content":"**IE & Chrome的互相跳转：**\n简单需求，简单实现。从IE跳转到Chrome，介绍使用`ActiveXObject`进行操作跳转，并实现多个参数的传递；从Chrome跳转到IE，介绍使用修改注册表的形式进行操作。\n\n<!--more-->\n\n### IE to Chrome\n\n在IE中打开Chrome方法简单且粗暴，`talk is cheap, show me the code`。\n\n#### 单参or无参\n\n```\nvar objShell = new ActiveXObject(\"WScript.Shell\");\n// 无参\nobjShell.Run(\"cmd.exe /c start chrome www.baidu.com\",0,true);\n```\n\n![无参](https://coding.net/u/ibrucekong/p/images/git/raw/master/ie-to-chrome-no-param.png)\n\n```\nvar objShell = new ActiveXObject(\"WScript.Shell\");\n// 单参\nobjShell.Run(\"cmd.exe /c start chrome www.baidu.com?id=1\",0,true);\n```\n\n\n\n![单参](https://coding.net/u/ibrucekong/p/images/git/raw/master/ie-to-chrome-one-param.png)\n\n上述情况都没问题，一切都很顺利，下面来看看多参的情况。\n\n#### 多参传递\n\n```\n// 如果要传 id=1, name=bruce 两个参数\nvar objShell = new ActiveXObject(\"WScript.Shell\");\nobjShell.Run(\"cmd.exe /c start chrome www.baidu.com?id=1&name=bruce\",0,true); \n```\n\n![多参](https://coding.net/u/ibrucekong/p/images/git/raw/master/ie-to-chrome-one-param.png)\n\n什么鬼，我明明传了两个参数啊，怎么只显示了一个，只显示了第一个。What the hell is going on?\n\n原来在cmd的世界里，它有自己的一套转义语法，可参考[链接](https://www.cnblogs.com/newsea/p/3866413.html)。\n\n```\nvar objShell = new ActiveXObject(\"WScript.Shell\");\n// 经过修正，将&符号进行转义，使用^&代替&\nobjShell.Run(\"cmd.exe /c start chrome www.baidu.com?id=1^&name=bruce\",0,true); \n```\n\n![多参](https://coding.net/u/ibrucekong/p/images/git/raw/master/ie-to-chrome-more-param.png)\n\n看完在IE中打开Chrome了，现在来瞅瞅在Chrome中打开IE的方法吧。\n\n### Chrome to IE\n\n在Chrome中打开IE，并传多参数，相比IE中打开Chrome要麻烦一些，大致分为以下几个方面。\n\n#### 配置跳转环境\n\n1. regOpenIE.reg\n\n   1.1 在D盘下新建openIE文件夹，路径为`D:\\openIE\\`\n\n   1.2 在openIE路径下新建`regOpenIE.reg`，并将如下内容复制进该文件：\n\n```\nWindows Registry Editor Version 5.00\n\n[HKEY_CLASSES_ROOT\\openIE]\n@=\"URL:Alert Protocol\"\n\"URL Protocol\"=\"\"\n\n[HKEY_CLASSES_ROOT\\openIE\\DefaultIcon]\n@=\"iexplore.exe,1\"\n\n[HKEY_CLASSES_ROOT\\openIE\\shell]\n\n[HKEY_CLASSES_ROOT\\openIE\\shell\\open]\n\n[HKEY_CLASSES_ROOT\\openIE\\shell\\open\\command]\n@=\"cmd /c set m=%1 & \\\"D:\\\\alert\\\\openIE.bat\\\" %%m%% & exit\"\n```\n\n其中文本中的最后一行`D:\\\\alert\\\\openIE.bat\\`是当前文件的目录。\n\n2. 在openIE文件夹下新建`openIE.bat`，并将如下内容复制进该文件：\n\n```\n@echo off\nset m=%m:openIE:=%\nset m=\"%m:separator=&%\"\nstart \"\" \"C:\\\\Program Files\\\\internet explorer\\\\iexplore.exe\" %m%\nexit\n```\n\n其中文本中`start`一行中`C:\\\\Program Files\\\\internet explorer\\\\iexplore.exe`是你电脑中IE的路径，注意分隔符是双反斜杠。\n\n#### 单参or无参\n\n1. 在布局中加入以下内容。\n\n```\n<a href=\"openIE:www.baidu.com\">Chrome to IE</a>\n```\n\n![无参](https://coding.net/u/ibrucekong/p/images/git/raw/master/chrome-to-ie-no-param.png)\n\n```\n<a href=\"openIE:www.baidu.com?id=1\">Chrome to IE</a>\n```\n\n![单参](https://coding.net/u/ibrucekong/p/images/git/raw/master/chrome-to-ie-one-param.png)\n\n\n\n#### 多参传递\n\n```\n// 和测试IE跳转Chrome一样，传 id=1, name=bruce 两个参数，看下效果是不是能出来\n<a href=\"openIE:www.baidu.com?id=1&name=bruce\">Chrome to IE</a>\n```\n\n![多参](https://coding.net/u/ibrucekong/p/images/git/raw/master/chrome-to-ie-one-param.png)\n\n同样的思维，是不是`&`又被转义或者影响到了呢，查阅资料，有[博主](https://blog.csdn.net/java_zys/article/details/51837899)给出了一个解决方案，使用无转义的字符去替代的方案(就是上面`openIE.bat`中第三行给出的内容)。\n\n```\n<a href=\"openIE:www.baidu.com?id=1separatorname=bruce\">Chrome to IE</a>\n```\n\n![多参](https://coding.net/u/ibrucekong/p/images/git/raw/master/chrome-to-ie-more-param.png)\n\n使用参数中的`separator`代替`&`，完成解析。\n\n### 写在最后\n\nIE和Chrome的跳转可能还有其他方法，如果朋友找到更加简单的方法，请在下面回复告诉博主，感激不尽。\n\n\n\n<div style=\"text-align: center\"><img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["Chrome","IE","跳转"],"categories":["languages"]},{"title":"在Chrome中调试Ionic的Android应用","url":"/posts/289005530/","content":"**Ionic的Android端调试：**\n在以往Android原生开发时，App的调试用真机很是简单，即便是虚拟机调试，也是手到擒来；而如今，在混合应用横行的年代，动不动就是React-Native、Ionic、Vue、MUI等一系列的混合架构写出来的Android，还没对其调试过，公司采用Ionic研发并遇到一些坑，特将调试过程记录下来。\n\n<!--more-->\n\n首先百度一番，度娘告知有以下两种方法进行调试：\n\n1. 在项目根目录执行以下命令，调试信息将在console中打印出来\n\n   ````\n   ionic run android -l -c\n   ````\n\n2. Chrome调试\n\n由于是从项目中拿到App对其调试，没有工程，所以第一种调试方法无法测试。\n\n第二种方法是网上应用最多的，我们来看看需要哪些操作：\n\n1. 首先真机或虚拟机连接电脑（手机开USB调试模式，并且允许电脑能访问手机），并且在命令行中确认\n\n   ```\n   $ adb devices\n   ```\n\n   确保设备连接到电脑。\n\n2. 在Chrome中打开`chrome://inspect/#devices`，可以在Remote Target中看到已经连接的手机和手机中已经开启的应用线程。\n\n3. 找到需要调试的App，点击旁边的inspect（注意：电脑要能科学上网下载一些依赖，不然会显示404或一片空白，这些依赖会缓存下来，不清理缓存的话只需第一次运行时翻墙即可）\n\n4. 最重要的一点是，Ionic打的包一定是debug包，否则在Remote Target中是看不到该应用的，也就无法调试咯。\n\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>\n","tags":["Ionic","Android","Chrome","调试"],"categories":["languages"]},{"title":"入坑公路车","url":"/posts/1652333246/","content":"**第一辆公路车：**\n公路车第一次长草是在过了年的时候，以前也经常骑自行车，从小学三年级骑到大四毕业，车子就是很平常的平把山地车或者休闲车，对于小弯把公路车还真没接触过，这草说长就是疯长啊，果断收割。\n\n<!--more-->\n\n草已经长了快半年了，在网上也刷了不少相关的帖子，一直没忍心入坑。顾虑有以下两点：\n\n1. 买了主要通勤用，家里可以放心，停在公司真的是不放心；\n2. 平时练腿，健身健体，由于搬砖的工作性质，需要适当调节一下运动时间。\n\n就在昨天，小伙伴们已经购买了属于自己的拉轰电动，我也是差一点没忍住，当时三个人，但是电驴的配色只有两辆了，配色不够，我就“大方的”把机会让给他们俩了，更进一步的为我入坑公路车提供了绝佳的机会。\n\n今天在另一个朋友的陪同下，来到“XX捷安特专卖店”。之前在网上也浏览过一些博客、帖子，针对捷安特的公路车也了解了一些，但是真到了专卖店里，和老板攀谈起来还是有些切啊。\n\n由于预算（穷）的原因，心里只存放了SCR1、SCR2。首先，试骑了SCR2，此车入门偏下档次，就不再贴太多相关信息，骑了一圈就pass了；试骑SCR1，也是入门车，比SCR2贵1000钢镚，试骑比较了确实不一样，车架轻（前叉是碳纤维）而且稍有推背感（七哥说的，也确实是），最后选择了这款的原因有以下几点（又要吃土了）：\n\n1. 车比较轻，前叉是碳纤维，有效降低车头重量，并且提高刚性和吸震性；\n2. 涂装也比较喜欢，SCR2是黑白，SCR1有亮绿和消光亮黑，选择了后者；\n3. 没有螳螂须，内走线，逼格再次提升；\n4. 车架由GIANT 自家的ALUXX SL铝材，有效降低了整车重量。\n\n由于对公路车还不够了解，有些优缺点还需要继续发掘。\n\n配置详细信息如下：\n\n| 描述     | 型号                   |\n| -------- | ---------------------- |\n| 车架     | GIANT ALUXX SL         |\n| 前叉     | 碳纤维公路前叉         |\n| 撤吧     | 铝合金管公路把         |\n| 车首竖杆 | 铝合金竖杆             |\n| 座垫     | GIANT CONTACT 座垫     |\n| 座垫杆   | 铝合金 D 型座垫杆      |\n| 变速把手 | SHIMANO ST-R3000       |\n| 前变速器 | SHIMANO FD-R3000       |\n| 后变速器 | SHIMANO RD-R3000       |\n| 飞轮     | SHIMANO CS-HG400-9     |\n| 刹车     | SHIMANO BR-R3000       |\n| 大齿盘   | 铝合金中空一体齿盘     |\n| 轮圈     | 铝合金高框圈           |\n| 花鼓     | 铝合金培林花鼓         |\n| 钢丝     | HTSS 钢丝              |\n| 轮胎     | GIANT S-R4 700X25C轮胎 |\n| 后避震器 | 无                     |\n| SIZE     | S码 700CX445           |\n\n入门级别的公路车，已经很满意了，毕竟花了那么多大洋，未来几个月要吃土了。\n\n此处就不一一贴局部细节图了，只贴一些低像素的整车效果图：\n\n![Giant SCR1](https://coding.net/u/ibrucekong/p/images/git/raw/master/bike.png)\n\n*车子有了，还差很多装备，骑行服、锁踏、锁鞋、心率计、功率计等等，试问：我需要吗？*\n\n另外说下我的计划（这就是浪的理由？）：\n\n1. 平时保证通勤；\n2. 要有骑行计划，练踏频，练力量，健身咯；\n3. 这就是个附带效果了，争取三个月能减些脂肪，体重降2.5Kg；\n4. 有可能的话，最好能跟队骑行。\n\n看似简单的想法，但需要十足长期的努力，坚持很重要，加油！\n\n\n\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["自行车","公路车"],"categories":["bike"]},{"title":"Ionic使用百度地图弹窗并响应点击事件","url":"/posts/2994729501/","content":"**Ionic响应百度地图弹窗中的点击事件：**\nIonic使用的语法TypeScript，有一套自己的生命周期，和ES5之前的使用习惯不相同，变量作用域不尽相同。在Ionic中使用百度地图，也会踩一些坑，最近在业务中遇到了这样的需求，百度地图弹窗中动态写的HTML布局的响应事件无法拿到。\n\n<!--more-->\n\n### 在Ionic中使用百度地图\n\n#### 初始化地图\n\n```\n// 1.首先在index.html中引入百度地图的URL（其中要有申请的KEY）\n// <script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=3.0&ak=您的密钥\"></script>\n\n// 2.新建map组件，在ts文件中输入以下内容\nionViewWillEnter(){\n    let map = new BMap.Map(\"allmap\");// allmap是在html布局中定义的<div id=\"allmap\"></div>\n    let point = new BMap.Point(116.417, 39.921);// 初始化地图\n    map.centerAndZoom(point, 15);// 初始化地图视图\n}\n```\n\n#### 添加Marker\n\n```\n// 3.在 map.centerAndZoom(point, 15) 的下一行继续添加以下内容\nlet marker = new BMap.Marker(point);// 初始化Marker对象\nmap.addOverlay(marker);// 将marker放置到地图上\n```\n\n#### 为marker添加点击事件\n\n```\n// 4.在 map.addOverlay(marker) 的下一行继续添加以下内容\nmarker.addEventListener(\"click\", function(){\n    // TODO 做其他事情\n});\n```\n\n#### 弹出信息窗\n\n```\n// 5.在 map.addOverlay(marker) 和 marker.addEventListener 之间插入以下内容\nlet options = {\n    width: 200,\n    height: 100,\n    title: \"测试弹窗的标题\"\n}; // 定义弹出窗参数\nlet htm = '<div>内容：这是内容主体</div><div><button id=\"confirm\" onclick=\"test()\">确定</button></div>';\nlet infoWindow = new BMap.InfoWindow(htm, options); // 初始化弹出窗对象\n\n// 6.在 TODO 下面继续添加以下内容\nmap.openInfoWindow(infoWindow, point); // 点击marker执行该行代码，弹出信息窗\n\n// 7.在该ts文件中，添加test方法\ntest(){\n    console.log(\"如果我再控制台中打印出来，说明弹窗中的button响应了，反之。\");\n}\n```\n\n#### 控制台没打印\n\n打印失败了！！！\n\n有人分析说，`test`需要用`this`来调用，写成这个样子\n\n```\nlet infoWindow = new BMap.InfoWindow('<div>内容：这是内容主体，啦啦啦</div><div><button id=\"confirm\" onclick=\"this.test()\">确定</button></div>', options); // 初始化弹出窗对象\n```\n\n同样的，还是失败了。\n\n分析原因，是Ionic在初始化页面时，弹窗的布局信息并没有跟着初始化，而绑定的`test()`方法也没有初始化，所以绑定的方法无效。\n\n#### 解决方法\n\n那怎么样才能保证能将`test()`方法绑定到`button`上的呢？\n\n其实，我们可以曲线救国，让绑定事件在初始化弹窗之后，弹窗之前绑定，这样既可以有效的防止页面初始化带来的影响，又可以顺利绑定事件，下面是我的做法：\n\n```\n// 以上完整代码\n// 1.首先在index.html中引入百度地图的URL（其中要有申请的KEY）\n// <script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=3.0&ak=您的密钥\"></script>\n\n// 2.新建map组件，在ts文件中输入以下内容\nionViewWillEnter(){\n    let map = new BMap.Map(\"allmap\");// allmap是在html布局中定义的<div id=\"allmap\"></div>\n    let point = new BMap.Point(116.417, 39.921);// 初始化地图\n    map.centerAndZoom(point, 15);// 初始化地图视图\n    \n    // 3.在 map.centerAndZoom(point, 15) 的下一行继续添加以下内容\n    let marker = new BMap.Marker(point);// 初始化Marker对象\n    map.addOverlay(marker);// 将marker放置到地图上\n    \n    // 5.在 map.addOverlay(marker) 和 marker.addEventListener 之间插入以下内容\n    let options = {\n        width: 200,\n        height: 100,\n        title: \"测试弹窗的标题\"\n    }; // 定义弹出窗参数\n    let htm = '<div>内容：这是内容主体</div><div><button id=\"confirm\">确定</button></div>';\n    let infoWindow = new BMap.InfoWindow(htm, options); // 初始化弹出窗对象\n\n    // 4.在 map.addOverlay(marker) 的下一行继续添加以下内容\n    let that = this;\n    marker.addEventListener(\"click\", function(){\n        // TODO 做其他事情\n        // 绑定监听事件\n        document.getElementById(\"confirm\").onclick = that.test;\n        map.openInfoWindow(infoWindow, point); // 点击marker执行该行代码，弹出信息窗\n    });\n}\n\n// 7.在该ts文件中，添加test方法\ntest(){\n    console.log(\"如果我再控制台中打印出来，说明弹窗中的button响应了，反之。\");\n}\n```\n\n这样子再测试的话，控制台中就可以打印`如果我再控制台中打印出来，说明弹窗中的button响应了，反之。`\n\n### 总结\n\n以上问题在常规的B/S项目中不会发生，这是因为在Ionic项目中，使用的是Angular语法，即TypeScript（JavaScript的超集），该语法自己定义了一些新特性，使得开发效率更高，语法更简洁，再加上ES6（或更高）新特性，使得在动态生成的页面上绑定监听事件失效，所以可以通过延迟绑定或者适当时机绑定来解决。\n\nIonic做项目和以往的ES5或原生项目相比，效率更高、兼容多平台、开源组件更多、也更加美观，是一个比较好的路子。\n\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>\n","tags":["Ionic","百度地图","点击事件"],"categories":["languages"]},{"title":"吾爱破解论坛2018年7月21日暑假开放注册通知","url":"/posts/2639421812/","content":"**吾爱破解论坛注册喜讯：**\n吾爱开放注册又来了，此次是2018年第二次开放注册，3月13日没能上车的小伙伴，这次正值周六，天时地利人和，要整理好自己的注册资料，期待21日的到来吧。\n\n<!--more-->\n\n<div style=\"text-align: center;font-weight: bold;font-size: 2rem; color: red\">\n\t喜讯、喜讯、喜讯\n</div><div style=\"text-align: center;font-weight: bold;font-size: 1.5rem\">\n\t<span>吾爱破解论坛开通开放注册</span>\n\t<span>2018年7月21日12:00-14:00和20:00-22:00</span>\n</div><div style=\"text-align: center;font-weight: bold;font-size: 1.5rem;padding-top: 0;margin-top: 0;height: 106px;line-height: 106px\"><a href=\"https://www.52pojie.cn/?fromuid=575811\" style=\"text-align: center;\">我要吾爱</a></div>\n<div></div>\n***注册注意事项：***\n\n1. 吸取上次上车失败的教训！！！\n2. 注意不要错过注册时间\n3. 认真读注册须知（需要等10分钟）\n4. 事先把注册信息写在本子或word里（独一无二的邮箱和用户名） [需要准备什么](https://www.52pojie.cn/misc.php?mod=faq&action=faq&id=15&messageid=16)\n5. 耐心检查填写内容（看是否都符合要求）\n6. 邮箱验证阶段，有的要到邮箱的垃圾箱中查看有没有验证邮件，而有的邮箱则需要设置白名单才能收到验证邮件 [帮助](https://www.52pojie.cn/thread-98585-1-1.html)\n\n<div style=\"text-align: center;font-weight: bold;font-size: 1.5rem\">\n\t祝愿小伙伴们都能获得自己的吾爱账号！\n</div><div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["活动","吾爱破解"],"categories":["tips"]},{"title":"在Linux中解决跨网段访问服务","url":"/posts/3249349784/","content":"**在Linux中解决跨网段访问服务：**\n有这样一个场景：在局域网中，两台电脑，A电脑使用交换机（192.168.72.33），B电脑使用WiFi（192.168.1.21），两者的网段不同，导致电脑A无法ping通电脑B。今天就来讲讲怎么在Linux中解决这个问题。\n\n<!--more-->\n\n这是我在生产环境中遇到的一个问题，刚开始接触，踩了不小的坑，耽误了很长时间，以此来记录一下。\n\n针对以上问题的解决办法就是：添加一个路由！\n\n在A电脑中打开终端\n```\n$ route add default gw 192.168.72.1\n```\n加上后，发现可以ping通了，但是重启机器后，又无法ping通了。原因是上面加的路由是临时的，并未在系统中永久保存，如果需要添加永久路由，按照以下方法：\n* 打开终端，执行：\n```\n$ vi /etc/rc.local\n```\n* 在文档后插入一行，输入*route add default gw 192.168.72.1*\n* 按ESC键退出编辑状态，输入`:wq`，回车保存即可。\n\n如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a>\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>\n","tags":["Linux","Route"],"categories":["tools"]},{"title":"在Linux中如何使用SCP快速拷贝数据","url":"/posts/1224017506/","content":"**在Linux中快速拷贝数据的工具：**\n\n根据工作上的需求：一个场景，两台电脑，万千碎片数据，该怎么从A电脑拷贝这些数据到B电脑？直接复制、粘贴？先打包、再复制粘贴？方法有很多，但是很少人去分析拷贝数据的快慢。\n\n<!--more-->\n\n上面说的问题，在Linux、Windows、Mac环境下都存在，这里只从Linux的角度来实现下。为什么呢？不知大家注意上面“万千碎片数据”字眼了吗，一般这样的字眼基本上会出现在服务器的存储中，而当今服务器使用最多的操作系统就是Linux，所以本文只针对Linux之间互传为例进行说明。\n\n## SCP是什么\n\nscp是secure copy的简写，用于Linux下进行远程拷贝的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的（稍微会影响一点速度）。\n\n## 为什么要用SCP\n\n1. 如果服务器上没有配置FTP服务器，没有开启web服务器，也没有做共享，无法通过常规的途径获取文件时，可以考虑使用scp。\n2. 需要将本机文件上传至远程服务器上，远程服务器没有开启FTP服务器或共享，无法通过常规方法上传时，可以考虑scp。\n\n## 场景简介\n\n假设以下两台电脑是通过公网连接的，只需要把局域网的IP换成公网的IP即可。\n\n| 字段     | A电脑          | B电脑                 |\n| -------- | -------------- | --------------------- |\n| 场景     | CentOS6.5      | Ubuntu16.04           |\n| 用户名   | root           | bruce                 |\n| IP       | 192.168.1.20   | 192.168.1.21          |\n| 数据目录 | /home/backups/ | /media/bruce/backups/ |\n| 文件     | 某些png图片    | 某些png图片           |\n\n## 参数介绍\n\n| 命令参数 |                                                          |\n| ------------------- | ------------------------------------------------------------ |\n| -1                | 强制scp命令使用协议ssh1                                      |\n| -2                | 强制scp命令使用协议ssh2                                      |\n| -4                | 强制scp命令只使用IPv4寻址                                    |\n| -6                | 强制scp命令只使用IPv6寻址                                    |\n| -B                | 使用批处理模式（传输过程中不询问传输口令或短语）             |\n| -C                | 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）            |\n| -p                | 保留原文件的修改时间，访问时间和访问权限。                   |\n| -q                | 不显示传输进度条。                                           |\n| -r                | 递归复制整个目录。                                           |\n| -v                | 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。 |\n| -c cipher         | 以cipher将数据传输进行加密，这个选项将直接传递给ssh。        |\n| -F config     | 指定一个替代的ssh_config配置文件，此参数直接传递给ssh。   |\n| -i file  | 从identity_file指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。 |\n| -l limit          | 限定用户所能使用的带宽，以Kbit/s为单位。                     |\n| -o option     | 如果习惯于使用ssh_config(5)中的参数传递方式。                |\n| -P port           | 注意是大写的P, port是指定数据传输用到的端口号。              |\n| -S program        | 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。 |\n\n\n\n## 数据传输\n\n1. 获取服务器上文件\n\n```\nscp root@192.168.1.20:/home/backups/1.png /media/bruce/backups/1.png\n```\n按回车键：\n\n如果是第一次试用scp，会提示是否使用传输，输入yes，回车；\n\n然后接着提示输入root用户的密码（输入密码时是看不到字符出现的，输入好直接回车）\n\n2. 获取服务器上的目录\n\n```\nscp -r root@192.168.1.20:/home/backups/ /media/bruce/backups/\n```\n3. 将本地文件上传至服务器\n\n```\nscp /media/bruce/backups/2.png root@192.168.1.20:/home/backups/2.png\n```\n\n4. 将本地目录上传至服务器\n\n```\nscp -r /media/bruce/backups/ root@192.168.1.20:/home/backups/\n```\n如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a>\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>\n","tags":["SCP","Linux"],"categories":["tools"]},{"title":"从零开始搭建自己的博客天地(下)","url":"/posts/3337762157/","content":"**建站，重在折腾：**\n\n在建站这个系列中，上一篇主要讲了怎么搭建博客环境，初始化博客项目，怎么新增博文，以及怎么部署博客。本次主要讲解一下`config.yml`文件，怎么巧妙的使用`HTTPS`的图床，还有就是听起来高大尚的**绑定域名**。\n\n<!--more-->\n\n上次在《从零开始搭建自己的博客天地(上)》中讲过Coding建站的文章，时隔那么久，估计很多小伙伴都遗忘了，这里提供了上篇文章的[链接](https://blog.brucekong.com/posts/3667539278/)，或者使用站内搜索功能 [Ctrl+F]：从零开始搭建自己的博客天地(上) ，阅读上篇之后再读此篇效果更好。\n\n## 解析config.yml文件\n\n关于其中的参数，大家可以参照官网提供的教程（[中文](https://hexo.io/zh-cn/docs/configuration.html)、[English](https://hexo.io/docs/configuration.html)）\n一般来讲，需要大家修改以下参数：\n\n| 参数        | 描述                                                  |\n| :---------- | :----------------------------------------------------------- |\n| title       | 这个是你网站的标题                                   |\n| subtitle    | 这个是你网站的副标题                                 |\n| description | 这个是你网站的描述信息                              |\n| author      | 这个是你的名称                                                    |\n| url         | 这个是你网站的地址                                      |\n| theme       | 这个是你引用哪个博客主题，设置为false表示不使用主题                         |\n| deploy      | 这个是你想把博客部署到哪个托管平台上                                          |\n\n## 使用图床管理博文图片\n当前使用比较多的图床系统包括七牛、又拍云、新浪、极简图床，其中七牛和又拍云是收费图床，后面两个是免费的，知乎大佬都给过说明，好与坏戳[我](https://www.zhihu.com/question/21667151/answer/74657827)。\n\n图床是有了，但是支不支持HTTPS又是另一回事，关于这个问题，放给大家去研究，这里不再细说。\n\n当然对于小白（比如我）来说，使用Coding仓库作为图床也是不错的，而且还支持HTTPS，但是唯一的缺点就是速度太慢了。\n\n使用Coding方法：\n\n* 在Coding中新建一个仓库，例如叫images；\n* clone仓库到本地，将图片添加到仓库，并push到Coding；\n* 打开网页端的images仓库，点击需要的使用的图片，得到链接（url）；\n* 将url中的blob改成raw即可使用。\n\n这个方法不推荐使用，有条件的还是使用七牛，毕竟速度还是有保障的。\n\n\n\n## 域名使用\n\n为了让自己的博客显得更高大尚的话，可以将自己的博客绑定自己的域名。\n\n在个人博客中使用域名，首先要购买一个域名，域名根据不同的组合，价格不一样，当然也有免费的。根据个人使用经验，不建议使用免费的，常言道：免费的既是最贵的。因为在大多数情况下，域名就代表了你的博客，但是大部分免费域名只是免费一年，之后是需要购买的，域名到期后，很多人都觉得不值得续费，但是又有很多信息都是绑定的这个域名，从而陷入两难的境地。所以我建议大家好好考虑，尽量购买一个自己中意的，能长期使用的域名。\n\n罗里吧嗦了那么多，小编总结了以下几点：\n\n* 一定是自己中意的，并能保证持续使用的\n\n\n* 尽量购买`com`、`net`、`site`、`cc`、`top`、`club`等一级域名作为博客域名\n* 域名越短越好\n* 尽量只使用字母或数字\n* 域名能有一定的含义或容易记住\n\n小编是在阿里云上购买的域名，那小编就讲述一下自己是怎么将自己的域名绑定到自己的博客上的。\n\n* 首先，登陆阿里云官网，注册账号并登陆，并在[万网](https://wanwang.aliyun.com/)上购买自己心仪的域名\n* 然后，打开“控制台”（右上角处），在左侧列表中找到倒数第二行“域名与网站”，点击“云解析DNS”\n* 在右侧看到购买的域名，点击“解析设置”\n* 为确保成功，先删除所有的解析设置\n* 点击右上角的”添加解析“，记录类型选择”CNAME“，主机记录填入”@“，解析路线默认即可，记录值填入\"demo.coding.me\"，确认即可。\n\n**注意：以上的所填内容，只填引号内部的**\n\n到此，稍等半小时，等待解析设置生效。\n\n\n\n然后去设置Coding中博客：\n\n* 在`博客根目录/source`下新建一个CNAME文本，输入你的域名（例如demo.com），push到Coding中\n* 打开`https://coding.net/u/demo/p/demo.coding.me/git/pages/static`，在“自定义域名”处绑定自己的域名即可。\n\n\n\n稍等片刻，在浏览器中打开你的域名（demo.com），不出意外就能解析到你的博客了。\n\n\n\n如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a>\n\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["Hexo","Blog"],"categories":["tips"]},{"title":"使用Nginx和OpenSSL搭建本地HTTPS的ArcGIS for JavaScript 4.6","url":"/posts/2692255794/","content":"**HTTPS的初试：**\n前两天看谷歌开发者公众号了解到Google Chrome要在68这个版本时彻底将HTTP网站列为不安全，要求全部网站都要支持HTTPS，由此萌生了先在本地搭建一些HTTPS的站点的想法。\n\n<!--more-->\n\n## 1 背景\n由于工作任务，最近一直在写本子，了解了一些GIS方面的小知识，但是学的很浅显，其中就包括ArcGIS for JavaScript。基于谷歌公众号里面的启发，就想着在本地搭建一个HTTPS结构的ArcGIS for JavaScript站点。\n\n## 2 准备工作\n* Nginx [下载](http://nginx.org/en/download.html)\n* OpenSSL [下载](http://down-www.7down.net/pcdown/soft/W/win64openssl.rar)\n* ArcGIS for JavaScript 4.6 [下载](https://developers.arcgis.com/downloads/apis-and-sdks?product=javascript&version=4.6)\n\n***注意：下载ArcGIS for JavaScript前，先在[https://developers.arcgis.com](https://developers.arcgis.com)注册ArcGIS账号***\n\n## 3 安装配置\n### 3.1 Nginx\n下载好Nginx后，解压到`C:\\`，得到`nginx.exe`在`C:\\nginx\\`根目录下，并将`C:\\nginx`添加到系统环境变量的`PATH`中，即可完成Nginx的安装和配置。\n\n### 3.2 OpenSSL\n下载好OpenSSL后，双击安装，将安装目录设置为`C:\\`中，安装后即为`C:\\OpenSSL-Win64`，同理将`C:\\OpenSSL-Win64\\bin`添加到系统环境变量的`PATH`中，即可完成Nginx的安装和配置。\n\n### 3.3 ArcGIS for JavaScript 4.6\n下载好ArcGIS for JavaScript 4.6后，解压到`C:\\nginx\\html\\`中，得到一个`C:\\nginx\\html\\arcgis_js_api\\library\\4.6\\`类似的目录。和往常一样，需要修改`init.js`和`dojo.js`中的域名信息。\n\n将init.js和dojo.js中的以下的信息：\n```\nbaseUrl:\"https://[HOSTNAME_AND_PATH_TO_JSAPI]dojo\"\n```\n修改为：\n```\nbaseUrl:\"http://localhost/arcgis_js_api/library/4.6/dojo\"\n\nor\n\nbaseUrl:\"https://localhost/arcgis_js_api/library/4.6/dojo\"\n```\n** 注意：~~将https改为http~~  这里不改也是可以的 **\n\n自此，安装配置即已经完成，下一步需要生成并在Nginx中配置证书。\n\n## 4 证书的生成与配置\n\n### 4.1生成证书\n\n在网上查资料，有大佬是这样子做的（先不要照抄这里，继续看下面的）：\n\n```\n$ openssl req -x509 -newkey rsa:2048 -out LocalhostCA.cer -outform PEM -keyout LocalhostCA.pvk -days 10000 -verbose -config LocalhostCA.cnf -nodes -sha256 -subj \"/CN=localhost CA\"\n\n$ openssl req -newkey rsa:2048 -keyout Localhost.pvk -out Localhost.req -subj /CN=localhost -sha256 -nodes\n\n$ openssl x509 -req -CA LocalhostCA.cer -CAkey LocalhostCA.pvk -in Localhost.req -out Localhost.cer -days 10000 -extfile Localhost.ext -sha256 -set_serial 0x1111\n```\n\n首先在`C:\\OpenSSL-Win64\\bin`新建两个文件：\n第一个文件`LocalhostCA.cnf`:\n```\n[ req ]\ndistinguished_name  = req_distinguished_name\nx509_extensions     = root_ca\n\n[ req_distinguished_name ]\ncountryName             = CN\ncountryName_min         = 2\ncountryName_max         = 2\nstateOrProvinceName     = Ji Nan\nlocalityName            = Ji Nan\n0.organizationName      = TelChina\norganizationalUnitName  = GIS Engineer\ncommonName              = localhost\ncommonName_max          = 64\nemailAddress            = kongbin0325@hotmail.com\nemailAddress_max        = 64\n\n[ root_ca ]\nbasicConstraints            = critical, CA:true\n```\n\n| 配置项 | 值 | 描述 |\n| :--- | :---------- | :------------- |\n| distinguished_name | req_distinguished_name | 不用管，反正我没改 |\n| x509_extensions | root_ca | X.509证书的扩展项(我瞎说的) |\n| countryName | CN | 国家缩写，必须是两个字母 |\n| countryName_min | 2 | 就写2吧 |\n| countryName_max | 2 | 也是2。。。 |\n| stateOrProvinceName | ShanDong | 所在省 |\n| localityName | Ji Nan | 所在市 |\n| 0.organizationName | TelChina | 所在公司 |\n| organizationalUnitName | GIS Engineer | 职位 |\n| commonName | localhost | 自己的域名 |\n| commonName_max | 64 | 我抄的 |\n| emailAddress | kongbin0325@hotmail.com | 邮箱 |\n| emailAddress_max | 64 | 还是抄的 |\n| basicConstraints | critical, CA:true | 照着我的写就行！ |\n\n** 注意：countryName和 commonName要特别注意，其他的都OK ！ **\n\n第二个文件`Localhost.ext`:\n```\nsubjectAltName = @alt_names\nextendedKeyUsage = serverAuth\n\n[alt_names]\nDNS.1   = localhost\n```\n| 配置项 | 值 | 描述 |\n| :--- | :---------- | :------------- |\n| subjectAltName | @alt_names | 不用管，反正我没改 |\n| extendedKeyUsage | serverAuth | 不用管，反正我没改 |\n| DNS.1 | localhost | 设置域名 |\n| DNS.2 | 123.123.32.34 | 懂吧，可以设置多个域名（这个IP是我瞎写的） |\n\n然后，在`C:\\OpenSSL-Win64\\bin`中打开`cmd`，准备执行上面三条语句。但是第一条语句就报了错，发现无法生成*.cer和*.req文件（估计是软件版本问题导致的），又是百度，又是谷歌，还是Stack Overflow的，消耗了不少时间。最后根据以下报错信息：\n```bash\nSubject does not start with \"/\"\nProblems makeing certificate request\n```\n我尝试着将`-subj`参数删除，执行了一次，提示我输入`Localhost.cnf`文件中`req_distinguished_name`的配置项（按照提示重新输入一次就可以了）。以此执行如下：\n```\n$ openssl req -x509 -newkey rsa:2048 -out LocalhostCA.cer -outform PEM -keyout LocalhostCA.pvk -days 10000 -verbose -config LocalhostCA.cnf -nodes -sha256\n```\n同理，第二条语句也把`-subj`参数删除，执行过程中需要输入一些参数，最后执行成功。\n```\n$ openssl req -newkey rsa:2048 -keyout Localhost.pvk -out Localhost.req -sha256 -nodes\n```\n第三条语句没有`-subj`选项，直接执行即可：\n```\n$ openssl x509 -req -CA LocalhostCA.cer -CAkey LocalhostCA.pvk -in Localhost.req -out Localhost.cer -days 10000 -extfile Localhost.ext -sha256 -set_serial 0x1111\n```\n\n### 4.2 配置证书和Nginx\n将生成的Localhost.cer和Localhost.pvk文件复制到Nginx的conf目录中。\n修改nginx.conf文件，添加如下内容：\n```conf\n# HTTPS server\nserver{  \n    listen 443;  \n    server_name localhost;  \n    ssl on;\n    ssl_certificate Localhost.cer;  \n    ssl_certificate_key Localhost.pvk; \n    ssl_session_timeout 5m;  \n    ssl_protocols SSLv2 SSLv3 TLSv1;  \n    ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;  \n    ssl_prefer_server_ciphers on;  \n    add_header 'Access-Control-Allow-Headers' 'Content-Type';  \n    add_header 'Access-Control-Allow-Origin' '*';  \n    add_header 'Access-Control-Allow-Methods' 'GET';  \n     \n    location / {  \n        root html; \n        index index.html 50x.html;  \n    } \n}\n\n```\n\n### 4.3 重启Nginx\n```\n$ nginx -s reload\n```\n\n### 4.4 导入证书\n在IE中打开Internet选项 -> 内容 -> 证书 -> 受信任的根证书颁发机构  -> 导入 -> LocalhostCA.cer。\n尝试访问`https://localhost/arcgis_js_api/library/4.6/init.js`，在网址的左侧显示一个小绿锁则表示HTTPS配置成功，自此所有配置过程都已经完成。\n\n如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a>\n<hr>\n<div style=\"text-align: center;font-weight: bold;\">\n    全文重点来了！\n</div>\n\n```C++\n// 值此3.8女神节，祝福所有的女性：\nfor (int i = 0; i < forever; i++) {\n    printf(\"Happiness Everyday!\");\n}\n```\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["Nginx","代理","GIS","OpenSSL"],"categories":["gis"]},{"title":"吾爱破解论坛2018年3月13日十周年开放注册通知","url":"/posts/224769818/","content":"**吾爱破解论坛注册喜讯：**\n说起吾爱，小白的福利，老司机的神站，每个人都想拥有一个账号。吾爱破解论坛值此十周年之际，开放了注册功能，有需要的小伙伴千万不要再错过了。\n\n<!--more-->\n\n<div style=\"text-align: center;font-weight: bold;font-size: 2rem; color: red\">\n\t喜讯、喜讯、喜讯\n</div><div style=\"text-align: center;font-weight: bold;font-size: 1.5rem\">\n\t<span>吾爱破解论坛开通开放注册</span>\n\t<span>2018年3月13日12:00-14:00和20:00-22:00</span>\n</div><div style=\"text-align: center;font-weight: bold;font-size: 1.5rem;padding-top: 0;margin-top: 0;height: 106px;line-height: 106px\"><a href=\"https://www.52pojie.cn/?fromuid=575811\" style=\"text-align: center;\">我要吾爱</a></div>\n<div></div>\n***注册注意事项：***\n\n1. 注意不要错过注册时间\n2. 认真读注册须知（需要等10分钟）\n3. 事先把注册信息写在本子或word里（独一无二的邮箱和用户名） [需要准备什么](https://www.52pojie.cn/misc.php?mod=faq&action=faq&id=15&messageid=16)\n4. 耐心检查填写内容（看是否都符合要求）\n5. 邮箱验证阶段，有的要到邮箱的垃圾箱中查看有没有验证邮件，而有的邮箱则需要设置白名单才能收到验证邮件 [帮助](https://www.52pojie.cn/thread-98585-1-1.html)\n\n<div style=\"text-align: center;font-weight: bold;font-size: 1.5rem\">\n\t祝愿小伙伴们都能获得自己的吾爱账号！\n</div><div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["活动","吾爱破解"],"categories":["tips"]},{"title":"Nginx学习入门","url":"/posts/547195145/","content":"**Nginx让系统部署花样百出：**\n在系统部署时，遇到了一个需要多方考虑的安全问题，出于架构师老大的一句话，说先用Nginx做下代理（后来讨论，此方法治标不治本，就放弃了此方法，但是Nginx还是看了那么一会儿），菜鸟如我百度谷歌一番，稍微了解了一些Nginx的最基本用法。\n\n<!--more-->\n\n## Nginx简介\n\n上面已经说了是大佬的一句话，其实在此之前我也使用过一些简单的反向代理，解决跨域问题（学的就是毛毛雨），在生产环境中还没真正使用过。那么老大说道了Nginx，那学习之前得了解Nginx是什么？能做什么，优势是什么？\n\n**是什么**\n\n是一个高性能的[HTTP](https://baike.baidu.com/item/HTTP)和[反向代理](https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86)服务器，也是一个IMAP/POP3/SMTP服务器。\n\n**能做什么？**\n\n* 反向代理\n* 正向代理\n* HTTP服务器\n* 负载均衡（什么鬼，，，）\n\n**优势有哪些？**\n\n- 轻量web服务器\n- 适合做静态请求和反向（不适合做动态请求，动态用apache）\n- 抗高并发，nginx 处理请求异步非阻塞，使用较低的资源支持更高的并发数\n- 负载均衡\n\n## location配置\n\n 以下内容只讲了自己用到的，在讲解方面可能没有那么标准，差不多都是自己理解和实践的，希望能让大家更容易理解和使用吧！\n\n基本语法：\n\n```nginx\nlocation [=|~|~*|^~] /uri/ { \n  … \n}\n```\n\n1. = 严格匹配。如果这个查询匹配，那么将停止搜索并立即处理此请求。\n2. ~ 为区分大小写匹配(可用正则表达式)\n3. !~为区分大小写不匹配\n4. ~* 为不区分大小写匹配(可用正则表达式)\n5. !~*为不区分大小写不匹配\n6. ^~ 如果把这个前缀用于一个常规字符串,那么告诉nginx 如果路径匹配那么不测试正则表达式。\n\n```nginx\nlocation / {\n  root   html;\n  index  index.html index.htm;\n}\n```\n\n## 使用root、alias和proxy_pass\n\n由于最近在看[layui](http://www.layui.com)的一些东西（不是广告），就顺手拿来做个演示！（以下提到的layui，指的是layui官方提供[社区模板](http://www.layui.com/template/fly/)的html目录。\n\n阅读到这时，如果你还没有nginx环境，请点击[下载]()搭建你的环境，\n\n* 点击[Nginx官网](http://nginx.org)，点击最新带有`mainline version`字样的链接，建议下载`Stable version`版本；\n* 下载得到一个zip包，解压到你想放置的目录，双击启动`nginx.exe`\n\n\n\n>  *另外再说明一下实践的环境，本地解析使用的80端口，反向代理转发的url不带端口*\n>\n>  *以下代码均在`nginx/conf/`文件夹下的`nginx.conf`文件中修改*\n>\n>  *在修改保存`nginx.conf`后，记得使用`nginx -s reload`重载配置文件，使其生效*\n\n使用alias 设置本地虚拟目录，后面必须加上 / ，alias 指定本地目录，例如Windows系统上设置为 `D:/html/app/`，若是使用mac或linux，路径最后也要加上 / ，例如 `~/html/app/` or `/home/bruce/html/app/`。\n\n以下两个方法都能跳转到layui中，这个相当于直接访问 `D:/ComSoftwares/nginx-1.13.7/html/layui`目录，可以理解为在root目录下，访问layui目录：\n\n```nginx\nlocation ^~ /layui {\n\troot D:/ComSoftwares/nginx-1.13.7/html/;\n}\n```\n\n访问`localhost/alayui`或`localhost/alayui/`自动代理到`D:/ComSoftwares/nginx-1.13.7/html/layui/`目录下\n\n```nginx\nlocation /alayui {\n\talias D:/ComSoftwares/nginx-1.13.7/html/layui/;\n}\n```\n\n使用 `=` 匹配访问链接 只能匹配`localhost/blayui`或者`localhost/blayui/`，对于子目录无法进行访问\n即对`localhost/blayui/jie/add.html` 无法进行访问\n可以看出 = 是严格匹配\n\n```nginx\nlocation = /blayui/ {\n\tproxy_pass http://localhost/layui/;\n}\n```\n\n三种方法的利弊：\n\n* 第一种和没设置一样（ 为了学习root）\n* 第二种根据访问的链接，去代理到一定的目录下，即代理了当前链接，又代理了子目录\n* 第三种只严格匹配了当前链接，对于子目录无法进行访问\n\n>  *推荐使用第二种：alias方法*\n\n## 使用rewrite、proxy_pass和正则表达式\n\n下面的方法统一使用了正则表达式来解决访问链接\n添加访问目录为`/apis`的代理配置，用`127.0.0.1:80/apis`重定向http://www.layui.com，\n在ajax中访问`/apis/demo/table/user`,相当于访问http://www.layui.com/demo/table/user\n\n```nginx\nlocation /apis {\n  rewrite  ^/apis/(.*)$ /$1 break;\n  proxy_pass   http://www.layui.com;\n}\n```\n\n>  参考学习 http://blog.csdn.net/tjcyjd/article/details/50897959\n\n总的来说，alias使用简单粗暴，转发本地目录；而正则表达式使用起来更爽，处理的情况更多，让更多事情变得简单，运行高效，低资源占用，代理强大的处理方法。\n\n由于学习Nginx的时间有限，只针对自己遇到的问题进行了研究，如若有不对或不合适的地方，请批评指正，谢谢！\n如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a>\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["Nginx","代理"],"categories":["languages"]},{"title":"Cesium简介与环境搭建","url":"/posts/3718307484/","content":"\n**Cesium的Web 3DGIS应用：**\nCesium是WebGIS领域的一个很重要的方向，它具有开源，更新快、、跨平台、跨浏览器和无需插件支持的Web 3DGIS引擎，在地里信息行业有着很好的应用前景。\n\n<!--more-->\n\n## Cesium简介\n\n<div style=\"text-align: center;\">![Cesium](https://coding.net/u/ibrucekong/p/images/git/raw/master/cesium-office-site.png)</div>\n\n> 官网介绍\n>\n> Cesium is a JavaScript library for creating 3D globes and 2D maps in a web browser without a plugin. It uses WebGL for hardware-accelerated graphics, and is cross-platform, cross-browser, and tuned for dynamic-data visualization.\n\n简单来讲就是说，Cesium是一个可以同时支持2D和 3D地图的引擎，无需浏览器插件支持的JavaScript开发库。但是浏览器必须支持WebGL，不然就是扯淡、免谈，而且Cesium能使用本地硬件加速图形渲染，具有跨平台、跨浏览器的特性，另外还可以优化动态数据的可视化。（对于英语没过六级的人，表示翻译压力有点大，看不懂的请移步）\n\nCesium支持三维地球（3D），二维地图（2D）以及2.5D哥伦布视图（2.5D），还可以实现基于时间轴的动态数据展示\n\n## Cesium优缺点\n\n**优点：**\n\n* 开源\n* 框架更新迭代周期短\n* 无需插件支持\n* 跨平台、跨浏览器\n* 地图数据展示效果比较好\n\n**缺点**\n\n* 和商业软件相比，三维分析处理相对较弱\n* 地图组件不够全面\n\n## 搭建Cesium开发环境\n\n搭建环境向来不止一种方式，这里提供三种方式：一、npm安装；二、Github下载；三、依赖第三方发布组件\n\n### 下载Cesium组件\n\n#### npm下载\n\n这是一种官网推荐的方式，在当前前端React、Angular、Vue三足鼎立的时期，基于npm安装组件的项目越来越多，Cesium官方也推送了npm下载方式：`npm install cesium`(默认你已经配置了node.js和npm环境)，执行后，会在当前目录下看到一个`node_moudles`文件夹，里面有下载下来的cesium依赖包，具体目录在`node_modules\\cesium\\Build\\Cesium`中，也可以将Cesium文件夹拷贝出来，放到工程中使用。\n\n#### Github下载\n\n在Github中找组件，一般方式为：\n\n* 打开Cesium在Github上的[链接](https://github.com/AnalyticalGraphicsInc/cesium)，直接点击`clone or download`选择`download zip`即可下载Cesium工程文件；\n* 如果系统中安装了Git环境，可以使用以下方法获取：\n\n```bash\ngit clone https://github.com/AnalyticalGraphicsInc/cesium.git\n```\n\n\n\n> 但是本文建议大家，在找到自己想要使用的组件时，尽量去`releases`下面去下载发布版本，这样的版本更加稳定。\n\n本文以下载`releases`中的zip包为例，\n\n* 打开`releases`的[链接](https://github.com/AnalyticalGraphicsInc/cesium/releases)，下载最新版本的zip包，解压到想要放置的文件夹下面\n* 打开cmd命令终端，`cd`进入到Cesium文件夹下\n* 使用`npm install`安装组件依赖\n* `npm start`启动服务，打开浏览器访问`http://localhost:8080/`，可以看到一些入门链接和示例。\n\n<div style=\"text-align: center;\">![Cesium](https://coding.net/u/ibrucekong/p/images/git/raw/master/cesium-office-demo.png)</div>\n\n以上是官方提供的学习链接，但是我要引用的组件呢？\n\n细心的童鞋可能看到了根目录下有一个build目录，和`npm install cesium`下载下来的Cesium文件夹很相似，没错就是它，打开build会看到有三个目录`Cesium, CesiumUnminified, Documentation`，第一个文件夹是Cesium的未压缩版本的组件，第二个文件夹是经过压缩的组件，第三个文件夹是一些接口文档。\n\n> 一般开发期间引用未压缩版本，便于调试\n>\n> 部署发布期间使用压缩版本，结余流量，提高访问速度\n\n#### 第三方组件依赖\n\n博主也提供了第三方组件的依赖，虽规模不大，都是一些自己或者常用的一些组件。由于是刚建立，不管是功能还是组件库都比较少，后续会慢慢增加的，不仅加入自己上传的库，还会增加一些第三方的、使用CDN加速的库链接。\n\n打开[https://library.brucekong.com](https://library.brucekong.com)，会看到当前库里面都有哪些组件，把鼠标移动到链接上，会自动选中该链接，直接按`Ctrl + C`就可以将链接复制，放到你需要引用的位置。\n\n### 引用库文件\n\n前两种方法中，将Cesium文件夹放入到工程中，引用`Cesium/Cesium.js和Cesium/Widgets/Widgets.css`即可，第三种方法，直接将链接放入到`src`中即可。\n\n### 完成Hello World\n\n前两种都是使用本地文件引用形式，不在演示，只演示第三种，废话少说，直接上代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <!-- Use correct character set. -->\n  <meta charset=\"utf-8\">\n  <!-- Tell IE to use the latest, best version. -->\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <!-- Make the application on mobile take up the full browser screen and disable user scaling. -->\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no\">\n  <title>Hello World!</title>\n  <script src=\"https://library.brucekong.com/cesium/1.41/Cesium.js\"></script>\n  <style>\n      @import url(https://library.brucekong.com/cesium/1.41/Widgets/widgets.css);\n      html, body, #cesiumContainer {\n          width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;\n      }\n  </style>\n</head>\n<body>\n  <div id=\"cesiumContainer\"></div>\n  <script>\n    var viewer = new Cesium.Viewer('cesiumContainer');\n  </script>\n</body>\n</html>\n```\n\n<div style=\"text-align: center;\">![Cesium](https://coding.net/u/ibrucekong/p/images/git/raw/master/cesium-hello-world.png)</div>\n\n> 注意，引用本地文件时，需要将工程放入到Tomcat、Nginx或Apache等web服务器中运行；如果不放进服务器中，直接运行将会报错，而引用第三方发布的组件不会出现这种情况。\n\n如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a>\n\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["Cesium","3D Map"],"categories":["languages"]},{"title":"从零开始搭建自己的博客天地(上)","url":"/posts/3667539278/","content":"**建站，重在折腾：**\n\n之前提及过公网建站的文章（站内搜索[Ctrl+F]：Say you again），但是没有讲具体的流程，在踩过N个坑之后，在这里讲一下自己建站的经验，让更多的爱好者轻松完成建（折）站（腾）工作。下面开始唐僧念经时间~\n\n<!--more-->\n\n## 站点准备\n要搭建个人博客，需要一些条件的支持，一般包括如下内容：\n\n-   [GitHub](https://github.com)、[Coding](https://coding.net)、[Gitlab](https://gitlab.com)、[Gitee](https://gitee.com)等支持Pages服务的代码托管平台\n-   [Themes of Hexo](https://hexo.io/themes/)\n\n<div style=\"text-align: center\">![hexo-theme](https://coding.net/u/ibrucekong/p/images/git/raw/master/gits.png)</div>\n\n\n首先在第一个选项中选择一个适合自己的托管平台，我是从GitHub到Gitee，再到Coding。当时刚接触Hexo时，只想着能在公网访问自己的博客就算成功了，然后就在GitHub上部署了自己的第一个站点（无奈太烂，只好解散）；后来，想着博客搞那么烂，有的还是搬砖搬过来的，还是体力活，站点源码就不开源了，中间用了一段时间Gitee；再后来，全世界都在HTTPS，都在使用自己的域名，那我也得跟得上潮流不是，所以综合考虑后就选择了Coding。为了少踩坑，本文就直接使用Coding作为平台进行说明。\n\n*托管平台大家可以自行选择，根据自己的需求，选择适合自己的就是最好的*\n\n然后去[主题网站](https://hexo.io/themes/)，下载自己喜欢的主题样式，天生审美残缺，这里就不给推荐了，大家自行选择。\n<div style=\"text-align: center\">![hexo-theme](https://coding.net/u/ibrucekong/p/images/git/raw/master/hexo-theme.png)</div>\n\n如果不是Git、Node.js小白，请跳过**必备技能**，直接进入**站点配置**\n## 必备技能\n\n### Git安装与配置\n\n参见[Git安装与配置](https://blog.brucekong.com/posts/3219987363/)\n\n### Node安装\n\n参见[Node安装与配置](https://blog.brucekong.com/posts/3412983070/)\n\n### Hexo安装\n\n当Git和Node.js安装配置好后，还要安装hexo组件，用来创建博客项目。\n* 使用cnpm安装Hexo\n```\ncnpm i hexo-cli -g\n```\n* 使用hexo创建第一个博客：\n```\nhexo init blog\n```\n* 进入blog，安装模块\n```\ncd blog\ncnpm i\n```\n* 生成静态网页，启动服务\n```\nhexo g\nhexo s\n```\n打开服务连接[http://localhost:4000/](http://localhost:4000/)，最基本的博客项目就运行起来了，下一步就要对博客进行美化加工。\n\n### Markdown\n\n参见[Markdown学习入门](https://blog.brucekong.com/posts/417703024/)\n\n## 站点配置\n\n找到好Hexo主题后，找到主题托管的工程，一般都会有一定的说明，以next主题为例：\n* 首先`cd`进入到`blog`根目录；\n`git clone https://github.com/hexojs/hexo-theme-next themes/next`\n`next`主题就已经放入到`blog/themes`文件夹下了，如果不对`next`工程进行PR操作，或者为了减小`blog`的体积，可以把`next`文件夹下的.git文件夹删除。\n* 打开`blog/_config.yml`文件\n修改theme\n```\ntheme: next\n```\n* 先清理已有的工程，重新生成静态网页，并启动服务\n```\nhexo clean\nhexo g\nhexo s\n或者\nhexo clean & hexo g & hexo s\n```\n为确保没有浏览器缓存，我一般会加上`hexo clean`，其实只要页面不报错一般也是不需要的，打开服务连接[http://localhost:4000/](http://localhost:4000/)，是不是发现博客主题已经改变了~~~\n\n## 发布站点\n\n到这个时候，肯定有人说：“你讲了这么多，博客不还只是在本地用，哪里到公网访问了，哪里用到Coding了...”\n<div style=\"text-align: center;font-size: 2.5rem;padding: 20px;box-shadow: inset 0px 0px 30px red;display: none\">客官，别急，这就来!</div>\n* （假设你的用户名是demo）先到coding上新建一个`demo.coding.me`的项目，打开`https://coding.net/u/demo/p/demo.coding.me/git/pages/static`，开启`Pages服务`，Coding会自动帮你申请`HTTPS`，自此留着待用...\n* 打开`blog/_config.yml`文件\n* 修改deploy参数，格式要严格遵守deploy参数（不知道的，可以[Hexo部署](https://hexo.io/zh-cn/docs/deployment.html)获取帮助）\n```\ndeploy: \n  type: git\n  repo: git@git.coding.net:demo/demo.coding.me.git\n  branch: master\n  message: commit message\n```\n* 然后，打开Git Bash，cd到blog目录，执行：\n`hexo clean & hexo g & hexo d`\n注意：这个过程可能需要你输入账号密码，也可能没有-.-\n* 打开网页中的`demo.coding.me`仓库工程，刷新网页检查代码是否已经部署了；\n* 成功后，打开`https://demo.coding.me`，如果未能打开，需等待几分钟等待Coding解析刚部署的网页。\n\n## 新增博文\n\n站点部署好后，要做到博客由访问量和活跃度需要及时更新博文，下面演示一下怎么新增一篇博文：\n\n* 首先cd到blog根目录\n* 新增博文\n```\nhexo n \"newpage\"     这是简写\nhexo new \"newpage\"   这是全拼\n```\n* 然后在blog/source/_posts文件夹中，出现一个`newpage.md`文档，并附带默认文章头\n```\n---\ntitle: newpage\ndate: 2017-12-06 12:06:22\ntags:\n---\n```\n* 尝试修改博文内容\n```\n---\ntitle: newpage\ndate: 2017-12-06 12:06:22\ntags: tips\n---\n# 我是一级标题\n## 我是二级标题\n\n* 我是列表1\n* 我是列表2\n\n！[我是图片](https://blog.brucekong.com/favicon.png)\n\n[我是链接](https://blog.brucekong.com)\n\n<div style=\"text-align: center;\">我是居中内容</div>\n```\n* 保存文档，本地查看博文\n```\nhexo clean & hexo g & hexo s\n```\n打开服务连接[http://localhost:4000/](http://localhost:4000/)，检查博文板式是否符合你的预期效果\n* 部署本篇博客到Coding服务器\n在`blog/_config.yml`的deploy选项的message中填入本次提交的log文，一遍以后查找\n```\ndeploy: \n  type: git\n  repo: git@git.coding.net:demo/demo.coding.me.git\n  branch: master\n  message: add a new article\n```\n执行部署命令：\n```\nhexo d\n```\n* 打开网页中的`demo.coding.me`工程，刷新网页检查代码是否已经部署了；\n* 成功后，打开`https://demo.coding.me`，已经可以看到新增的博文了。\n\n通过以上唠唠叨叨后，能实现最基本的Coding建站，新增博文，希望能对大家有所帮助！\n\n本次主要完成了基于Hexo技术搭建的Coding Pages个人博客，实现了环境搭建、初始化博客项目、新增博文、部署博文，并是使用HTTPS进行访问。\n\n**TODO：有待增加的包括（1）解析_config.yml参数，（2）使用图床管理博文图片，（3）绑定域名**\n如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a>\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["Hexo","Blog"],"categories":["tips"]},{"title":"使用BeautifulSoup和pdfkit爬取菜鸟教程到pdf文件!","url":"/posts/1297890910/","content":"**锋利的BeautifulSoup：**\n\nBeautifulSoup是Python爬虫里面使用较为广泛的库，其主要功能是从网页中抓取数据，可以使用较少的代码实现完整的数据爬取工作。\n\n<!--more-->\n\n## BeautifulSoup简介\n&emsp;&emsp;BeautifulSoup提供一些简单的、python式的函数用来处理导航、搜索、修改分析树等功能。它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。\n\n## pdfkit简介\n&emsp;&emsp;pdfkit是一个把HTML+CSS格式的文件转换成PDF格式文档的一种工具。它是对html转pdf工具包wkhtmltopdf的封装，所以必须要安装wkhtmltopdf，并将wkhtmltopdf的安装路径配置到系统环境PATH中。\n> 可以参考：[pdfkit与wkhtmltopdf的安装与使用](http://blog.csdn.net/appleyuchi/article/details/70947138)\n\n## 爬取的关键代码\n\n&emsp;&emsp;列举了一些共有变量和设置的变量\n```python3\n# 比如爬取python3，网址：http://www.runoob.com/python3/python3-tutorial.html\n# 对该url进行拆分，对以下四个参数进行配置，一般只修改language\nlanguage = 'python3'\nlist_tag = '_top'\ncontent_tag = 'content'\npath_wkthmltopdf = r'C:\\Program Files\\wkhtmltopdf\\bin\\wkhtmltopdf.exe'\n# 以下参数不用配置\nchild_url = '/' + language\nurl_tag = child_url + '/'\noutput_name = u\"runoob_\" + language + r\"教程.pdf\"\n```\n\n&emsp;&emsp;get_url_title_list方法：获取python的章节url\n```python3\ndef get_url_title_list():\n    \"\"\"\n    获取所有URL和Title目录列表\n    :return:\n    \"\"\"\n    root = root_url\n    temp_child_url = child_url\n    resp = requests.get(root + temp_child_url)\n    resp.encoding = 'utf-8'\n    soup = BeautifulSoup(resp.text, \"html.parser\")\n    x = soup.find(\"div\", class_=\"design\")\n    x = x.find_all(\"a\", target=list_tag)\n    title = []\n    url_path = []\n    for i in x:\n        value = i.string.strip()\n        title.append(value)\n        temp_href = i.get('href').strip()\n        if temp_href.find(url_tag) >= 0:\n            href = root + temp_href\n        else:\n            href = root + temp_child_url + '/' + temp_href\n        url_path.append(href)\n    return title, url_path\n```\n&emsp;&emsp;parse_url_to_html方法：将爬取的目标网页存储为html文件\n\n```python3\ndef parse_url_to_html(url, name):\n    \"\"\"\n    解析URL，返回HTML内容\n    :param url:解析的url\n    :param name: 保存的html文件名\n    :return: html\n    \"\"\"\n    try:\n        response = requests.get(url)\n        soup = BeautifulSoup(response.content, 'html.parser')\n        # 正文\n        body = soup.find(id=content_tag)\n        # 标题\n        title = body.find('h1')\n        if title is None:\n            title = body.find_all('h2')[0]\n            title_tag = soup.new_tag('h1')\n            title_tag.string = title.string\n            title = title_tag\n        # 标题加入到正文的最前面，居中显示\n        center_tag = soup.new_tag(\"center\")\n        center_tag.insert(1, title)\n        body.insert(1, center_tag)\n        html = str(body)\n        # body中的img标签的src相对路径的改成绝对路径\n        pattern = \"(<img .*?src=\\\")(.*?)(\\\")\"\n        def func(m):\n            if not m.group(3).startswith(\"http\"):\n                if m.group(2).find('https') >= 0:\n                    return m.group(1) + m.group(2) + m.group(3)\n                if m.group(2).find('runoob.com') >= 0:\n                    rtn = m.group(1) + \"http:\" + m.group(2) + m.group(3)\n                    print(rtn)\n                else:\n                    rtn = m.group(1) + root_url + m.group(2) + m.group(3)\n                    print(rtn)\n                return rtn\n            else:\n                return m.group(1) + m.group(2) + m.group(3)\n        html = re.compile(pattern).sub(func, html)\n        html = html_template.format(content=html)\n        html = html.encode(\"utf-8\")\n        with open(name, 'wb') as f:\n            f.write(html)\n        return name\n    except Exception as e:\n        logging.error(\"解析错误\", exc_info=True)\n```\n\n<div align=center> ![parse_url_to_html](https://coding.net/u/ibrucekong/p/images/git/raw/master/gen-html.png) </div>\n\n&emsp;&emsp;save_pdf方法：将html文件转为pdf文件\n```python3\ndef save_pdf(htmls, file_name):\n    \"\"\"\n    把所有html文件保存到pdf文件\n    :param htmls:  html文件列表\n    :param file_name: pdf文件名\n    :return:\n    \"\"\"\n    config = pdfkit.configuration(wkhtmltopdf=path_wkthmltopdf)\n    options = {\n        'page-size': 'Letter',\n        'margin-top': '0.75in',\n        'margin-right': '0.75in',\n        'margin-bottom': '0.75in',\n        'margin-left': '0.75in',\n        'encoding': \"UTF-8\",\n        'custom-header': [\n            ('Accept-Encoding', 'gzip')\n        ],\n        'cookie': [\n            ('cookie-name1', 'cookie-value1'),\n            ('cookie-name2', 'cookie-value2'),\n        ],\n        'outline-depth': 10,\n    }\n    pdfkit.from_file(htmls, file_name, options=options, configuration=config)\n```\n<div align=center>![save_pdf](https://coding.net/u/ibrucekong/p/images/git/raw/master/gen-pdf.png)</div>\n\n&emsp;&emsp;append_pdf方法：拼接pdf\n```python3\ndef append_pdf(input1, output1, bookmark):\n    bookmark_num = output1.getNumPages()\n    print(bookmark_num)\n    for page_num in range(input1.numPages):\n        output1.addPage(input1.getPage(page_num))\n\n    output1.addBookmark(bookmark, bookmark_num)\n```\n&emsp;&emsp;在上述方法执行完成后，执行以下代码，将拼接的pdf输出到本地\n```python3\noutput.write(open(output_name, \"wb\"))\n```\n<div align=center>![append_pdf](https://coding.net/u/ibrucekong/p/images/git/raw/master/gen-total-pdf.png)</div>\n\n## 完整代码\n\n\n```python3\n# -*-coding:utf-8-*-\nimport os\nimport re\nimport time\nimport sys\nimport logging\nimport pdfkit\nimport requests\nfrom bs4 import BeautifulSoup\nfrom PyPDF2 import PdfFileWriter, PdfFileReader\nhtml_template = \"\"\" \n<!DOCTYPE html> \n<html lang=\"en\"> \n<head> \n    <meta charset=\"UTF-8\"> \n</head> \n<body> \n{content} \n</body> \n</html> \n\"\"\"\nroot_url = \"http://www.runoob.com\"\n# 针对Runoob.com的爬虫示例\n# 列入要对该网站的python3进行爬虫,点开 python3，网址默认为：http://www.runoob.com/python3/python3-tutorial.html\n# 对该url进行拆分，对以下四个参数进行配置，一般只修改language\nlanguage = 'python3'                                                      # 要爬虫的分类------针对不同的内容进行修改\nlist_tag = '_top'                                                         # 对左侧列表的class检索------一般不需要修改\ncontent_tag = 'content'                                                   # 对正文的id检索------一般不需要修改\npath_wkthmltopdf = r'C:\\\\Program Files\\\\wkhtmltopdf\\\\bin\\\\wkhtmltopdf.exe'    # 本地 wkhtmltopdf 的配置------根据自己电脑情况配置\n# 以下参数不用配置\nchild_url = '/' + language                                                # 定义子url\nurl_tag = child_url + '/'                                                 # url_tag是对左侧列表中的url出现特殊情况下的判断\noutput_name = u\"runoob_\" + language + r\"教程.pdf\"                          # 爬虫的文件名\ndef parse_url_to_html(url, name):\n    \"\"\"\n    解析URL，返回HTML内容\n    :param url:解析的url\n    :param name: 保存的html文件名\n    :return: html\n    \"\"\"\n    try:\n        response = requests.get(url)\n        soup = BeautifulSoup(response.content, 'html.parser')\n        # 正文\n        body = soup.find(id=content_tag)\n        # 标题\n        title = body.find('h1')\n        if title is None:\n            title = body.find_all('h2')[0]\n            title_tag = soup.new_tag('h1')\n            title_tag.string = title.string\n            title = title_tag\n        # 标题加入到正文的最前面，居中显示\n        center_tag = soup.new_tag(\"center\")\n        center_tag.insert(1, title)\n        body.insert(1, center_tag)\n        html = str(body)\n        # body中的img标签的src相对路径的改成绝对路径\n        pattern = \"(<img .*?src=\\\")(.*?)(\\\")\"\n        def func(m):\n            if not m.group(3).startswith(\"http\"):\n                if m.group(2).find('https') >= 0:\n                    return m.group(1) + m.group(2) + m.group(3)\n                if m.group(2).find('runoob.com') >= 0:\n                    rtn = m.group(1) + \"http:\" + m.group(2) + m.group(3)\n                    print(rtn)\n                else:\n                    rtn = m.group(1) + root_url + m.group(2) + m.group(3)\n                    print(rtn)\n                return rtn\n            else:\n                return m.group(1) + m.group(2) + m.group(3)\n        html = re.compile(pattern).sub(func, html)\n        html = html_template.format(content=html)\n        html = html.encode(\"utf-8\")\n        with open(name, 'wb') as f:\n            f.write(html)\n        return name\n    except Exception as e:\n        logging.error(\"解析错误\", exc_info=True)\n# 要去除所有的div标签\n# 移除div（如果要移除a标签，把div换成a即可）\n# remove_tag(html, \"div\")\ndef remove_tag(text, tag):\n    return text[:text.find(\"<\" + tag + \">\")] + text[text.find(\"</\" + tag + \">\") + len(tag) + 3:]\ndef get_url_title_list():\n    \"\"\"\n    获取所有URL和Title目录列表\n    :return:\n    \"\"\"\n    root = root_url\n    temp_child_url = child_url\n    resp = requests.get(root + temp_child_url)\n    resp.encoding = 'utf-8'\n    soup = BeautifulSoup(resp.text, \"html.parser\")\n    x = soup.find(\"div\", class_=\"design\")\n    x = x.find_all(\"a\", target=list_tag)\n    title = []\n    url_path = []\n    for i in x:\n        value = i.string.strip()\n        title.append(value)\n        temp_href = i.get('href').strip()\n        if temp_href.find(url_tag) >= 0:\n            href = root + temp_href\n        else:\n            href = root + temp_child_url + '/' + temp_href\n        url_path.append(href)\n    return title, url_path\ndef save_pdf(htmls, file_name):\n    \"\"\"\n    把所有html文件保存到pdf文件\n    :param htmls:  html文件列表\n    :param file_name: pdf文件名\n    :return:\n    \"\"\"\n    config = pdfkit.configuration(wkhtmltopdf=path_wkthmltopdf)\n    options = {\n        'page-size': 'Letter',\n        'margin-top': '0.75in',\n        'margin-right': '0.75in',\n        'margin-bottom': '0.75in',\n        'margin-left': '0.75in',\n        'encoding': \"UTF-8\",\n        'custom-header': [\n            ('Accept-Encoding', 'gzip')\n        ],\n        'cookie': [\n            ('cookie-name1', 'cookie-value1'),\n            ('cookie-name2', 'cookie-value2'),\n        ],\n        'outline-depth': 10,\n    }\n    pdfkit.from_file(htmls, file_name, options=options, configuration=config)\ndef append_pdf(input1, output1, bookmark):\n    bookmark_num = output1.getNumPages()\n    print(bookmark_num)\n    for page_num in range(input1.numPages):\n        output1.addPage(input1.getPage(page_num))\n    output1.addBookmark(bookmark, bookmark_num)\ndef main():\n    output = PdfFileWriter()\n    start = time.time()\n    file_name = u\"temp_\"\n    result = get_url_title_list()\n    titles = result[0]\n    urls = result[1]\n    print(titles)\n    print(urls)\n    for index, url in enumerate(urls):\n        parse_url_to_html(url, str(index) + \".html\")\n    htmls = []\n    pdfs = []\n    for i in range(0, len(urls)):\n        htmls.append(str(i) + '.html')\n        pdfs.append(file_name + str(i) + '.pdf')\n        save_pdf(str(i) + '.html', file_name + str(i) + '.pdf')\n        print(u\"转换完成第\" + str(i) + '个html')\n    i = 0\n    for pdf in pdfs:\n        fd = open(pdf, 'rb')\n        append_pdf(PdfFileReader(fd), output, titles[i])\n        i = i + 1\n        print(u\"合并完成第\" + str(i) + '个pdf' + pdf)\n    output.write(open(output_name, \"wb\"))\n    print(u\"输出PDF成功！\")\n    for html in htmls:\n        os.remove(html)\n        print(u\"删除临时文件\" + html)\n    for pdf in pdfs:\n        os.remove(pdf)\n        print(u\"删除临时文件\" + pdf)\n    total_time = time.time() - start\n    print(u\"总共耗时：%f 秒\" % total_time)\nif __name__ == '__main__':\n    try:\n        main()\n    except OSError as err:\n        print(\"OS error: {0}\".format(err))\n    except ValueError:\n        print(\"Could not convert data to an integer.\")\n    finally:\n        print(\"Unexpected error:\", sys.exc_info()[0])\n```\n\n## 存在的问题\n\n&emsp;&emsp;在删除中间生成的pdf时，报了一个错误(`OS error: [WinError 32]另一个程序正在使用此文件，进程无法访问。:'temp_0.pdf'`)，提示文件正在使用中，删除pdf文件失败。由于正在学习python，在多次尝试解决该问题，都以失败告终，等技能提升之后再进行修复~\n如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a>\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["Python3","BeautifulSoup","Pdfkit","爬虫"],"categories":["languages"]},{"title":"Python3入门学习—02条件循环语句","url":"/posts/1533523788/","content":"**人生苦短，我用Python：**\n\n写程序少不了的就是条件、循环语句，在程序运行中担任了重要作用。这些语句在Python中去除了大括号的包裹，完全按照缩进来控制语句的逻辑运行，如果从侧面来看，这样的代码看着清爽不少~\n\n<!--more-->\n\n## If条件语句\n[Python](https://www.python.org/)程序语言指定任何非0和非空（null）值为true，0 或者 null为false。如果接口定义好返回值后，在判断时可以直接使用如下形式（用flag作为判断条件）：\n```python3\nif flag:\n    execute statement\n```\n同样的，python的基本条件语句为：\n```python3\nif flag:\n    execute statement\nelse:\n    execute statement\n```\n多重判断情况下：\n```python3\nif flag0:\n    execute statement0\nelse if flag1:\n    execute statement1\nelse if flag2:\n    execute statement2\nelse:\n    execute statement3\n```\n多重判断的代码看着是不是也很清爽，还有更清爽的\n在同一行写if语句：`if ( flag ) : print \"Holle World\" `\n\n## While循环语句\n对于while循环语句我们之前学的是，该语句体可能一次都不进入；然后这个循环主要重复做一些相同工作的任务。其基本形式为：\n```python3\nwhile flag:\n    execute statement\n```\n> 引用[菜鸟教程](http://www.runoob.com)上的例子\n<div style=\"text-align: center\">\n![while 动画](https://coding.net/u/ibrucekong/p/images/git/raw/master/loop-over-python-list-animation.gif)\n</div>\n\n**再次强调，在python中去除了大括号的包裹，`:`变得很重要，千万不要遗漏**\n\n> while 语句时还有另外两个重要的命令 continue，break 来跳过循环。其中continue 用于跳过该次循环，break 则是用于退出循环，此外\"判断条件\"还可以是个常值，表示循环必定成立。下面来看几个例子：\n\n打印出10及以内的所有偶数\ncontinue和break示例\n```python3\ni = 1\nwhile i<10:\n    i+=1\n    if i%2>0:\n        continue\n    print(i)\n    \n# 控制台中则打出：2 4 6 8 10\n```\n常值作为判断条件，语句必定执行，至于语句是否能退出，取决于execute statement是否会跳出循环\n如果一直循环下去，那么该语句就会成为“无限循环体”\n```python3\nwhile 1:\n    execute statement\n```\n该条件永远为true，循环将无限执行下去；\n对于控制台程序，若想要退出该程序可以按Ctrl+C\n```python3\nvar = 1\nwhile var == 1 :  \n   name = input(\"请输入你的名字 :\")\n   print(\"你的名字是: \", name)\n \nprint \"再见!\"\n```\nPython使用`while ...else`语句，需要注意的是else 中的语句会在循环正常执行完（即 while 不是通过 break 跳出而中断的）的情况下执行：\n```python3\ncount = 1\nwhile count < 6:\n   print(count, \"小于6\")\n   count = count + 1\nelse:\n   print(count, \"大于6\")\n   \n控制台中会输出（6之后不再循环了）：\n1小于6\n2小于6\n3小于6\n4小于6\n5小于6\n6大于6\n```\n最后就是简单while语句：\n```python3\nwhile flag: execute statement\n```\n\n## For循环语句\n从上面的while语句就可以看出，一般循环体内部都会有一个if判断语句，用来控制更加具体的逻辑操作。同样的，for循环语句内部一般也会嵌套if语句，用来控制更加复杂的流程。\nPython中用的最多的就是`for in`，可以表示为：\n```python3\ngroup = ['P', 'y', 't', 'h', 'o', 'n']\nfor sub in group:\n    print(sub)\n\n控制台中会输出:\nP\ny\nt\nh\no\nn\n```\n其实在Python的for循环中，字符串可以当做数组进行循环，例如：\n```python3\nfor sub in \"Python\":\n    print(sub)\n\n控制台中会输出:\nP\ny\nt\nh\no\nn\n```\n另外for循环还可以通过索引值进行遍历数组：\n```python3\ngroup = ['P', 'y', 't', 'h', 'o', 'n']\nfor index in range(len(group)):\n    print(group[index])\n\n控制台中同样会输出:\nP\ny\nt\nh\no\nn\n```\n和`while … else`一样，`for … else` 语句中的else 语句也是在循环正常执行完的情况下执行，这里不再赘述。\n\n同样的，Python中也存在着嵌套循环的情况，即一个循环体中嵌套另一个循环。for、while、if可以互相嵌套，用来完成相关逻辑操作。\n\n这里再强调几个用的比较多的关键词：`break、continue、pass`\nbreak和continue在前面已经提到过，这里再多说一句，break、continue语句用在while和for循环中，其中break语句将停止执行最深层的循环，并开始执行下一行代码；continue语句是跳过当前循环的剩余语句，然后继续进行下一轮循环。\npass语句是一个空语句，是为了保持程序结构的完整性，一般是做占位语句，引用菜鸟教程的示例：\n```python3\nfor sub in \"Python\":\n   if sub == \"y\":\n      pass\n      print(\"占位符\")\n   print(letter)\n\n控制台中会输出:\nP\n占位符\nt\nh\no\nn\n```\n如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a>\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["Python3"],"categories":["languages"]},{"title":"Python3入门学习—01环境搭建","url":"/posts/58933767/","content":"**人生苦短，我用Python：**\n\nPython3作为一个比较容易入门的语言，实现相同的功能，Python可以使用较少的代码来实现，正所谓人生苦短，我用Python。\n\n<!--more-->\n\n## Python简介？\n&emsp;&emsp;[Python](https://www.python.org/)是一种解释型、面向对象、动态数据类型的高级程序设计语言。Python由Guido van Rossum于1989年底发明，第一个公开发行版发行于1991年。像Perl语言一样, Python 源代码同样遵循 GPL(GNU General Public License)协议。\n&emsp;&emsp;现在python存在的版本包括：`Python2.*`、`Python3.*`。本系列主要讨论Python3版本的学习历程。\n\n## 为什么要学习Python？\n&emsp;&emsp;之前学习了一点Java，但是好奇心比较重，就学习了一下Python，改善一下自己的思维习惯，锻炼自己学习新语言的能力，而且如果只会Java的话，在一些方面还是有些不方便的地方：\n>* 系统部署\n* 网页开发\n* 发布简单\n\n&emsp;\n>另外引用知乎上一句话：写起来简单，看起来明白！\n应用领域比较广泛:Web服务器、运维测试、科学计算、组件编程、数据库编程、游戏、图像、**人工智能**、**机器人**等等。\n\n&emsp;&emsp;Python既然这么优秀为啥不去学习呢，是吧？\n\n## Python3环境搭建？\n&emsp;&emsp;Python兼容Mac、Linux、Windows系统，现以Windows系统（穷）搭（逼）建为例：\n\n* 首先去Python官网[下载](https://www.python.org/downloads/windows/)与Windows系统版本相匹配的Python3安装包(比如：64位的系统下载`Windows x86-64 executable installer`)。\n* 双击下载的exe文件，在弹出的安装界面中（记下安装路径，后面可能要用到），注意勾选`Add Python 3.* to PATH`，选择Customize installation，在弹出的安装组件列表中着重观察是否选中了`pip`，如果没有，请勾选。一路Next，直到Finish。\n* 打开cmd，输入python，验证Python是否安装配置成功。\n\n<div style=\"text-align: center;\">![valid python](https://coding.net/u/ibrucekong/p/images/git/raw/master/valid-python.png)</div>\n\n**注意:如果验证不成功，可将前面记录的安装路径和Scripts目录一同放入系统的环境变量中。**\n\n## Python3的Hello World怎么写？\nLet's do it...\n\n```print('Hello', 'World!')```\n\nDone...\n\n<div style=\"text-align: center;\">![Hello World](https://coding.net/u/ibrucekong/p/images/git/raw/master/python-hello-world.png)</div>\n如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a>\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["Python3"],"categories":["languages"]},{"title":"Node安装与配置","url":"/posts/3412983070/","content":"**很火的一种技术：**\n\nNode.js是之前无意间看到的一个框架、平台，今年1月份发布了1.0版本，并且很快就达到了2.0版本，[官网](https://nodejs.org)不断迭代版本，[社区](https://cnodejs.org/)也很活跃，做后端的朋友可以多关注一下。\n\n<!--more-->\n\n## Node.js概念\n\n>Node.js是一个Javascript运行环境(runtime)，发布于2009年5月，由RyanDahl开发，实质是对ChromeV8引擎进行了封装。Node.js对一些特殊用例进行优化，提供替代的API，使得V8在非浏览器环境下运行得更好。\n>V8引擎执行Javascript的速度非常快，性能非常好。Node.js是一个基于Chrome JavaScript运行时建立的平台，用于方便地搭建响应速度快、易于扩展的网络应用。Node.js使用事件驱动，非阻塞I/O模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。\n><div style=\"text-align: right;\">[直接引用百度百科](https://baike.baidu.com/item/node.js/7567977?fr=aladdin&fromid=11244313&fromtitle=nodejs)</div>\n\n## Node.js的优势\n\n- RESTful API；\n- 单线程；\n- 非阻塞IO；\n- V8虚拟机；\n- 事件驱动。\n\n说这么多，说的什么鬼，我也不懂啊\n\n## Node.js安装与配置\n\n这里以Windows演示一下Node.js的安装与配置：\n\n- 下载Node.js安装包(建议下载LTS版本)，进入[官网](https://nodejs.org/en/)，下载对应平台版本的安装包；\n- 安装Node.js；\n注意在安装时，记得把Add To Path，不然就要手动将Node.js安装目录和npm的目录添加到环境变量中了；\n打开Git Bash输入`node -v`测试node是否安装成功；\n再输入`npm -v`，测试是否npm是否安装成功；\n- 替换npm的源\n打开Git Bash，输入`npm install -g cnpm --registry=http://registry.npm.taobao.org`\n再输入`cnpm`，测试cnpm是否安装成功。\n\n## Node.js最常用命令\n由于cnpm是npm的镜像，所以两者的命令及参数是一模一样的，这里只说一下npm的命令操作...\n- node -v\n- node -h\n- npm i (i为install的简写) 安装模块到本目录\n- npm i -g (i为install的简写) 全局安装模块\n- npm un (un为uninstall的简写) 卸载本目录模块\n- npm un -g (un为uninstall的简写) 卸载本目录模块\n- npm list 列出安装的模块\n- npm update 更新当前目录下的所有模块\n\nNode.js升级\n```\nnpm install -g n\nn stable\n```\n\nnpm升级\n```\nnpm install npm -g\n```\n如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a>\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["Node"],"categories":["languages"]},{"title":"Git 中级用户的25个提示","url":"/posts/2220897336/","content":"**超级好用的版本管理系统：**\n\nGit是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\n\n<!--more-->\n\n## 什么是Git\n<div style=\"text-align: center;\">![git log](https://coding.net/u/ibrucekong/p/images/git/raw/master/git-log.jpg)</div>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。 Git 是 Linus Torvalds 为了帮助管理Linux 内核开发而开发的一个开放源码的版本控制软件。</p>\n\n## 安装及基本知识\n\n### 安装后第一步\n\n安装 Git 之后，你要做的第一件事情就是去配置你的名字和邮箱，因为每一次提交都需要这些信息：\n\n```\n$ git config --global user.name \"Some One\"\n$ git config --global user.email \"someone@gmail.com\"\n```\n\n### Git是以指针为基础\n\n存储在 git 中的所有东西都包含在一个文件中。当你提交的时候，git 会创建一个包含提交消息和相关数据的文件（名称、邮件、日期/时间、上一次提交等等），并将其链接到一个树形文件。树形文件包含一个对象列表或者其它树。对象或二进制大数据对象([BLOB](http://en.wikipedia.org/wiki/Binary_large_object))是提交的真正内容（一个文件，如果你愿意，虽然文件名没有存储在对象中，但会存储在树中）。所有这些文件都以对象的 SHA-1 哈希为文件名进行存储。\n\n分支和标签只是一些文件，这些文件包含（基本上）一个指向提交的 SHA-1 哈希值。使用这些引用在灵活性和速度上均有大幅提升，创建一个新的分支就和创建一个文件一样简单，只是这个文件带有分支名称和一个包含指向提交（你从这个提交建立分支）的SHA-1哈希值。当然，当你使用 Git 命令行工具（或一个图形用户界面）时，你永远也不会这么做，但它就是这么简单。\n\n你可能已经听说过对 HEAD 的引用。它只是一个包含 SHA-1引用的文件，这个引用指向你当前的提交。如果你正在解决一个合并冲突问题，查看一下HEAD，你会发现，它与一个特定的分支或分支上的特定点无关，只和你现在的位置有关。\n\n所有的分支指针保存在 .git/refs/heads 目录下，HEAD 在 .git/HEAD 目录下，标签在 .git/refs/tags 目录下 - 你可以随意看看。\n\n### 两个Parents - 当然！\n\n当在日志文件中查看一个合并提交的消息时，你会看到两个 parents（与正常提交相比）。第一个parent 是你所在的分支，第二个 parents 是你并入的分支。\n\n### 合并冲突\n\n到目前为止，我确信你一定有一个合并冲突需要解决。通常情况下，通过编辑该文件，删除文件中的<<<<, ====, >>>>标记，然后保存你需要保留的代码就可以了。有时候，在任何变更之前查看代码都是一个值得推荐的做法，比如，在你对两个有冲突的分支采取行动之前。这是又一个命令：\n\n```\n$ git diff --merge\ndiff --cc dummy.rb  \nindex 5175dde,0c65895..4a00477  \n--- a/dummy.rb\n+++ b/dummy.rb\n@@@ -1,5 -1,5 +1,5 @@@\n  class MyFoo\n    def say\n-     puts \"Bonjour\"\n -    puts \"Hello world\"\n++    puts \"Annyong Haseyo\"\n    end\n  end\n```\n\n如果文件是二进制的，文件比较就不是那么容易了...你通常要做的是尝试每个版本的二进制文件，并决定使用哪一个（或者在二进制文件编辑器手动复制部分内容）。从一个特定分支下 pull 一个文件副本（如果你要合并主分支和分支132的话）：\n\n```\n$ git checkout master flash/foo.fla # or...\n$ git checkout feature132 flash/foo.fla\n$ # Then...\n$ git add flash/foo.fla\n```\n\n另一种方法是从 git 中查看这个文件 - 你能够以其他文件名的方式进行查看，然后将正确的文件（当你确定它是哪一个时）复制到正常的文件名中：\n\n```\n$ git show master:flash/foo.fla > master-foo.fla\n$ git show feature132:flash/foo.fla > feature132-foo.fla\n$ # Check out master-foo.fla and feature132-foo.fla\n$ # Let's say we decide that feature132's is correct\n$ rm flash/foo.fla\n$ mv feature132-foo.fla flash/foo.fla\n$ rm master-foo.fla\n$ git add flash/foo.fla\n```\n\n更新：感谢 Carl 在早先的的博客评论中给与的提醒，你实际上能使用 “git checkout —ours flash/foo.fla” 和 “git checkout —theirs flash/foo.fla” 检出一个特定的版本而不需要记住你要合并到哪一个分支。我个人更喜欢更明确些，但是你可以随便选择...\n\n在解决了合并冲突问题之后（就像我上面所做的那样），请记得将这个文件添加给索引。\n\n## 服务器、分支和标签\n\n### 远程服务器\n\nGit 最强大的功能之一是可以有一个以上的远程服务器（另一个事实，你总是可以运行一个本地仓库）。你不一定总是需要写访问权限，你可以从多个服务器中读取（用于合并），然后写到另一个服务器中。添加一个远程服务器很简单：\n\n```\n$ git remote add john git@github.com:johnsomeone/someproject.git\n```\n\n如果你想查看远程服务器的相关信息，你可以这样做：\n\n```\n# shows URLs of each remote server\n$ git remote -v \n\n# gives more details about each\n$ git remote show name\n```\n\n你可以查看本地分支和远程分支之间的差别：\n\n```\n$ git diff master..john/master\n```\n\n你也能查看不在远程分支上的 HEAD 的变化：\n\n```\n$ git log remote/branch..\n# Note: no final refspec after ..\n```\n\n### 标签\n\n在 Git 中存在两种类型的标签 - 一个轻量级标签和一个注解标签。记着第二个提示中说过 Git 是基于指针的，二者的区别很简单。一个轻量级标签无非是一个指向提交的具名指针。你可以改变它并指向另一个提交。一个注解标签是一个指向标签对象的具名指针，这个标签对象拥有自己的消息和历史。如果有需要，标签对象的消息可以采用 GPG 加密签名。\n\n创建两种类型的标签其实很容易（只是一个命令行选项的差异）\n\n```\n$ git tag to-be-tested\n$ git tag -a v1.1.0 # Prompts for a tag message\n```\n\n### 创建分支\n\n在 Git 中创建分支非常容易（闪电般的速度，因为它仅仅需要创建一个不到100字节的文件）。创建一个新分支并切换过去的通用写法是：\n\n```\n$ git branch feature132\n$ git checkout feature132\n```\n\n当然，如果你知道你要马上切换过去，你可以使用一条命令就能做到：\n\n```\n$ git checkout -b feature132\n```\n\n如果你要重命名一个本地分支，同样是件容易的事（长命令方式用来显示具体执行过程）：\n\n```\n$ git checkout -b twitter-experiment feature132\n$ git branch -d feature132\n```\n\n更新：或者你（就像 Brian Palmer 在博客文章评论中指出的那样）只使用 “git branch” 和 -m 选项就可以一步到位：\n\n```\n$ git branch -m twitter-experiment\n$ git branch -m feature132 twitter-experiment\n```\n\n### 合并分支\n\n在将来某个时候，你想要合并你的变更。有两种方式可以实现：\n\n```\n$ git checkout master\n$ git merge feature83 # Or...\n$ git rebase feature83\n```\n\nmerge 和 rebase 的区别在于，merge 试图解决变更而且创建一个融合后的新提交，而 rebase 则试图把自你上次在其他分支上的变化，在另一个分支的 HAED 上重现。但是，在你向远程服务器推送一个分支之后，不要进行 rebase 操作 - 这会引发混淆/问题。\n\n如果你不能确定哪些分支仍然有独立的工作在进行 - 以便你能知道你需要合并哪一个分支以及删除哪些分支，git branch 命令有两个选项可以帮助实现这一点：\n\n```\n# Shows branches that are all merged in to your current branch\n$ git branch --merged\n\n# Shows branches that are not merged in to your current branch\n$ git branch --no-merged\n```\n\n### 远程分支\n\n如果你有一个本地分支，你想让它出现在远程服务器上，你可以使用一个推送命令：\n\n```\n$ git push origin twitter-experiment:refs/heads/twitter-experiment\n# Where origin is our server name and twitter-experiment is the branch\n```\n\n更新：感谢 Erlend 在博客文章评论中提到的 - 这实际上和 git push origin twitter-experiment 达到的效果的一样，但是通过使用全部语法，你能看到你实际上在两端使用了不同的名字（你的本地名字可能是 add-ssl-support，而远程名字可能是 issue-1723）。\n\n如果你想删除一个远程服务器上的分支（请注意分支名称之前的冒号）：\n\n```\n$ git push origin :twitter-experiment\n```\n\n如果你想显示所有远程分支的状态，你能像这样查看它们：\n\n```\n$ git remote show origin\n```\n\n这可能会列出一些服务器上曾经有过但现在已不存在的分支。如果碰到这种情况，你可以很轻松地使用如下命令从本地检出并将其删除：\n\n```\n$ git remote prune\n```\n\n最后，如果你有一个远程分支，你想在本地进行跟踪它，通常的做法是：\n\n```\n$ git branch --track myfeature origin/myfeature\n$ git checkout myfeature\n```\n\n然而，如果你使用 -b 标识符去检出的话，新版的 Git 会自动建立跟踪：\n\n```\n$ git checkout -b myfeature origin/myfeature\n```\n\n`在临时存放区、索引和文件系统中保存内容`\n\n### 临时存放（Stashing）\n\n在Git中，你可以把当前的工作状态储存在一个临时的存储区域堆栈，然后重新加以利用。简单的案例如下：\n\n```\n$ git stash # Do something...\n$ git stash pop\n```\n\n很多人推荐使用 git stash apply 来代替 “pop”，然而如果你真这么做的话，你最终得到一个长长的毫无用处的储藏清单。如果对它进行清理，“pop” 只会把它从堆栈中删除。如果你已经使用了 git stash apply ，你可以使用如下命令从堆栈中删除最后一项：\n\n```\n$ git stash drop\n```\n\nGit 会基于当前的提交消息自动创建一个注释信息。如果你更喜欢使用一个自定义的消息（因为它可能和之前的提交无关）：\n\n```\n$ git stash save \"My stash message\"\n```\n\n如果你想从你的列表中（不必是最后一个）对一个特定的 stash 加以利用，你可以列出它们并像这样来使用它：\n```\n$ git stash list\n  stash@{0}: On master: Changed to German\n  stash@{1}: On master: Language is now Italian\n$ git stash apply stash@{1}\n```\n\n### 交互式添加\n\n在 Subversion 的世界里，你修改文件然后只是提交有变化的文件。而在 Git 的世界里，你在提交某些文件甚至某些补丁上有更多的控制权。为了提交某些文件或者文件的某些部分，你必须进入交互模式。\n\n```\n$ git add -i\n           staged     unstaged path\n\n\n*** Commands ***\n  1: status      2: update   3: revert   4: add untracked\n  5: patch      6: diff     7: quit     8: help\nWhat now>\n```\n\n这会让你进入一个基于交互式命令的菜单模式。你可以使用命令的数字符号或者加亮字符（如果你开启颜色高亮显示功能的话）进入对应模式，然后就是正常输入文件数的问题了（你可以使用像1或1-4或2,4,7这样的格式）。\n\n如果你想进入修补模式（交互模式下输入‘p’或‘5’ ），你也可以直接进入那个模式：\n\n```\n$ git add -p    \ndiff --git a/dummy.rb b/dummy.rb  \nindex 4a00477..f856fb0 100644  \n--- a/dummy.rb\n+++ b/dummy.rb\n@@ -1,5 +1,5 @@\n class MyFoo\n   def say\n-    puts \"Annyong Haseyo\"\n+    puts \"Guten Tag\"\n   end\n end\nStage this hunk [y,n,q,a,d,/,e,?]?\n```\n\n如你所见，在底部你得到一系列选项为选择去添加文件改变的部分，这个文件的所有变化等等。使用‘?’ 命令可以了解选不同选项的解释。\n\n### 存储/从文件系统检索\n\n一些项目（例如 Git 项目自身）直接在 Git 文件系统中存储额外的文件而不必是检入文件。\n\n让我们开始在 Git 中存储一个任意文件：\n\n```\n$ echo \"Foo\" | git hash-object -w --stdin\n51fc03a9bb365fae74fd2bf66517b30bf48020cb\n```\n\n此时，该文件对象已在数据库中，但是如果你不设置（一些东西）指向那个文件对象，它将被作为垃圾而回收。最简单的方法是标记它：\n\n```\n$ git tag myfile 51fc03a9bb365fae74fd2bf66517b30bf48020cb\n```\n\n既然在这里我们已经标记了 myfile。当我们需要获取该文件时，我们可以这样做：\n\n```\n$ git cat-file blob myfile\n```\n\n程序员可能经常用到的工具文件（密码、GPG 密钥、等等），不需要每次都检出到磁盘上（特别是在生产环境下），这种方法非常有效。\n\n## 日志记录\n\n### 查看日志\n\n如果你不使用‘git log’查看最近提交历史的话，你就不能长时间顺利地使用Git。但是，也存在一些如何更好使用它的建议。例如，你可以查看每次提交中改变的一个补丁：\n\n```\n$ git log -p\n```\n\n或者你可以只是查看一个哪些文件有所更改的概述：\n\n```\n$ git log --stat\n```\n\n你可以在一行中设置一个不错的别名，用于显示简短的提交和漂亮的带有消息的分支图（像 gitk，但在命令行上）：\n\n```\n$ git config --global alias.lol \"log --pretty=oneline --abbrev-commit --graph --decorate\"\n$ git lol\n* 4d2409a (master) Oops, meant that to be in Korean\n* 169b845 Hello world\n```\n\n### 检索日志\n\n如果你想在日志中查询一个特定作者，你可以这样指定：\n\n```\n$ git log --author=Andy\n```\n\n更新：感谢 Johannes 的评论，我终于化解了一部分困惑。\n或者如果你有一个搜索词出现在提交消息中：\n\n```\n$ git log --grep=\"Something in the message\"\n```\n\n还有一个功能更强大的叫 pickaxe 的命令，它可以查找条目用来添加或删除一个特定的内容（也就是，当它第一次出现或被删除的时候）。这样你就可以知道何时增加了一行（但是如果那一行中的字符随后被改变，你将无从得知）：\n\n```\n$ git log -S \"TODO: Check for admin status\"\n```\n\n如果你改变一个特定的文件会怎么样呢，例如 lib/foo.rb\n\n```\n$ git log lib/foo.rb\n```\n\n比如说你有一个 feature/132 分支和一个 feature/145 分支，你想查看在这些分支但却不在主分支上的提交（备注：^ 代表非）：\n\n```\n$ git log feature/132 feature/145 ^master\n```\n\n你也可以使用 ActiveSupport 风格的日期缩小日期范围：\n\n```\n$ git log --since=2.months.ago --until=1.day.ago\n```\n\n它默认使用 OR 模式来组合查询，但是你也可以很轻松地改为 AND 模式（如果你的查询项不止一个的话）\n\n```\n$ git log --since=2.months.ago --until=1.day.ago --author=andy -S \"something\" --all-match\n```\n\n### 选择查看/修改的版本\n\n当引用一个修订版本时，你有许多选项可以选择，当然，这取决于你对此功能的了解程度：\n\n```\n$ git show 12a86bc38 # By revision\n$ git show v1.0.1 # By tag\n$ git show feature132 # By branch name\n$ git show 12a86bc38^ # Parent of a commit\n$ git show 12a86bc38~2 # Grandparent of a commit\n$ git show feature132@{yesterday} # Time relative\n$ git show feature132@{2.hours.ago} # Time relative\n```\n\n请注意，和上一节有所不同，在行尾的脱字符表示提交的 parent - 行首的脱字符则表示不在这个分支上。\n\n### 选择一个范围\n\n最简单的方法是这样来用：\n\n```\n$ git log origin/master..new\n# [old]..[new] - everything you haven't pushed yet\n```\n\n你也可以删除 [new]，这将使用当前的 HEAD。\n\n`时间回退和错误修复`\n\n### 重置更改\n\n如果你还没有提交一个更改，你可以很容易地重置它：\n\n```\n$ git reset HEAD lib/foo.rb\n```\n\n通常使用‘unstage’作为别名比较好，因为它不是那么显而易见。\n\n```\n$ git config --global alias.unstage \"reset HEAD\"\n$ git unstage lib/foo.rb\n```\n\n如果你已经提交了文件，你可以做两件事情 - 如果是最后一次提交，你可以这样来修改：\n\n```\n$ git commit --amend\n```\n\n这将回滚到最后一次提交，让你的工作副本回到变化存储在暂存区的状态，你可以编辑提交消息准备下一次提交。\n如果你的提交不止一次，并且只想完全回滚它们，你可以重置分支回到之前的时间点。\n\n```\n$ git checkout feature132\n$ git reset --hard HEAD~2\n```\n\n如果你真的想把分支指向一个完全不同的 SHA-1（也许你把一个分支的 HEAD 指向另一个分支，或者进一步提交），你可以按照以下方式去做：\n\n```\n$ git checkout FOO\n$ git reset --hard SHA\n```\n\n实际上还有一种更便捷的方式（因为它不会先将你的工作副本变回最初 FOO 状态，然后再指向 SHA）：\n\n```\n$ git update-ref refs/heads/FOO SHA\n```\n\n### 提交到错误的分支\n\n好吧，让我们假设你提交到主分支，但应该已经创建了一个叫做 experimental 的主题分支。为了移除这些变化，你可以在当前点创建一个分支，回退 HEAD，然后检出新的分支：\n\n```\n$ git branch experimental   # Creates a pointer to the current master state\n$ git reset --hard master~3 # Moves the master branch pointer back to 3 revisions ago\n$ git checkout experimental\n```\n\n如果你已经在一个分支的一个分支的一个分支等上面做了些变更，这将会更复杂。然后你需要做的就是在这个分支上将其变更 rebase 到另一个的地方：\n\n```\n$ git branch newtopic STARTPOINT\n$ git rebase oldtopic --onto newtopic\n```\n\n### 交互式 rebasing\n\n这是一个很酷的特性，我之前已看过演示，但当时没有真正搞明白，现在来看其实很简单。比方说，你已做了3次提交，但是你想对它们进行重新排序或者编辑（或者合并它们）：\n\n```\n$ git rebase -i master~3\n```\n\n然后你将编辑器打开。你所要做的就是修改 “pick/squash/edit 的指令来进行如何提交，然后保存/退出。在编辑之后，你可以使用`git rebase —continue`让你的每一个指令一个一个进行。\n\n如果你选择编辑一个文件，这会让你停留在你提交时的状态，因此你需要使用`git commit —amend`对它进行编辑。\n\n备注：在 REBASE 过程中不要进行提交工作 - 只能添加然后使用 —continue, —skip or —abort 选项。\n\n### 清理\n\n如果你已经提交了一些内容到你的分支中（也许你是从SVN中的旧代码库导入的），你想从历史中删除掉所有的已提交内容：\n\n```\n$ git filter-branch --tree-filter 'rm -f *.class' HEAD\n```\n\n如果你已经向远程服务器推送过代码，但自那之后提交的都是一些垃圾，在推送之前你可以在本地系统上执行这样的操作：\n\n```\n$ git filter-branch --tree-filter 'rm -f *.class' origin/master..HEAD\n```\n`各种各样的提示`\n\n### 之前你看过的引用\n\n如果你知道你之前已经查看过一个 SHA-1，但是你已经做了一些重置/回退工作，你可以使用 reflog 命令去查看你最近看过的 SHA-1:\n\n```\n$ git reflog\n$ git log -g # Same as above, but shows in 'log' format\n```\n\n### 分支命名\n\n一个可爱的小提示 - 请记住，分支的名字并不局限于 a-z 和 0-9 这些字符。名字中可以使用 / 和 . 来伪装命名空间或者版本号，例如：\n\n```\n$ # Generate a changelog of Release 132\n$ git shortlog release/132 ^release/131\n$ # Tag this as v1.0.1\n$ git tag v1.0.1 release/132\n```\n\n### 寻找谁是始作俑者\n\n寻找谁更改了一个文件中的一行代码经常会用到。简单命令如下：\n\n```\n$ git blame FILE\n```\n\n有时更改来自于前一个文件（如果你已经合并了两个文件，或者你已经移动了一个函数），因此你可以这样用：\n\n```\n$ # shows which file names the content came from\n$ git blame -C FILE\n```\n\n有时通过向前或向后点击来进行变化跟踪，这是很好的方法。有一个内置的 GUI 程序专门为此设计：\n\n```\n$ git gui blame FILE\n```\n\n### 数据库维护\n\nGit 通常不需要大量维护，它基本上可以自我维护。然而，你可以使用如下命令查看数据库统计信息：\n\n```\n$ git count-objects -v\n```\n\n如果数值很高，你可以选择使用垃圾回收你的重复内容。这不会影响推送或者其它用户，但却可以让你的命令运行更快且占用更少空间：\n\n```\n$ git gc\n```\n\n经常运行一致性检查也是值得推荐的做法：\n\n```\n$ git fsck --full\n```\n\n你也可以在行尾添加一个 —auto 参数（如果你频繁运行它，或者在你的服务器上每日从 crontab 中运行它），如果统计数据表明必须进行要进行一致性检查，只要 fsck 命令就行。\n\n如果检查 “dangling” 或 “unreachable” 的结果一切正常，这经常是由于回退 HEAD 或 rebasing的结果。如果检查“missing” 或 “sha1 mismatch” 出了问题...寻求专业帮助吧！\n\n### 恢复一个丢失的分支\n\n如果你使用 -D 选项删除了一个分支 experimental，你可以重新创建它：\n\n```\n$ git branch experimental SHA1_OF_HASH\n```\n\n你可以使用`git reflog`来发现一个 SHA-1 哈希值，如果你近期访问过它的话。\n\n另一种方法是使用`git fsck —lost-found`。一个悬空的提交就是一个`lost HEAD`（它只会是一个已删除分支的 HEAD，因为当一个 HEAD^ 被 HEAD 引用时，它就没有悬空）\n\n原文链接 : [25 Tips for Intermediate Git Users](https://www.andyjeffries.co.uk/25-tips-for-intermediate-git-users/)\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["版本管理","Git"],"categories":["languages"]},{"title":"控制台，终端，tty，shell等概念的区别","url":"/posts/1500121752/","content":"**带你走进终端世界：**\n\n控制台程序是为了兼容DOS程序而设立的，这种程序的执行就好像在一个DOS窗口中执行一样，没有自己的界面。\n\n<!--more-->\n\n使用linux已经有一段时间，却一直弄不明白这几个概念之间的区别。虽然一直在用，但是很多概念都感觉模糊不清，这样不上不下的状态实在令人不爽。下面就澄清一下这些概念。\n\n这些概念本身有着非常浓厚的历史气息，随着时代的发展，他们的含义也在发生改变，它们有些已经失去了最初的含义，但是它们的名字却被保留了下来。\n\n## 控制台(Console)\n\n控制台(Console)是物理设备，用于输入输出，它直接连接在计算机上，是计算机系统的一部分。计算机输出的信息会显示在控制台上，例如BIOS的输出，内核的输出。\n\n## 终端(Terminal)\n\n终端(Terminal)也是一台物理设备，只用于输入输出，本身没有强大的计算能力。一台计算机只有一个控制台，在计算资源紧张的时代，人们想共享一台计算机，可以通过终端连接到计算机上，将指令输入终端，终端传送给计算机，计算机完成指令后，将输出传送给终端，终端将结果显示给用户。\n\n## 虚拟控制台(Virtual Console)，虚拟终端(Virtual Terminal)\n\n虚拟控制台(Virtual Console)和虚拟终端是一样的。我们只有一台终端（物理设备），这是我们与计算机之间的用户接口。假如有一天，我们想拥有多个用户接口，那么，一方面我们可以增加终端数目（物理设备），另一方面，还可以在同一台终端（物理设备）上虚拟出多个终端，它们之间互相不影响，至少看起来互相不影响。这些终端就是虚拟终端。\n\n在Ubuntu中，我们按下Ctrl+Alt+Fx时，会进入第x个虚拟终端，一共有七个虚拟终端，其中第七个虚拟终端，就是我们默认使用的图形用户界面。\n\n## 终端模拟器(Terminal Emulator)\n\n我们知道，终端是一种物理设备，而终端模拟器(Terminal Emulator)，是一个程序，这些程序用来模拟物理终端。图形用户界面中的终端模拟器一般称为终端窗口(Terminal Window)，我们在Ubuntu下打开的gnome-terminal就属于此类。\n\n## tty\n\ntty的全称是TeleTYpewriter，这就是早期的终端（物理设备），它们用于向计算机发送数据，并将计算机的返回结果打印出来。显示器出现后，终端不再将结果打印出来，而是显示在显示器上。但是tty的名字还是保留了下来。\n\n在Ubuntu中，我们按下Ctrl+Alt+F1时，会进入第1个虚拟终端，你可以看到屏幕上方显示的tty1。\n\n## shell\n\nshell 和之前说的几个概念截然不同，之前的几个概念都是与计算机的输入输出相关的，而shell是和内核相关的。内核为上层的应用提供了很多服务，shell在内核的上层，在应用程序的下层。例如，你写了一个 hello world 程序，你并不用显式地创建一个进程来运行你的程序，你把写好的程序交给shell就行了，由shell负责为你的程序创建进程。\n\n我们在终端模拟器中输入命令时，终端模拟器本身并不解释执行这些命令，它只负责输入输出，真正解释执行这些命令的，是shell。\n\n我们平时使用的sh, bash, csh是shell的不同实现。\n\n>**sh:** \n>sh这个概念本身就有岐义，它可以指shell程序的名字，也代表了shell的实现。\n>Thompson shell是第一个Unix shell，由 Ken Thompso于1971年在Unix第一版本中引入，shell的程序名即为sh。Bourne shell作为Thompson shell的替代，由 Stephen Bourne于1977年在Unix第七版中引入，它的程序名也是sh。Bourne shell不仅仅是一个命令解释器，更作为一种编程语言，提供了Thompson shell不具备的程序控制功能，并随着 Brian W. Kernighan 和 Rob Pike 的 The UNIX Programming Environment的出版而名声大噪。\n>\n>**csh: **\n>csh全称为 C Shell，由 Bill Joy在70年代晚期完成，那时候他还是加州伯克利大学的研究生。tcsh是csh的升级版。与sh不同，csh的shell脚本，语法接近于C_language。\n>\n>**bash: **\n>bash是由 Brian Fox为GNU项目开发的自由软件，作为Bourne shell的替代品，于1989年发布。是Linux和Mac OS X的默认shell。bash的命令语法是Bourne shell命令语法的超集，从ksh和csh借鉴了一些思想。\n\n好了，就写到这里，上面的内容是我参考维基百科后写下的，`不保证完全正确`，下面还提供了一些资料，如果有兴趣可以阅读一下。\n\n## 扩展阅读\n\n>* [What is the exact difference between a 'terminal', a 'shell', a 'tty' and a 'console'?](http://unix.stackexchange.com/questions/4126/what-is-the-exact-difference-between-a-terminal-a-shell-a-tty-and-a-con)\n>* [shell，bash,zsh,console,terminal到底是什么意思，它们之间又是什么关系？](http://www.linuxsir.org/bbs/thread362001.html?pageon=1#2059206)\n>* [shell、控制台、终端的区别](http://blog.csdn.net/caomiao2006/article/details/8791775)\n>* [Why is a virtual terminal “virtual”, and what/why/where is the “real” terminal?](http://askubuntu.com/questions/14284/why-is-a-virtual-terminal-virtual-and-what-why-where-is-the-real-terminal)\n\n**参考自:**[Minixalpha Blog](http://minixalpha.github.io/%E5%B7%A5%E5%85%B7/2014/02/28/terminal-shell.html)\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["控制台","终端"],"categories":["tools"]},{"title":"如何编写高质量的程序","url":"/posts/3490671754/","content":"**学习编程：**\n\n学习任何编程语言都会有一个基本的过程，开始的时候学习基本的语法，然后学习各种库，框架，开始做各种项目。\n\n<!--more-->\n\n## 如何编写高质量的程序\n\n学习任何编程语言都会有一个基本的过程，开始的时候学习基本的语法，然后学习各种库，框架，开始做各种项目。在做项目的过程中，随着代码量的增加，我们会渐渐感到失去对程序的掌控能力，bug开始增加，牵一发而动全身，顾此失彼。这充分说明了编写高质量程序的重要性，这里的“高质量”主要指程序的正确性，可读性，可维护性。\n\n## 什么是高质量的程序\n\n**正确性**\n\n程序正确性的重要程度无需多言，尤其在一些特殊领域，例如芯片制造业，航天业，武器制造业，对程序正确性往往有着极其严格的要求，因为一旦程序出错，代价往往是巨大的。在这些领域，需要使用形式化方法(formal methods)来自动验证程序的正确性，也就是说你需要证明程序的正确性，而不仅仅保证程序在大多数情况下是正确的。在其它领域，对正确性没有这么高要求，形式化方法也不适用，但是我们还是需要使用其它手段，例如测试，code review等等来保证软件的正确性。\n\n**可读性**\n\n可读性可以帮助程序作者理清思路，思路清晰后，程序不容易出错。另外，其它程序员在维护你的代码时，更容易理解你的意思，方便修改bug，方便扩展。\n\n不要浪费自己的时间，更不要浪费别人的时间。\n\n**可维护性**\n\n这里的可维护性主要指程序应对变化的能力。程序在完成基本功能后，可能会发生各种改变：用户需求变了，性能达不到要求需要重新实现算法，等等。一旦程序的一个点发生改变，其它点如果也需要同时手动改变，那么程序会变的不可控制，出bug的机会会增加。想像一下，我们的程序是一个盒子，在添加新功能时，如果只需要把新模块插到一个地方，新模块就可以被系统使用，这样的程序可维护性是很高的。但是如果添加新功能时，需要把原来的程序盒子拆开，其它模块也需要相应修改，才能加入新模块，这样的程序可维护性就很差。\n\n## 提高程序质量的重要措施\n\n**测试**\n\n为什么强调先编写测试用例，再实现程序？先编写测试用例的意义在于，让编写程序的人对程序本身有更好的理解。因为你首先得明白什么样的程序是正确的，然后才能写出正确的程序。测试用例其实是对程序正确性的一种描述。\n\n为什么强调自动化测试，而不是手动测试？因为自动化测试可以增加测试的便捷度，而人们通常会更多地使用那些便捷度高的东西。我在做个人项目的时候就发现，在编写了自动测试的脚本后，我每改动一点程序，就会自动运行一下脚本，在此之前，我明知道测试很重要，但是还是不会测试的如此频繁。这样的好处是可以方便定位bug，否则在系统经过了大量改动之后，出了bug都不知道可能在哪里。\n\n在对程序进行重构时，很重要的一点就在于，一定要先写好测试用例，然后每改动一点，就自动测试一下，保证程序始终保持在可控状态。\n\n**良好的编程风格**\n\n良好的编程风格，可以增强程序的可读性，一个结构清晰的程序，你会更容易从中发现错误。另一方面，当程序发生变化时，很可能引入新的bug，良好的编程风格可以减少这种bug的出现。下面是与编程风格相关的一些措施。\n\n>**风格指南:**\n>找一份你使用的编程语言的风格指南，例如Google的编程语言风格指南系列，Python的PEP8，并一直遵守这份指南的内容，如果有自动化工具帮助你保持这种风格，那再好不过。\n>\n>**最佳实践:**\n>寻找你所使用语言的最佳实践，他们可读性强，经过了大量实践的考验，被广泛接受，所以尽可能多地使用他们。\n>\n>**起一个好名字:**\n>变量，函数名，类名，都需要一个好名字。程序本身是对解决方案的一种描述，一个好的名字会增强这种描述性，也会让你的思维集中于解决方案，同时让其它人更容易理解你的解决方案。\n>\n>**不要直接使用常量:**\n>在程序中直接使用的常量，一般被称为 Magic Numbers， 一方面它不利于其它程序员对程序的理解，因为没有人知道这个常量代表什么。另一方面，多个常量之间可能是有关系的，直接使用常量根本反应不出这种关系。\n>\n>**同一变量名不要有多种含义:**\n>首先这种做法降低了可读性，一个变量前面一个含义，后面一个含义，这会给阅读程序的人带来困扰。\n>\n>**尽可能保证变量作用域小:**\n>尽量减少变量定义的点与变量最后一次使用的点之间的跨度，这样可以使变量与其相关代码变得紧凑，提高可读性，不用在使用变量时再去很多的地方查看其它引用。\n>\n>**保证函数短小精悍:**\n>过长的函数会让读者陷入细节的泥潭，还需要前后来回看才能明白前面一大段和后面一大段代码的关系。将函数分解，然后给函数起一个好名字，读者马上就能明白这段代码在做什么。\n\n## 提高应变能力\n\n>程序应对变化的能力强，可扩展性就强，也更容易在变化时保证正确性，这样的程序可维护性强。下面是一些提高程序应变能力的措施。\n>\n>**不要使用常量:**\n>不要使用常量的另一个原因在于常量可能变化，如果程序中多次引入了这个常量，那么一旦这个常量要发生变化，就需要同时改动许多地方，这时候，如果有些地方没有改，就会使程序不一致，可能引入bug。\n>\n>**同一变量名不要有多种含义:**\n>同一变量名不要有多种含义另一个原因在于，多种含义之间可能会相互影响，第一次写程序时你可能记得这些影响，但是以后对程序进行改动的时候，你可能就忘记了。例如函数内一段代码执行后，索引i 的值等于一个长度，但是这段代码后，你没有将i赋值给另一个变量len，而是直接使用它。等过一段时间后，你或者其它人修改这段程序时，很可能忘了这段代码执行后i的值需要等于一个长度，因为这是一种隐式的约定，所以很容易被忽视。\n>\n>**尽可能保证变量作用域小:**\n>保证变量作用域小也有利于重构。当一个函数变得很长时，你可能需要将它分解成多个函数，这时候，如果变量跨度小，就可以很方便地提取函数，不用来回查找与此函数相关的变量的引用。\n>\n>**减少代码重复:**\n>如果有一段代码在很多地方重复，这就告诉你，需要把他们提取成一个函数。因为代码的重复意味着这是一块独立的逻辑，独立的逻辑可以抽象成一个函数。另一方面，一旦这段逻辑需要发生变化，只需要修改这个函数就可以了，不需要把所有地方都手动修改一遍。\n>\n>**数据驱动:**\n>数据驱动的意思是用数据表示来代替程序逻辑。例如，我们需要一个程序，判断某个月有几天，在实现时，最好用一个数组表示各个月的天数，需要哪个月直接查询就好，而不要使用大量的if语句来作逻辑判断。这只是一个小例子，它提醒我们，如果程序中含有大量判断语句，就应该想一想，能不能用数据来驱动逻辑，这样需要修改的时候，我们直接修改数据就好，而不用修改程序逻辑。\n\n我曾经接手过一个项目，这个项目其实是一个工具集，根据用户的选择，调用不同的工具。原始的代码里，就使用了大量if语句，并且每个工具其实调用方式和代码都很相似。这样，我每次添加新工具时，就需要找到多个if语句块，作相应修改。如果用数据驱动的话，我们完全可以去掉这些if语句，在用户的选择与工具之间建立对应关系，这样每当新添加工具时，只需要把工具加到系统里，系统会根据这个表直接找到这个工具。这其实和之前举的盒子的例子很相似，添加新工具时，只需要把工具插到盒子上的槽上，根本不用打开盒子。这就大大提高了程序的可扩展性。\n\n## 控制复杂度\n\n要保证软件的高质量，很重要的一方面在于控制复杂度。控制复杂度的一个很重要的手段在于分解复杂的事物。我们之所以觉得一个事物复杂，是因为同一时间需要关心的事情太多，把复杂事物分解后，每次我们只需要关心很少的事情，这样就控制住了复杂度。\n\n>不要使函数或类过大\n>如果一个函数或类过大，他们会变得过分复杂，你同一时间需要关心许多细节。将函数或类变小之后，你的思维在一段时间内可以集中在同一个抽象层次，而不必过于深入其细节，这样更容易发现程序中的缺陷，因为你每次只需要关心很少的事情。在最高层，你只需要关心模块之间的关系，关心算法的流程，不必关心模块内部的事情。在最低层，你只需要关心一个模块内部的事情，而不必关心其它事情。\n>\n>不要使函数参数过多\n>函数参数过多可能说明这个函数负责了太多的事情，你需要将这个函数分解。另一方面，你需要从逻辑上考虑，这些参数是不是一个整体，如果是一个整体，那么直接传过来一个结构体，或者传过来一个对象，是不是更合适？\n>\n>不要使抽象层次过多\n>如果一个函数或类被分解为过多的抽象层次，在模块内部，你确实只需要关心很小的事情，但是这时候，由于模块过多，抽象层次过深，他们之间的关系又使复杂度增长起来。\n\n## 使用自动化工具\n\n自动化工具迫使我们养成良好的编程习惯，而且不容易出错。再次强调:\n\n`工具越是使用方便，你越会频繁使用它。`\n所以，尽可能地让你的工具使用便捷。 \n例如，使用一些静态检测工具在编辑时自动帮助你检测程序的不良风格；使用重构工具帮助你重构；使用自动化测试工具在保存时自动运行测试等等。\n\n## 注意事项\n\n没有什么事情是一成不变的，所有的法则都需要考虑具体的情况。如果你要用一个法则，需要真正明白自己为什么要用，需要去权衡，而不要为了能用上这个法则而生搬硬套。\n\n好好问问自己：\n\n>* 变化真的存在么?\n* 真的需要抽象么？\n* 真的需要面向对象么？\n* 真的xxx么？\n\n## 参考资料\n\n这篇文章是我这段时间阅读过一些书后的想法，书目有:\n\n>* 代码大全(Code Complete)\n* 重构——改善既有代码的设计(Refactoring Improving the Design of Existing Code)\n* 程序设计实践(The Proactice of Programming)\n\n在阅读这些书的同时，我还在维护其它人的代码，做自己的个人项目。在阅读的过程中，我会不断地想到我做的项目哪里有问题，可以用书中提到的方法去修改，因此印象深刻。这些书单纯读也非常有好处，但是如果可以结合到自己的项目中，会有更大裨益。因为只有产生了强烈的共鸣，才能保证真正理解了一个东西。\n\n上面提到的一些措施，都是我遇到过的，所以印象比较深刻，这几本书中还有大量提高程序质量的方法，我这里只是一个引子，希望给有心人打开一扇窗户。\n\n原文链接 : [Minixalpha Blog](http://minixalpha.github.io/%E6%80%9D%E6%83%B3/2014/01/13/write_high_quality_program.html)\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["编程语言","心得"],"categories":["tips"]},{"title":"Markdown学习入门","url":"/posts/417703024/","content":"\n**锋利的Markdown：**\n\n当前很多博客、论坛都采用Markdown作为发文的首选编辑器，Markdown语言使用起来语法简单、易上手，利于格式排版，而且还易于阅读。\n\n<!--more-->\n\n## 什么是 Markdown\n&emsp;&emsp;Markdown是一种可以使用普通文本编辑器编写的标记语言，通过类似HTML的标记语法，它可以使普通文本内容具有一定的格式。\n\n&emsp;&emsp;Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如Pandoc；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在换行等细节上也有改动。\n\n## 为什么使用 Markdown\n\n>- 语法简单、易于上手\n- 格式排版方便，效率高\n- 看上去不错，易于阅读\n- 既然看上去不错，为什么不去试试呢~~~\n\n## 如何使用 Markdonw\n\n### 标题级别\n\n**显示效果：**\n\n><span style=\"font-size: 40px\">一级标题</span>\n<span style=\"font-size: 30px\">二级标题</span>\n<span style=\"font-size: 20px\">三级标题</span>\n\n**代码演示：**\n\n```\n# 一级标题\n## 二级标题\n### 三级标题\n```\n\n### 列表\n\n**显示效果：**\n\n>* 列表一\n* 列表二\n* 列表三\n\n**代码演示：**\n\n```\n* 列表一\n* 列表二\n* 列表三\n```\n\n### 引用\n\n**显示效果：**\n\n>来试试`Markdown`吧\n\n**代码演示：**\n\n```\n来试试`Markdown`吧\n```\n\n### 代码块引用\n\n**显示效果：**\n\n>def hello(): \nprint 'hello, world'\n\n**代码演示：**\n\n```\n```python\ndef hello(): \nprint 'hello, world'\n``` ```\n\n### 文字引用\n\n**显示效果：**\n\n> 春 眠 不 觉 晓，\n> 处 处 闻 啼 鸟。\n> 夜 来 风 雨 声， \n> 花 落 知 多 少。\n\n**代码演示：**\n\n```\n> 春 眠 不 觉 晓，\n> 处 处 闻 啼 鸟。\n> 夜 来 风 雨 声， \n> 花 落 知 多 少。\n```\n\n\n### 文字\n\n* 斜体\n\n**显示效果：**\n\n这是一个*斜体*\n\n\n**代码演示：**\n\n```\n这是一个*斜体*\n```\n\n* 粗体\n\n**显示效果：**\n\n这是一个**粗体**\n\n\n**代码演示：**\n\n```\n这是一个**粗体**\n```\n\n### 链接\n\n* 网页链接\n\n**显示效果：**\n\n参见Wiki词条[markdown](http://zh.wikipedia.org/wiki/Markdown)\n\n**代码演示：**\n\n```\n参见Wiki词条[Markdown](http://zh.wikipedia.org/wiki/Markdown)\n```\n\n* 图片\n\n**显示效果：**\n\n<div style=\"text-align: center;\">\n![Wikipedia_logo](https://coding.net/u/ibrucekong/p/images/git/raw/master/Wikipedia-logo.png)\n</div>\n\n**代码演示：**\n\n```\n![Wikipedia_logo](https://coding.net/u/ibrucekong/p/images/git/raw/master/Wikipedia-logo.png)\n```\n如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a>\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["Markdown","写作"],"categories":["languages"]},{"title":"Android NDK学习入门教程","url":"/posts/1191879354/","content":"\n**高效的Android NDK开发：**\n\n为了开发的APK更加安全，防止其反编译；为了利用更高效的C/C++库，提高运行速度；为了更好的移植你的APP，应用在多平台上，请跟我一起使用Android NDK吧！\n\n<!--more-->\n\n&emsp;&emsp;Android的NDK开发入门指南.首先说为什么写Android项目要用到NDK开发，这里简单介绍一下其中优点：使用Android NDK主要就是为了提升应用的性能,对于那些对性能要求比较高的app 而言可以使用Android NDK,同时NDK绕过了Android的虚拟机的限制,可以使用一些更加底层的方法或是权限,但是使用Android NDK无论设计的多好,都会增加app的复杂性。\n\n&emsp;&emsp;但是这里我们只是单纯的说一下怎么通过Android进行NDK编程，而不去探讨更深层次的内容，创建一个Android NDK项目一般遵循一下步骤：\n\n## 系统环境\n\n>- Version : 1.0\n- Development platform : Android Studio 1.4 preview2\n- Gradle Version : 2.5\n- Gradle Plugin Version : 1.3.1\n\n## 简介\n\n> 1.创建一个空项目;\n2.在配置<code>NDK</code>路径;\n3.在入口<code>Activity</code>中定义一个<code>native</code>方法;\n4.利用<code>javah</code>生成<code>c</code>的头文件;\n5.在<code>jni</code>目录下新建一个<code>c</code>文件;\n6.引用<code>so</code>文件（没看到<code>so</code>文件）;\n7.加载<code>so</code>文件;\n8.配置布局文件和入口文件。\n\n## 功能介绍\n\n创建一个空的<code>project</code>；\n在<code>local.properties</code>中配置<code>NDK</code>路径：\n\n```groovy\nndk.dir=D\\:\\\\ComSoftwares\\\\android-ndk\nsdk.dir=D\\:\\\\ComSoftwares\\\\android-sdk\n```\n  \n在入口<code>Activity</code>中定义一个<code>native</code>方法:\n\n```java\npublic native String getStringFromNative();\n```\n\n利用<code>javah</code>生成<code>c</code>文件：\n&emsp;&emsp;根据项目路径和编译环境写出下面功能命令行，\n\n```\njavah -d jni -classpath D:\\ComSoftwares\\android-sdk\\platforms\\android-22\\android.jar;..\\..\\build\\intermediates\\classes\\debug com.ndktest.MainActivity\n```\n&emsp;&emsp;在Android Studio中的Terminal控制台中先用<code>cd ../../</code>返回到前两级文件夹，粘贴上面的长串代码，回车执行。会在<code>jni</code>中生成相应的头文件:<code>com_ndktest_MainActivity.h</code>.\n&emsp;&emsp;打开<code>com_ndktest_MainActivity.h</code>可以看到：\n\n```c\n/* DO NOT EDIT THIS FILE - it is machine generated */\n#include <jni.h>\n/* Header for class com_ndktest_MainActivity */\n#ifndef _Included_com_ndktest_MainActivity\n#define _Included_com_ndktest_MainActivity\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n#undef com_ndktest_MainActivity_BIND_ABOVE_CLIENT\n#define com_ndktest_MainActivity_BIND_ABOVE_CLIENT 8L\n#undef com_ndktest_MainActivity_BIND_ADJUST_WITH_ACTIVITY\n#define com_ndktest_MainActivity_BIND_ADJUST_WITH_ACTIVITY 128L\n#undef com_ndktest_MainActivity_BIND_ALLOW_OOM_MANAGEMENT\n#define com_ndktest_MainActivity_BIND_ALLOW_OOM_MANAGEMENT 16L\n#undef com_ndktest_MainActivity_BIND_AUTO_CREATE\n#define com_ndktest_MainActivity_BIND_AUTO_CREATE 1L\n#undef com_ndktest_MainActivity_BIND_DEBUG_UNBIND\n#define com_ndktest_MainActivity_BIND_DEBUG_UNBIND 2L\n#undef com_ndktest_MainActivity_BIND_IMPORTANT\n#define com_ndktest_MainActivity_BIND_IMPORTANT 64L\n#undef com_ndktest_MainActivity_BIND_NOT_FOREGROUND\n#define com_ndktest_MainActivity_BIND_NOT_FOREGROUND 4L\n#undef com_ndktest_MainActivity_BIND_WAIVE_PRIORITY\n#define com_ndktest_MainActivity_BIND_WAIVE_PRIORITY 32L\n#undef com_ndktest_MainActivity_CONTEXT_IGNORE_SECURITY\n#define com_ndktest_MainActivity_CONTEXT_IGNORE_SECURITY 2L\n#undef com_ndktest_MainActivity_CONTEXT_INCLUDE_CODE\n#define com_ndktest_MainActivity_CONTEXT_INCLUDE_CODE 1L\n#undef com_ndktest_MainActivity_CONTEXT_RESTRICTED\n#define com_ndktest_MainActivity_CONTEXT_RESTRICTED 4L\n#undef com_ndktest_MainActivity_MODE_APPEND\n#define com_ndktest_MainActivity_MODE_APPEND 32768L\n#undef com_ndktest_MainActivity_MODE_ENABLE_WRITE_AHEAD_LOGGING\n#define com_ndktest_MainActivity_MODE_ENABLE_WRITE_AHEAD_LOGGING 8L\n#undef com_ndktest_MainActivity_MODE_MULTI_PROCESS\n#define com_ndktest_MainActivity_MODE_MULTI_PROCESS 4L\n#undef com_ndktest_MainActivity_MODE_PRIVATE\n#define com_ndktest_MainActivity_MODE_PRIVATE 0L\n#undef com_ndktest_MainActivity_MODE_WORLD_READABLE\n#define com_ndktest_MainActivity_MODE_WORLD_READABLE 1L\n#undef com_ndktest_MainActivity_MODE_WORLD_WRITEABLE\n#define com_ndktest_MainActivity_MODE_WORLD_WRITEABLE 2L\n#undef com_ndktest_MainActivity_DEFAULT_KEYS_DIALER\n#define com_ndktest_MainActivity_DEFAULT_KEYS_DIALER 1L\n#undef com_ndktest_MainActivity_DEFAULT_KEYS_DISABLE\n#define com_ndktest_MainActivity_DEFAULT_KEYS_DISABLE 0L\n#undef com_ndktest_MainActivity_DEFAULT_KEYS_SEARCH_GLOBAL\n#define com_ndktest_MainActivity_DEFAULT_KEYS_SEARCH_GLOBAL 4L\n#undef com_ndktest_MainActivity_DEFAULT_KEYS_SEARCH_LOCAL\n#define com_ndktest_MainActivity_DEFAULT_KEYS_SEARCH_LOCAL 3L\n#undef com_ndktest_MainActivity_DEFAULT_KEYS_SHORTCUT\n#define com_ndktest_MainActivity_DEFAULT_KEYS_SHORTCUT 2L\n#undef com_ndktest_MainActivity_RESULT_CANCELED\n#define com_ndktest_MainActivity_RESULT_CANCELED 0L\n#undef com_ndktest_MainActivity_RESULT_FIRST_USER\n#define com_ndktest_MainActivity_RESULT_FIRST_USER 1L\n#undef com_ndktest_MainActivity_RESULT_OK\n#define com_ndktest_MainActivity_RESULT_OK -1L\n/*\n * Class:     com_ndktest_MainActivity\n * Method:    getStringFromNative\n * Signature: ()Ljava/lang/String;\n */\nJNIEXPORT jstring JNICALL Java_com_ndktest_MainActivity_getStringFromNative\n  (JNIEnv *, jobject);\n#ifdef __cplusplus\n}\n#endif\n#endif\n```\n在<code>jni</code>中新建一个<code>c</code>文件，将名字命名为：<code>main.c</code>,输入以下内容:\n\n```c\n//\n// Created by Administrator on 2015/8/18.\n//\n#include \"com_ndktest_MainActivity.h\"\n/*\n * Class:     com_ndktest_MainActivity\n * Method:    getStringFromNative\n * Signature: ()Ljava/lang/String;\n */\nJNIEXPORT jstring JNICALL Java_com_ndktest_MainActivity_getStringFromNative\n        (JNIEnv * env, jobject obj){\n    return (*env)->NewStringUTF(env,\"I'm comes from to Native Function!\");\n}\n```\n&emsp;&emsp;如果编译出错，请在jni文件夹中新建一个空的<code>.c</code>文件，比如<code>utils.c</code>。在此我没有碰到错误，所以没有添加空文件\n\n在app目录下的<code>build.gradle</code>中设置库文件名（生成的<code>so</code>文件名--但是我在项目中并未看到有<code>so</code>文件生成）;\n&emsp;&emsp;找到<code>defaultConfig</code>项，添加以下内容：\n\n```groovy\nndk{  \n    moduleName \"MyJni\"  //设置库(so)文件名称  \n} \n```\n\n加载<code>so</code>文件:\n\n```groovy\nstatic {  \n    System.loadLibrary(\"MyJni\");  \n}\n```\n\n配置布局文件和入口文件\n&emsp;&emsp;在此贴出布局的完整代码：\n\n```xml\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                xmlns:tools=\"http://schemas.android.com/tools\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n                android:paddingRight=\"@dimen/activity_horizontal_margin\"\n                android:paddingTop=\"@dimen/activity_vertical_margin\"\n                android:paddingBottom=\"@dimen/activity_vertical_margin\"\n                tools:context=\".MainActivity\" >\n    <TextView\n        android:text=\"@string/hello_world\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/myJni\" />\n</RelativeLayout>\n```\n\nMainActivity的完整代码:\n\n```java\npackage com.ndktest;\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.widget.TextView;\npublic class MainActivity extends Activity {\n    private TextView tv=null;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        tv=(TextView)findViewById(R.id.myJni);\n        tv.setText(getStringFromNative());\n    }\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n    public native String getStringFromNative();\n    static {\n        System.loadLibrary(\"MyJni\");\n    }\n}\n```\n\n## 运行结果\n\n&emsp;&emsp;编译运行可以看到从native方法传过来的值：\n\n<div style=\"text-align: center;\">![ndk](https://coding.net/u/ibrucekong/p/images/git/raw/master/ndk.png)</div>\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["Android","NDK"],"categories":["languages"]},{"title":"Git安装与配置","url":"/posts/3219987363/","content":"**史上最好用的代码托管工具：**\n\n说到代码托管工具，Git绝对是迄今最好用的，它不论项目大小都适用，而且每一个Git克隆都是一个完整的文件库，含有全部历史记录和修订追踪能力，不依赖于网络连接或中心服务器。如果让我给你一个建议，那就是能用Git就不要使用其他（不偏心，谁用谁知道）。\n\n<!--more-->\n\n## Git概念\n\nGit 是一款免费的、开源的、分布式的版本控制系统。旨在快速高效地处理无论规模大小的任何软件工程。每一个Git克隆都是一个完整的文件库，含有全部历史记录和修订追踪能力，不依赖于网络连接或中心服务器。其最大特色就是“分支”及“合并”操作非常快速、简便。\n\n## Git的优势\n\n- 版本库本地化，支持离线提交，相对独立不影响协同开发；\n- 更少的“仓库污染”；\n- 把内容按元数据方式存储，完整克隆版本库；\n- 支持快速切换分支方便合并，比较合并性能好；\n- 布式版本库，无单点故障，内容完整性好。\n\n## Git安装与配置\n\n这里默认你已经有了Github账户，如果没有的话，点击[注册](https://github.com/join?source=header-home)去获取一个即可。这里以Windows演示一下Git的安装与配置：\n\n- 下载Git，进入[官网](https://git-scm.com/)，下载对应平台版本的安装包；\n- 安装Git并配置环境变量；\n  安装Git时会自动将Git配置到环境变量的PATH中，打开Git Bash输入git测试一下，是否安装成功；\n- 打开Git Bash配置用户变量\n```\ngit config --global user.name \"你的GitHub用户名\"\ngit config --global user.email \"你的GitHub注册邮箱\"\n```\n- 生成SSH Key并将公钥放置到Github上；\n在Git Bash中输入以下内容，一路回车即可；\n`ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"`\n打开`C:\\Users\\Administrator\\.ssh`目录，用记事本打开`id_rsa.pub`文件，打开[SSH and GPG Keys](https://github.com/settings/keys)新建一个SSH Key，将记事本中的内容复制到Key对话框中，保存即可；\n- 测试SSH Key是否添加成功；\n回到系统，打开Git Bash，输入以下内容，回车：\n`ssh -T git@github.com`\n出现有 *You've successfully authenticated* 的字样，就表示已经添加成功。\n\n## Git最常用命令\n\n- git init\n- git add\n- git commit\n- git push\n- git pull\n- git clone\n\n下面就可以正常使用Github了，可以使用`git init`初始化一个仓库，使用`git add`方法添加文件到仓库，使用`git commit`提交文件到本地仓库，使用`git push`提交本地仓库到Git服务器上，使用`git pull`拉取Git服务器上的代码，使用`git clone`来克隆服务器上的代码，以及其他高级用法，待后续... hava a good time！","tags":["git"],"categories":["languages"]},{"title":"Git安装与配置","url":"/posts/3219987363/","content":"**史上最好用的代码托管工具：**\n\n说到代码托管工具，Git绝对是迄今最好用的，它不论项目大小都适用，而且每一个Git克隆都是一个完整的文件库，含有全部历史记录和修订追踪能力，不依赖于网络连接或中心服务器。如果让我给你一个建议，那就是能用Git就不要使用其他（不偏心，谁用谁知道）。\n\n<!--more-->\n\n## Git概念\n\nGit 是一款免费的、开源的、分布式的版本控制系统。旨在快速高效地处理无论规模大小的任何软件工程。每一个Git克隆都是一个完整的文件库，含有全部历史记录和修订追踪能力，不依赖于网络连接或中心服务器。其最大特色就是“分支”及“合并”操作非常快速、简便。\n\n## Git的优势\n\n- 版本库本地化，支持离线提交，相对独立不影响协同开发；\n- 更少的“仓库污染”；\n- 把内容按元数据方式存储，完整克隆版本库；\n- 支持快速切换分支方便合并，比较合并性能好；\n- 布式版本库，无单点故障，内容完整性好。\n\n## Git安装与配置\n\n这里默认你已经有了Github账户，如果没有的话，点击[注册](https://github.com/join?source=header-home)去获取一个即可。这里以Windows演示一下Git的安装与配置(以github为例，小伙伴要看准了哦)：\n\n- 下载Git，进入[官网](https://git-scm.com/)，下载对应平台版本的安装包；\n- 安装Git并配置环境变量；\n  安装Git时会自动将Git配置到环境变量的PATH中，打开Git Bash输入git测试一下，是否安装成功；\n- 打开Git Bash配置用户变量\n```\n// 每一行都是一条命令，其中$是命令行的意思，不需要输入$，另外每行的最后的参数也可以不加引号\n$ git config --global user.name \"你的GitHub用户名\"\n$ git config --global user.email \"你的GitHub注册邮箱\"\n```\n- 生成SSH Key并将公钥放置到Github上；\n在Git Bash中输入以下内容，一路回车即可；\n`ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"`\n打开`C:\\Users\\Administrator\\.ssh`目录，用记事本打开`id_rsa.pub`文件，打开[SSH and GPG Keys](https://github.com/settings/keys)新建一个SSH Key，将记事本中的内容复制到Key对话框中，保存即可；\n- 测试SSH Key是否添加成功；\n回到系统，打开Git Bash，输入以下内容，回车：\n`ssh -T git@github.com`\n出现有 *You've successfully authenticated* 的字样，就表示已经添加成功。\n\n***这里扩展一下，如果使用的是coding.net，则需要测试 `$ ssh -T git@git.coding.net` ，如果使用的是gitee.com或者git.oschina.com，则需要测试 `$ ssh -T git@gitee.com`或者`$ ssh -T git@git.oschina.net` ，不同的域名，给予的提示就不一样了 ***\n\n## Git最常用命令\n\n- git init\n- git add\n- git commit\n- git push\n- git pull\n- git clone\n- git status\n- git fetch\n- git stash\n- git stash pop\n- git branch\n- git checkout\n\n下面就可以正常使用Github了，可以使用`git init`初始化一个仓库，使用`git add`方法添加文件到仓库，使用`git commit`提交文件到本地仓库，使用`git push`提交本地仓库到Git服务器上，使用`git pull`拉取Git服务器上的代码，使用`git clone`来克隆服务器上的代码，以及其他高级用法，待后续... hava a good time！\n如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a>\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["git","版本管理"],"categories":["languages"]},{"title":"基于GIS的团队管理系统的简介","url":"/posts/4243991381/","content":"**基于地图的移动团队管理系统：**\n\n团队管理已经从传统的文字通讯，变成了基于地图的移动团队管理系统，让队员实时显示在地图上，系统使用期间还实时上传位置到服务器，便于管理者监督、管理、统计和分析。\n\n<!--more-->\n\n## 什么是TeamManager\n\n<div style=\"text-align: center;\">![team](https://coding.net/u/ibrucekong/p/images/git/raw/master/team.png)</div>\n\n<p>&emsp;&emsp;基于GIS的团队管理Android应用，本系统以Android为移动端平台，采用B/S架构进行Android客户端与服务器端开发，调用百度地图API进行地图开发，综合利用移动端定位技术和数据库技术、移动客户端与服务器端通信技术、WCF技术等实现了系统的各项功能。该系统主要实现的功能包括在实现传统团队管理的任务分发、日志记录、即时通讯的功能基础上，结合移动GIS技术实现对团队内部所有成员的准确实时追踪定位、轨迹回放、周边查询、紧急救援路线导航，同时团队管理员可以实现对内部成员的实时监控和轨迹回放等操作。</p>\n\n## 系统环境\n\n* Version : 1.0\n* Development platform : Android Studio 1.3\n* Gradle Version : 2.5\n* Gradle Plugin Version : 1.3.0\n\n## 功能介绍\n\n<h3 id=\"loginview\">登录界面</h3>\n\n*  包括头像，第一次登录时默认的是系统图标\n*  密码输入窗口\n*  忘记密码功能按钮\n*  注册功能按钮<br>\n\n<div style=\"text-align: center;\">![Login](https://coding.net/u/ibrucekong/p/images/git/raw/master/team-login.gif)</div>\n\n<h3 id=\"mapview\">地图界面</h3>\n\n*  显示当前位置信息\n*  切换显示的地图图层》普通地图 或 遥感图像\n*  是否记录运动轨迹\n*  放大和缩小\n*  查看缩放比例\n*  查找某地区的某位置<br><br>\n\n<div style=\"text-align: center;\">![Map](https://coding.net/u/ibrucekong/p/images/git/raw/master/team-map.gif)</div>\n\n<h3 id=\"teamview\">团队界面</h3>\n\n*  查找想要添加的团队\n*  创建团队\n*  管理员查看并管理团队信息，比如设置位置共享，解散团队（创建者）\n*  创建或查看公告\n*  创建或查看任务\n*  查看团队地图，可以查看到团队中启用位置共享的成员位置\n*  管理团队成员，比如：创建管理员\n*  团队聊天\n*  邀请好友加入当前团队\n*  管理员可以监控团队成员信息<br><br>\n\n<div style=\"text-align: center;\">![Team](https://coding.net/u/ibrucekong/p/images/git/raw/master/team-team.gif)</div>\n\n<h3 id=\"chatview\">通讯界面</h3>\n\n*  查找好友，查看或进行聊天\n*  聊天<br><br>\n\n<div style=\"text-align: center;\">![Chat](https://coding.net/u/ibrucekong/p/images/git/raw/master/team-chat.gif)</div>\n\n<h3 id=\"meview\">个人信息</h3>\n\n*  查看或修改个人信息\n*  签到，签出\n*  我的任务\n*  我的日志\n*  我的日程计划\n*  我的轨迹\n*  我的警示点\n*  我的兴趣点\n*  我的兴趣点热力图<br><br>\n\n<div style=\"text-align: center;\">![Me](https://coding.net/u/ibrucekong/p/images/git/raw/master/team-me.gif)</div>\n\n<h3 id=\"totalview\">整个录屏内容</h3>\n\n*  包含了上面全部的录制过程<br>\n\n<div style=\"text-align: center;\">![Total](https://coding.net/u/ibrucekong/p/images/git/raw/master/team-all.gif) </div>\n如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a>\n<div style=\"text-align: center;padding: 0; margin: 0;\">\n    <img class=\"wechat-qrcode\"  src=\"https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png\" alt=\"关注公众号\">\n</div>","tags":["Android","GIS"],"categories":["languages"]}]