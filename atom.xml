<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ibrucekong</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ibrucekong.github.io/"/>
  <updated>2019-07-17T05:45:25.000Z</updated>
  <id>https://ibrucekong.github.io/</id>
  
  <author>
    <name>ibrucekong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[21] 对3D场景上的3D要素进行点击查询【Query类学习】</title>
    <link href="https://ibrucekong.github.io/posts/2803774187/"/>
    <id>https://ibrucekong.github.io/posts/2803774187/</id>
    <published>2019-07-17T05:45:25.000Z</published>
    <updated>2019-07-17T05:45:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6421503.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6421503.html</a></strong></p><hr><blockquote><p>有人问我怎么这个系列没有写自己做的东西呢？</p><p>大哥大姐，这是“学习笔记”啊！当然主要以解读和笔记为主咯。</p><p>也有人找我要实例代码（不是示例），我表示AJS尚未成熟，现在数据编辑功能才简略地在AJS 4.3中出现，4.2是没有的，widget和分析功能也不是很完善，还是再等等吧，先学着基础，其他的以后再说。</p><p>本节我会紧随这个例子学习一下<strong>Query</strong>这个类，作为图层查询方法的重要参数，它起了传递查询用的信息的作用。</p></blockquote><hr><p>本例对应官方的例子是：Query a SceneLayer’s linked FeatureLayer</p><p>这个例子操作起来很简单，等地图加载完成后，点击对应的3D白色模型，会出现一个popupTemplate弹窗，显示一个表格，为这个大楼的信息。如下图：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201704/1097074-20170406142353144-1899382599.png" alt="img"></p><p>换个视角：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201704/1097074-20170406142509597-1159525681.png" alt="img"></p><p>那我们就开始吧！</p><hr><h1 id="给出引用"><a href="#给出引用" class="headerlink" title="给出引用"></a>给出引用</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([</span><br><span class="line">  <span class="string">"esri/Map"</span>,</span><br><span class="line">  <span class="string">"esri/views/SceneView"</span>,</span><br><span class="line">  <span class="string">"esri/layers/SceneLayer"</span>,</span><br><span class="line">  <span class="string">"esri/layers/FeatureLayer"</span>,</span><br><span class="line">  <span class="string">"esri/tasks/support/Query"</span>,</span><br><span class="line">  <span class="string">"dojo/domReady!"</span></span><br><span class="line">  ],</span><br><span class="line">   <span class="function"><span class="keyword">function</span>(<span class="params">Map, SceneView, SceneLayer, FeatureLayer, Query</span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>数据方面，用到了场景图层和要素图层；</p><p>查询方面，用到了Query模块。</p><h1 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">Map, SceneView, SceneLayer, FeatureLayer, Query</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;...&#125;);</span><br><span class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> SceneView(&#123;...&#125;);</span><br><span class="line">    <span class="keyword">var</span> sceneLayer = <span class="keyword">new</span> SceneLayer(&#123;...&#125;);</span><br><span class="line">    map.add(sceneLayer);</span><br><span class="line">    <span class="keyword">var</span> featureLayer = <span class="keyword">new</span> FeatureLayer(&#123;...&#125;);</span><br><span class="line">    featureLayer.load().then(attributesReady);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">attributesReady</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      ...  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>套路，先把大骨架弄出来，然后逐个击破。</p><p>多了一个场景图层，多了一个要素图层，在要素图层加载完成后进行一个异步操作attributesReady()。</p><p>还算简单，先把map和view的代码看看（太基础了对于看到这里的人来说，我就缩起来了）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span><br><span class="line">  basemap: <span class="string">"dark-gray"</span>,</span><br><span class="line">  ground: <span class="string">"world-elevation"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> view = <span class="keyword">new</span> SceneView(&#123;</span><br><span class="line">  container: <span class="string">"viewDiv"</span>,</span><br><span class="line">  map: map,</span><br><span class="line">  camera: &#123;</span><br><span class="line">    position: &#123;</span><br><span class="line">      x: <span class="number">-8241580</span>,</span><br><span class="line">      y: <span class="number">4964925</span>,</span><br><span class="line">      z: <span class="number">2311</span>,</span><br><span class="line">      spatialReference: <span class="number">3857</span></span><br><span class="line">    &#125;,</span><br><span class="line">    heading: <span class="number">32.5</span>,</span><br><span class="line">    tilt: <span class="number">64.9</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对于view，可以看到除了camera属性外还多了两个属性，这里不作为重点，可以参考API。</p><p>看看两个layer：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sceneLayer = <span class="keyword">new</span> SceneLayer(&#123;</span><br><span class="line">  url: <span class="string">"https://tiles.arcgis.com/tiles/z2tnIkrLQ2BRzr6P/arcgis/rest/services/New_York_LoD2_3D_Buildings/SceneServer/layers/0"</span>,</span><br><span class="line">  popupEnabled: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">map.add(sceneLayer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> featureLayer = <span class="keyword">new</span> FeatureLayer(&#123;</span><br><span class="line">  url: <span class="string">"https://services2.arcgis.com/z2tnIkrLQ2BRzr6P/arcgis/rest/services/New_York_OBJECTID/FeatureServer/0"</span>,</span><br><span class="line">  outFields: [<span class="string">"*"</span>],</span><br><span class="line">  popupTemplate: &#123;</span><br><span class="line">    title: <span class="string">"..."</span>,</span><br><span class="line">    content: [&#123;<span class="attr">type</span>: <span class="string">"fields"</span>&#125;],</span><br><span class="line">    fieldInfos: [&#123;...&#125;, &#123;...&#125;, &#123;...&#125;, &#123;...&#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在我的理解中，sceneLayer应该是绿色的圆锥体，而featureLayer则是用于支持空间查询的数据图层。看得出这里都是使用了ArcGIS Server上的服务。</p><p>featureLayer的弹窗模板较为复杂，不是这里讨论的内容，我就把源代码换成了省略号以精简页面，大概意思就是从featureLayer中获取fields作为弹窗的content，而fieldInfos则是对应字段的输出格式。</p><p>重点应该是下面这个方法体：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">featureLayer.load().then(attributesReady);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">attributesReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    view.on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> screenPoint = &#123;...&#125;;</span><br><span class="line">        view.hitTest(screenPoint)        .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;...&#125;)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params">graphic</span>)</span>&#123;...&#125;)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>)</span>&#123;...&#125;)</span><br><span class="line">        .otherwise(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;...&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逐个击破，首先是的view的click事件，触发该事件后立刻获取当前点击的点screenPoint，并将点传递到hitTest方法中，紧接着就是四层异步操作。</p><p>第一层：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> result = response.results[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> (result &amp;&amp; result.graphic) &#123;</span><br><span class="line">          <span class="keyword">return</span> result.graphic;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>似乎是获取results[0]后判断其是否为空或者其几何属性是否为空，如果不是空，返回其几何属性。</p><p>这里就要查一下了，这个response 是什么东西？而results[0]又是什么？</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201704/1097074-20170406152656082-2142016351.png" alt="img"></p><p>通过查阅SceneView的hitTest()方法，可以得知results[0]也就是result变量就是hitTest的返回值。</p><p>该result变量拥有两个属性，一个是mapPoint，为Point类型；</p><p>另一个是graphic，为Graphic类型。</p><p>前一个属性代表了点击的那个点位置，后面则为点击的要素的几何体。</p><p>如果都不为空，返回几何体，传入下一个then：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">graphic</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> objectid = graphic.attributes.objectid;</span><br><span class="line">  <span class="keyword">var</span> query = <span class="keyword">new</span> Query();</span><br><span class="line">  <span class="comment">//设置query的参数</span></span><br><span class="line">  query.where = <span class="string">"objectid = "</span> + objectid;</span><br><span class="line">  query.returnGeometry = <span class="literal">false</span>;</span><br><span class="line">  query.outFields = [<span class="string">"NAME"</span>, <span class="string">"CNSTRCT_YR"</span>, <span class="string">"LSTMODDATE"</span>,</span><br><span class="line">    <span class="string">"LSTSTATYPE"</span>, <span class="string">"NUM_FLOORS"</span></span><br><span class="line">  ];</span><br><span class="line">  <span class="comment">//执行查询</span></span><br><span class="line">  <span class="keyword">return</span> featureLayer.queryFeatures(query);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>传入的graphic，获取其objectid属性</p><p>然后实例化一个Query对象名为query，设置好where查询语句（应该是SQL语句吧）、是否返回几何体（否）、输出字段信息，就可以执行查询。</p><p>featureLayer的queryFeatures()方法接受Query对象，返回一个类型为FeatureSet的Promise对象。</p><p>这个FeatureSet对象传递给下一个then：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (results &amp;&amp; results.features.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    view.popup.open(&#123;</span><br><span class="line">      features: results.features,</span><br><span class="line">      location: event.mapPoint</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.otherwise(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.error(err);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不要放弃啊！</p><p>因为马上后面就没有代码了~那个otherwise只是Promise对象除了then之外的另一个而已~出错了就用otherwise来处理异常~</p><p>这个then，如果传入的FeatureSet不为空或者FeatureSet里面的features个数&gt;0</p><p>那么就按照featureLayer里写好的格式弹窗显示信息~完事。</p><hr><p>总结一下</p><p>这个例子就是获取点击点——使用query对象进行空间查询——返回FeatureSet——输出其预置好的Popup即可~</p><p>没有上一个那么难了吧~~~</p><p>文章的最后，我来对Query这个对象进行学习：</p><h1 id="Query对象的学习"><a href="#Query对象的学习" class="headerlink" title="Query对象的学习"></a>Query对象的学习</h1><p>查询API得知：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201704/1097074-20170406160441785-1004322264.png" alt="img"></p><p>继承自Accessor，分类在esri/tasks/support/Query下。</p><p>需要注意的是，使用Query类需要在ArcGIS Online或者ArcGIS Server服务的支持下进行。</p><p>翻译官方的解释，意思就是：</p><blockquote><p>Query对象是一些空间查询的参数，它作用于layer对象，通过参数的设置，可以筛选出layer中需要的要素。</p><p>可以使用QueryTask类的excute()方法进行空间查询，也可以在图层实例的queryFeatures()方法中使用Query对象。</p><p>使用它，通常返回结果是FeatureSet对象。</p></blockquote><p>Query类拥有非常多的参数，方法只有一个toJSON()，这个方法是将这个类的实例序列化成JSON而存在的，不做重点介绍。</p><p>参数就摘几个吧：</p><p>distance（Number类型）、geometry（Geometry类型）、num（Geometry类型）、outFields（String[]）、outSpatialReference（SpatialReference）、returnGeometry（Boolean）、units（String）、where（String）</p><p>distance是缓冲区分析的距离；</p><p>geometry是用于空间查询用的几何体；</p><p>num是查询得到的要素个数；</p><p>outFields是查询结果要素集的字段信息；</p><p>outSpatialReference是查询结果要素集的空间参考信息；</p><p>returnGeometry是一个布尔变量，如果为真，那么返回的要素集中每一个要素就会包含几何体；</p><p>units是缓冲区分析的单位；</p><p>where是空间查询用的SQL语句。如:query.where = “NAME = ‘“ + stateName + “‘“;</p><p>如何用它呢？</p><p>给个简单的例子，使用QueryTask的（接下来几篇博文会用到这个）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">"esri/tasks/QueryTask"</span>, <span class="string">"esri/tasks/support/Query"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">QueryTask, Query</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//用URL实例化一个QueryTask，应该是一个服务类型</span></span><br><span class="line">  <span class="keyword">var</span> queryCitiesTask = <span class="keyword">new</span> QueryTask(&#123;</span><br><span class="line">    url: <span class="string">"..."</span>  </span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//实例化一个Query对象</span></span><br><span class="line">  <span class="keyword">var</span> query = <span class="keyword">new</span> Query();</span><br><span class="line">  query.geometry = mapPoint; </span><br><span class="line">  query.distance = <span class="number">100</span>;</span><br><span class="line">  query.units = <span class="string">"miles"</span>;</span><br><span class="line">  query.spatialRelationship = <span class="string">"intersects"</span>;</span><br><span class="line">  queryCitiesTask.execute(query).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">      <span class="comment">//对返回的FeatureSet进行操作</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果是图层的queryFeatures()方法，各位看官请往上翻一翻啦~</p><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[20] 使用缓冲区结合Query对象进行地震点查询【重温异步操作思想】</title>
    <link href="https://ibrucekong.github.io/posts/4035571870/"/>
    <id>https://ibrucekong.github.io/posts/4035571870/</id>
    <published>2019-07-17T05:15:33.000Z</published>
    <updated>2019-07-17T05:15:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6421488.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6421488.html</a></strong></p><hr><p>这个例子相当复杂。我先简单说说这个例子是干啥的。</p><p>在UI上，提供了一个下拉框、两个滑动杆，以确定三个参数，使用这三个参数进行空间查询。这个例子就颇带空间查询的意思了。</p><p>第一个参数是油井类型，第二个参数是油井的缓冲半径，第三个参数是地震级别。</p><p><strong>给定油井的类型，给定油井的缓冲半径（缓冲区分析生成），给定地震级别，就能在油井附近以这个缓冲半径为圆搜索出符合给定地震级别的地震点。</strong></p><blockquote><p>这个例子是干嘛的呢？</p><p>“因为开采油田会导致地下空间坍塌，而引发地震。”</p></blockquote><hr><p>看看搜索结果（随便选的参数）：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170221202328679-1053402606.png" alt="img"></p><p>橙色点即为搜索结果（地震点）。</p><hr><p>给出引用</p><p>话不多说，看看这个例子的引用有多少：</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">require(</span><br><span class="line">    [ </span><br><span class="line">        &quot;esri/Map&quot;,</span><br><span class="line">        &quot;esri/views/MapView&quot;,</span><br><span class="line">        &quot;esri/layers/FeatureLayer&quot;,</span><br><span class="line">        &quot;esri/layers/GraphicsLayer&quot;,</span><br><span class="line">        &quot;esri/geometry/geometryEngine&quot;,</span><br><span class="line">        &quot;esri/Graphic&quot;,</span><br><span class="line">        &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class="line">        &quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;dojo/on&quot;,</span><br><span class="line">        &quot;dojo/dom&quot;,</span><br><span class="line">        &quot;dojo/dom-construct&quot;,</span><br><span class="line">        &quot;dojo/domReady!&quot;</span><br><span class="line">    ],</span><br><span class="line">    function(...)&#123;...&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>用到了两种Layer，FeatureLayer是数据图层，GraphicsLayer是缓冲区图层和结果显示图层。</p><p>为了支持GraphicsLayer的缓冲区，需要用到geometryEngine模块和Graphics模块。</p><p>为了支持结果显示，用到了SimpleFillSymbol模块和SimpleMarkerSymbol模块。</p><p>函数参数骨架</p><p><img src="https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="img"></p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">function(Map, MapView, FeatureLayer, GraphicsLayer, Graphics, SimpleFillSymbol, SimpleMarkerSymbol)</span><br><span class="line">&#123;</span><br><span class="line">    var quakesUrl = &quot;...&quot;;</span><br><span class="line">    var wellBuffer,wellsGeometries,magnitude;</span><br><span class="line"></span><br><span class="line">    //获取dom元素</span><br><span class="line">    var wellTypeSelect = dom.byId(&quot;well-type&quot;);</span><br><span class="line">    var magSlider = dom.byId(&quot;mag&quot;);</span><br><span class="line">    var distanceSlider = dom.byId(&quot;distance&quot;);</span><br><span class="line">    </span><br><span class="line">    //FeatureLayer&amp;GraphicsLayer定义</span><br><span class="line">    var wellsLayer = new FeatureLayer(&#123;...&#125;);</span><br><span class="line">    var quakesLayer = new FeatureLayer(&#123;...&#125;);</span><br><span class="line">    var resultsLayer = new GraphicsLayer(&#123;...&#125;);</span><br><span class="line">    </span><br><span class="line">    var map = new Map(&#123;...&#125;);</span><br><span class="line">    var view = new MapView(&#123;...&#125;);</span><br><span class="line">    view.ui.add(&quot;infoDiv&quot;, &quot;top-right&quot;);</span><br><span class="line">    view.then(function()&#123;...&#125;);</span><br><span class="line"></span><br><span class="line">    //功能方法</span><br><span class="line">    function getValues(response)&#123;...&#125;</span><br><span class="line">    function getUniqueValues(values)&#123;...&#125;</span><br><span class="line">    function addToSelect(values)&#123;...&#125;</span><br><span class="line">    function setWellsDefinitionExpression(newValue)&#123;...&#125;</span><br><span class="line">    function queryForWellGeometries()&#123;...&#125;</span><br><span class="line">    function createBuffer(wellPoints)&#123;...&#125;</span><br><span class="line">    </span><br><span class="line">    //事件</span><br><span class="line">    on(magSlider, &quot;input&quot;, function()&#123;...&#125;);</span><br><span class="line">    on(distanceSlider, &quot;input&quot;, function()&#123;...&#125;);</span><br><span class="line">    on(distanceSlider, &quot;change&quot;, function()&#123;...&#125;);</span><br><span class="line">    on(wellTypeSelect, &quot;change&quot;, function(evt)&#123;...&#125;);</span><br><span class="line">    on(dom.byId(&quot;query-quakes&quot;), &quot;click&quot;, function()&#123;...&#125;);</span><br><span class="line"></span><br><span class="line">    //其余方法</span><br><span class="line">    function queryEarthquakes()&#123;...&#125;</span><br><span class="line">    function displayResults(results)&#123;...&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>可吓坏我了，这么庞大的骨架（script标签就有200+行）。</p><p>经过我一个月的细读，我终于把这些流程大概弄懂了，如下图：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201704/1097074-20170406104208722-1914811263.jpg" alt="img"></p><p>有些地方表述可能不太对。</p><p>分为两块，一块是事件体，另一块是函数体。</p><p>先讲简单的吧，事件体。</p><h1 id="事件体"><a href="#事件体" class="headerlink" title="事件体"></a>事件体</h1><p>wellTypeSelect和distanceSlider这两个dom元素的change事件体都会独立触发createBuffer()函数体，wellTypeSelect事件则会先触发setWellsDefinitionExpression()函数体进行遍历搜索几何体，然后把返回值（地震点的几何体集合wellsGeometries）交给createBuffer()函数体，生成缓冲区。</p><p>意思是只要油井类型（下拉列表的项目改变）和距离滑块改变，缓冲区就要进行重绘。</p><p>distanceSlider的input事件会改变DOM上的数值，为缓冲区半径的数值。</p><p>magSlider的input事件会改变DOM上的数值，为地震级别的数值。</p><p>queryQuakes按钮的click事件会通过已经生成的缓冲区进行叠置分析，搜索缓冲区内的地震点。</p><p>对大量的变量如果不是很懂，这里可以先缓缓，下面的函数体会更详细介绍，事件体主要明白DOM的事件能干啥就行了。</p><h1 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h1><p>有几个函数体是连锁反应的，而且是在MapView的then中进行连锁异步操作的。</p><p>在这里我又不得不提一下异步操作和这个then的用法了。</p><blockquote><p>then的含义就是，等then前面的操作在服务器上做完后，再执行then里面的内容。</p><p>因为js是单线程的解释型语言，不会编译，只会从头到尾一次读下来，所以执行到then前面的代码时，是<strong>不可能停在那里的</strong>。</p><p>then前面的代码执行完肯定有一个类似回执的东西（可以理解为<strong>返回值</strong>），但是浏览器不能一直等待这个回执啊？</p><p>所以就在then里面写一个<strong>回调函数</strong>，丢给服务器，在服务器端等待then前的操作完成后，再<strong>把“返回值”返还给回调函数做</strong>，即可。</p><p>then()里的东西不会立刻在本地执行，在本地等待前一步的操作结果只会让浏览器卡死。</p><p>实际上，我标红的关键词，就是异步操作的思想了。</p></blockquote><p>复习完异步操作和then，我们再看看view的那一串then：</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">view.then(function() &#123;</span><br><span class="line">    return wellsLayer.then(function() &#123;</span><br><span class="line">      var query = wellsLayer.createQuery();</span><br><span class="line">      return wellsLayer.queryFeatures(query);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(getValues)</span><br><span class="line">  .then(getUniqueValues)</span><br><span class="line">  .then(addToSelect)</span><br><span class="line">  .then(createBuffer);</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>我直接给出我的解读：首先，view加载完后，执行第一个then，第一个then返回wellsLayer的空间搜索（queryFeatures()这个方法）结果，这个结果是FeatureSet类型的，名为response。这response在哪用呢？它传递给了getValues()这个方法体：</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function getValues(response) &#123;</span><br><span class="line">  var features = response.features;</span><br><span class="line">  var values = features.map(function(feature) &#123;</span><br><span class="line">    return feature.attributes.STATUS2;</span><br><span class="line">  &#125;);</span><br><span class="line">  return values;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>经查，response确实就是FeatureSet类的实例，通过getValues获取其内所有features的所有STATUS2字段的值，名为values，类型为AJS中的Collection类型。</p><p>values又传递给getUniqueValues()方法体：</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function getUniqueValues(values) &#123;</span><br><span class="line">  var uniqueValues = [];</span><br><span class="line">  values.forEach(function(item, i) &#123;</span><br><span class="line">    if ((uniqueValues.length &lt; 1 || uniqueValues.indexOf(item)===-1) &amp;&amp; (item !== &quot;&quot;)) &#123;</span><br><span class="line">      uniqueValues.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  return uniqueValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>根据某些规则（if语句）遍历values，使用Collection类的forEach方法，然后把遍历结果作为JS的数组返回，名为uniqueValues，传递给</p><p>addToSelect()方法体，实现选择列表这个DOM元素上出现油井类型（option）：</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function addToSelect(values) &#123;</span><br><span class="line">  values.sort();//排序</span><br><span class="line">  values.forEach(function(value) &#123;</span><br><span class="line">    var option = domConstruct.create(&quot;option&quot;);</span><br><span class="line">    option.text = value;</span><br><span class="line">    wellTypeSelect.add(option);//给下拉列表添加选项　　return setWellsDefinitionExpression(wellTypeSelect.value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>不能光添加呀！所以它就return了，方法setWellsDefinitionExpression()的结果。</p><p>setWellsDefinitionExpression()这个方法是设置wellsLayer的SQL查询语句的，但是没完，setWellsDefinitionExpression()这个方法内还有一层return：</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function setWellsDefinitionExpression(newValue) &#123;</span><br><span class="line">  wellsLayer.definitionExpression = &quot;STATUS2 = &apos;&quot; + newValue + &quot;&apos;&quot;;</span><br><span class="line">  if (!wellsLayer.visible) &#123;</span><br><span class="line">    wellsLayer.visible = true;</span><br><span class="line">  &#125;</span><br><span class="line">  return queryForWellGeometries();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function queryForWellGeometries() &#123;</span><br><span class="line">  var wellsQuery = wellsLayer.createQuery();</span><br><span class="line">  return wellsLayer.queryFeatures(wellsQuery)</span><br><span class="line">    .then(function(response) &#123;</span><br><span class="line">      wellsGeometries = response.features.map(function(feature) &#123;</span><br><span class="line">        return feature.geometry;//返回某个要素的几何体</span><br><span class="line">      &#125;);</span><br><span class="line">      return wellsGeometries;//返回所有的几何体（作为集合）</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>queryForWellGeometries()这个方法是setWellsDefinitionExpression()这个方法必定会触发的方法体，它用于搜索wellsLayer中的几何体。</p><h1 id="空间查询要点"><a href="#空间查询要点" class="headerlink" title="空间查询要点"></a>空间查询要点</h1><p>注意到了吗？空间查询是需要某个Layer的query对象的。</p><p>在wellsLayer中，使用createQuery()方法就能返回一个query对象，query对象包含了所有用于空间查询（搜索）用的信息，通过它，才能使用queryFeatures等方法对需要进行空间查询（搜索）的图层进行空间查询（搜索）。</p><p>所以图中的连串的then对应的方法体就已经解释完毕了。（呼呼~不知道各位能不能坚持到这，也不知道各位能不能看懂…）</p><p>还剩三个方法体，createBuffer()、queryEarthQuakes()和displayResults()方法体。</p><p>先来看看<strong>createBuffer()：</strong></p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function createBuffer(wellPoints) &#123;</span><br><span class="line">  var bufferDistance = parseInt(distanceSlider.value);</span><br><span class="line">  var wellBuffers = geometryEngine.geodesicBuffer(wellPoints, [</span><br><span class="line">      bufferDistance</span><br><span class="line">    ], &quot;meters&quot;,</span><br><span class="line">    true);</span><br><span class="line">  wellBuffer = wellBuffers[0];</span><br><span class="line">  var bufferGraphic = new Graphic(&#123;</span><br><span class="line">    geometry: wellBuffer,</span><br><span class="line">    symbol: new SimpleFillSymbol(&#123;</span><br><span class="line">      outline: &#123;</span><br><span class="line">        width: 1.5,</span><br><span class="line">        color: [255, 128, 0, 0.5]</span><br><span class="line">      &#125;,</span><br><span class="line">      style: &quot;none&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">　&#125;);</span><br></pre></td></tr></table></figure><p>　　view.graphics.removeAll();<br>　　view.graphics.add(bufferGraphic);<br>}</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>从DOM元素中获取缓冲区半径，然后用geometryEngine这个工具集（或者叫类，还没到空间分析章节就不说那么多了）中的geodesicBuffer方法产生缓冲区，数据是传入的参数wellPoints，即上面addToSelect()方法中最后一层返回的几何体集合（油井点集合）。</p><p>然后实例化Graphic实例，设置颜色、线宽，然后添加到view中的graphics容器内即可。</p><p>再看queryEarthQuakes()和displayResults()：</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function queryEarthquakes() &#123;</span><br><span class="line">  var query = quakesLayer.createQuery();</span><br><span class="line">  query.where = &quot;mag &gt;= &quot; + magSlider.value;</span><br><span class="line">  query.geometry = wellBuffer;</span><br><span class="line">  query.spatialRelationship = &quot;intersects&quot;;</span><br><span class="line"></span><br><span class="line">  return quakesLayer.queryFeatures(query);</span><br><span class="line">&#125;</span><br><span class="line">function displayResults(results) &#123;</span><br><span class="line">  resultsLayer.removeAll();</span><br><span class="line">  var features = results.features.map(function(graphic) &#123;</span><br><span class="line">    graphic.symbol = new SimpleMarkerSymbol(&#123;</span><br><span class="line">      style: &quot;diamond&quot;,</span><br><span class="line">      size: 6.5,</span><br><span class="line">      color: &quot;darkorange&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">    return graphic;</span><br><span class="line">  &#125;);</span><br><span class="line">  var numQuakes = features.length;</span><br><span class="line">  dom.byId(&quot;results&quot;).innerHTML = numQuakes + &quot; earthquakes found&quot;;</span><br><span class="line">  resultsLayer.addMany(features);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>前一个设置query（又是query！）的信息，返回quakesLayer搜索的结果（看下一个方法，应该是FeatureSet类型的），结果传递给displayResults（在按钮的click事件中通过then异步传递），名为results。</p><p>在后一个方法体中，使用map方法遍历要素中所有几何体，设置线宽和色彩等符号样式，最后在DOM元素上刷新显示搜索得到了多少个地震点“numQuakes earthquakes found”，并在结果图层中添加这些要素，刷新显示。</p><p>最后两个其实就是通过上方生成的缓冲区进行空间查询（搜索），得到结果并刷新显示的过程。</p><hr><p>至此，本例就全部解释完毕了，至于有些变量是什么，看new的类型就知道啦，一路看我的文章应该都懂的。</p><p>————</p><p>感言：一个月了，好拖啊…4.3都出了这么久了，才把这个例子攻克。嗯，接下来的例子就不会那么又臭又长了…</p><h1 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h1><p>本例通过对图层的query对象的使用，以及结合空间分析中的缓冲区（使用geometryEngine），进一步加深了异步操作和遍历的代码理解。</p><p>要说能符合本章空间查询（搜索）的核心代码，也不过是wellsLayer.createQuery()这一句代码和query对象的属性设置了，Graphics的操作（遍历、属性设置）和结果的互相传递都不是本章的重点，所以导致了这个例子阅读困难。</p><p>大致流程为：从featureLayer中获取字段值，并加到下拉选择列表中——选择某个油井类型，设置缓冲半径，后台获取油井的点几何体集合，生成缓冲区——使用缓冲区，和设置好的地震级别，进行空间查询，得到地震点的搜索结果，刷新显示。</p><p>over！</p><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[19] 搜索小部件——使用更多数据源</title>
    <link href="https://ibrucekong.github.io/posts/1025956195/"/>
    <id>https://ibrucekong.github.io/posts/1025956195/</id>
    <published>2019-07-16T10:05:33.000Z</published>
    <updated>2019-07-16T10:05:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6421297.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6421297.html</a></strong></p><hr><p>上一篇中提到，空间搜索小部件是Search这个类的实例化，作为视图的ui属性添加进去后，视图就会出现搜索框了。</p><p>这节的主体代码和上篇几乎一致，区别就在上篇提及的sources属性。</p><p>先看看结果：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170221184946070-197420048.png" alt="img"></p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170221185021257-787665028.png" alt="img"></p><p>由于不太清楚要素图层里有什么东西，随便输了个字母匹配，结果如图，中央出现了一个图案并弹窗。</p><p>开始讲课！</p><hr><p>给出引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"esri/Map"</span>,</span><br><span class="line">      <span class="string">"esri/views/MapView"</span>,</span><br><span class="line">      <span class="string">"esri/widgets/Search"</span>,</span><br><span class="line">      <span class="string">"esri/layers/FeatureLayer"</span>,</span><br><span class="line">      <span class="string">"esri/symbols/PictureMarkerSymbol"</span>,</span><br><span class="line">      <span class="string">"dojo/domReady!"</span></span><br><span class="line">    ], </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>PictureMarkerSymbol是上图中搜索结果的图案所需的模块。</p><p>可见此例子采用了要素图层来进行搜索。</p><p>函数参数骨架</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">Map, MapView, Search, FeatureLayer, PictureMarkerSymbol</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;...&#125;);</span><br><span class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> MapView(&#123;...&#125;);</span><br><span class="line">    <span class="keyword">var</span> searchWidget = <span class="keyword">new</span> Search(&#123;</span><br><span class="line">        ...</span><br><span class="line">        sources: [&#123;...&#125;,&#123;...&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">    view.ui.add(searchWidget, &#123;...&#125;);</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上一节提到Search这个类有一个重要的属性sources，它是Collection类型（同对象数组容器，与.NET中list容器差不多）。</p><p>看看完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">sources: [&#123;</span><br><span class="line">  featureLayer: <span class="keyword">new</span> FeatureLayer(&#123;</span><br><span class="line">    url: <span class="string">"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/CongressionalDistricts/FeatureServer/0"</span>,</span><br><span class="line">    popupTemplate: &#123;</span><br><span class="line">      title: <span class="string">"Congressional District &#123;DISTRICTID&#125; &lt;/br&gt;&#123;NAME&#125;, &#123;PARTY&#125;"</span>,</span><br><span class="line">      overwriteActions: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  searchFields: [<span class="string">"DISTRICTID"</span>],</span><br><span class="line">  displayField: <span class="string">"DISTRICTID"</span>,</span><br><span class="line">  exactMatch: <span class="literal">false</span>,</span><br><span class="line">  outFields: [<span class="string">"DISTRICTID"</span>, <span class="string">"NAME"</span>, <span class="string">"PARTY"</span>],</span><br><span class="line">  name: <span class="string">"Congressional Districts"</span>,</span><br><span class="line">  placeholder: <span class="string">"example: 3708"</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  featureLayer: <span class="keyword">new</span> FeatureLayer(&#123;</span><br><span class="line">    url: <span class="string">"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/US_Senators/FeatureServer/0"</span>,</span><br><span class="line">    popupTemplate: &#123;</span><br><span class="line">      title: <span class="string">"&lt;a href=&#123;Web_Page&#125; target='_blank'&gt; &#123;Name&#125;&lt;/a&gt;, (&#123;Party&#125;-&#123;State&#125;) "</span>,</span><br><span class="line">      overwriteActions: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  searchFields: [<span class="string">"Name"</span>, <span class="string">"Party"</span>],</span><br><span class="line">  suggestionTemplate: <span class="string">"&#123;Name&#125;, Party: &#123;Party&#125;"</span>,</span><br><span class="line">  exactMatch: <span class="literal">false</span>,</span><br><span class="line">  outFields: [<span class="string">"*"</span>],</span><br><span class="line">  name: <span class="string">"Senators"</span>,</span><br><span class="line">  zoomScale: <span class="number">500000</span>,</span><br><span class="line">  resultSymbol: <span class="keyword">new</span> PictureMarkerSymbol(&#123;</span><br><span class="line">    url: <span class="string">"images/senate.png"</span>,</span><br><span class="line">    height: <span class="number">36</span>,</span><br><span class="line">    width: <span class="number">36</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>我这里没有缩起来，原因就是已经很明显了——</p><p>sources给了一个Object数组，数组内有两个{}对象。</p><p>每个{}对象拥有以下属性：【featureLayer，searchFields，suggestionTemplate，exactMatch，outFields，name，zoomScale，resultSymbol】</p><p>查阅API，得知sources接受以下数据类型作为搜索源：</p><blockquote><p>featureLayerSource</p><p>locatorSource</p></blockquote><p>在上面，sources[{…},{…}]中的每个大括号对象就是featureLayerSource类型的。这里有点拗口，featureLayerSource和locatorSource不是js中的类，而是一种“说法”，因为sources接受的是Object数组作为参数，只不过本例以featureLayerSource作为示范而已。</p><blockquote><p>【featureLayerSource】可选参数</p><p>displayField(String)：用于显示结果的字段（名）</p><p>exactMatch(Boolean)：是否精确搜索，默认是否（false）。</p><p>featureLayer(FeatureLayer)：这个参数必须需要，因为是数据源啊。</p><p>searchFields(String[])：用于搜索的字段（名）。</p><p>searchQueryParams(Object)：包括outSpatialReference、returnGeometry、num、outFields、where、maxAllowableOffset、objectIds</p><p>suggestQueryParams(Object)：包括outSpatialReference、returnGeometry、num、outFields、where</p><p>以上两个Object类型的参数不知道是干嘛用的，前一个似乎是搜索时的默认选项，后一个是请求建议时的默认选项（与Search类的suggest()方法有关）？</p><p>suggestionTemplate(String)：displayField有多个时，需要有格式地显示，就用这个。例子：suggestionTemplate: “Name: {OWNER}, Parcel: {PARCEL_ID}”</p></blockquote><p>再看看locatorSource：</p><blockquote><p>【locatorSource】可选参数</p><p>categories(String[])</p><p>countryCode(String)</p><p>localSearchOptions(Object)</p><p>locationToAddressDistance(Number)</p><p>searchTemplate(String)</p><p>locator(Locator)</p><p>singleLineFieldName(String)</p></blockquote><p>关于locatorSource就不说多了，这个数据源是对Locator（定位）类熟练运用才能使用的，因为前面的笔记没有对Locator有多余的描述，故仅仅在此记录。</p><p>回到sources[{…},{…}]的代码部分。</p><p>这样思路就清晰了，使用featureLayerSource作为搜索数据源，就要定义赋值上面提到的属性。</p><p>在featureLayer属性中，使用了popupTemplate方便输出。</p><p>在第二个featureLayerSource中，出现了一个新的东西——“resultSymbol”，它是PictureMarkerSymbol类的属性。查询API:</p><blockquote><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170221195650398-951295257.png" alt="img"></p><p>简单，这就是用一张图片指示出某个点。</p><p>这里用到了url、height、width三个属性，不必说多也知道是什么意思了。常用的属性还有xoffset、yoffset等。</p></blockquote><hr><p>总结一下。</p><p>如何在搜索小部件中使用多源数据呢？</p><p>只需要设置Search类的sources属性即可，可以有两种类型：featureLayerSource和locatorSource。</p><p>注意，虽然是这么说，但是写法上还是属于Object类型的。两个类型都需要设置必要的、可选的属性才能赋给sources属性。</p><p>最后给出完整的官方代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1,maximum-scale=1,user-scalable=no"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Search widget with multiple sources - 4.2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html,</span></span><br><span class="line"><span class="undefined">    body,</span></span><br><span class="line"><span class="undefined">    #viewDiv &#123;</span></span><br><span class="line"><span class="undefined">      padding: 0;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">      height: 100%;</span></span><br><span class="line"><span class="undefined">      width: 100%;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://js.arcgis.com/4.2/esri/css/main.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://js.arcgis.com/4.2/"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">require</span>([</span></span><br><span class="line"><span class="javascript">      <span class="string">"esri/Map"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"esri/views/MapView"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"esri/widgets/Search"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"esri/layers/FeatureLayer"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"esri/symbols/PictureMarkerSymbol"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"dojo/domReady!"</span></span></span><br><span class="line"><span class="javascript">    ], <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">Map</span>,</span></span><br><span class="line"><span class="undefined">      MapView,</span></span><br><span class="line"><span class="undefined">      Search, FeatureLayer, PictureMarkerSymbol) &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span></span><br><span class="line"><span class="javascript">        basemap: <span class="string">"dark-gray"</span></span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> view = <span class="keyword">new</span> MapView(&#123;</span></span><br><span class="line"><span class="javascript">        container: <span class="string">"viewDiv"</span>,</span></span><br><span class="line"><span class="undefined">        map: map,</span></span><br><span class="line"><span class="javascript">        center: [<span class="number">-97</span>, <span class="number">38</span>], <span class="comment">// lon, lat</span></span></span><br><span class="line"><span class="undefined">        scale: 10000000</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> searchWidget = <span class="keyword">new</span> Search(&#123;</span></span><br><span class="line"><span class="undefined">        view: view,</span></span><br><span class="line"><span class="javascript">        allPlaceholder: <span class="string">"District or Senator"</span>,</span></span><br><span class="line"><span class="undefined">        sources: [&#123;</span></span><br><span class="line"><span class="javascript">          featureLayer: <span class="keyword">new</span> FeatureLayer(&#123;</span></span><br><span class="line"><span class="javascript">            url: <span class="string">"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/CongressionalDistricts/FeatureServer/0"</span>,</span></span><br><span class="line"><span class="javascript">            popupTemplate: &#123; <span class="comment">// autocasts as new popupTemplate()</span></span></span><br><span class="line"><span class="javascript">              title: <span class="string">"Congressional District &#123;DISTRICTID&#125; &lt;/br&gt;&#123;NAME&#125;, &#123;PARTY&#125;"</span>,</span></span><br><span class="line"><span class="javascript">              overwriteActions: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;),</span></span><br><span class="line"><span class="javascript">          searchFields: [<span class="string">"DISTRICTID"</span>],</span></span><br><span class="line"><span class="javascript">          displayField: <span class="string">"DISTRICTID"</span>,</span></span><br><span class="line"><span class="javascript">          exactMatch: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">          outFields: [<span class="string">"DISTRICTID"</span>, <span class="string">"NAME"</span>, <span class="string">"PARTY"</span>],</span></span><br><span class="line"><span class="javascript">          name: <span class="string">"Congressional Districts"</span>,</span></span><br><span class="line"><span class="javascript">          placeholder: <span class="string">"example: 3708"</span>,</span></span><br><span class="line"><span class="undefined">        &#125;, &#123;</span></span><br><span class="line"><span class="javascript">          featureLayer: <span class="keyword">new</span> FeatureLayer(&#123;</span></span><br><span class="line"><span class="javascript">            url: <span class="string">"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/US_Senators/FeatureServer/0"</span>,</span></span><br><span class="line"><span class="javascript">            popupTemplate: &#123; <span class="comment">// autocasts as new popupTemplate()</span></span></span><br><span class="line"><span class="xml">              title: "<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;Web_Page&#125;</span> <span class="attr">target</span>=<span class="string">'_blank'</span>&gt;</span> &#123;Name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>, (&#123;Party&#125;-&#123;State&#125;) ",</span></span><br><span class="line"><span class="javascript">              overwriteActions: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;),</span></span><br><span class="line"><span class="javascript">          searchFields: [<span class="string">"Name"</span>, <span class="string">"Party"</span>],</span></span><br><span class="line"><span class="javascript">          suggestionTemplate: <span class="string">"&#123;Name&#125;, Party: &#123;Party&#125;"</span>,</span></span><br><span class="line"><span class="javascript">          exactMatch: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">          outFields: [<span class="string">"*"</span>],</span></span><br><span class="line"><span class="javascript">          name: <span class="string">"Senators"</span>,</span></span><br><span class="line"><span class="undefined">          zoomScale: 500000,</span></span><br><span class="line"><span class="javascript">          resultSymbol: <span class="keyword">new</span> PictureMarkerSymbol(&#123;</span></span><br><span class="line"><span class="javascript">            url: <span class="string">"images/senate.png"</span>,</span></span><br><span class="line"><span class="undefined">            height: 36,</span></span><br><span class="line"><span class="undefined">            width: 36</span></span><br><span class="line"><span class="undefined">          &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;]</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// Add the search widget to the top left corner of the view</span></span></span><br><span class="line"><span class="undefined">      view.ui.add(searchWidget, &#123;</span></span><br><span class="line"><span class="javascript">        position: <span class="string">"top-right"</span></span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"viewDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意与html同级别下有一个image文件夹，里面存有senate.png图片文件。</p><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[18] 搜索小部件</title>
    <link href="https://ibrucekong.github.io/posts/1253246298/"/>
    <id>https://ibrucekong.github.io/posts/1253246298/</id>
    <published>2019-07-16T04:50:33.000Z</published>
    <updated>2019-07-16T04:50:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6421297.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6421297.html</a></strong></p><hr><p>这个例子很简单，作为开学后（暴露出学生党的本质）的开胃菜是再合适不过了。</p><p>不过，博主提前警告一下：接下来的例子会相当的长、烦、难。我还会用“引用”-“函数参数骨架”-“逐级分解代码”的模式，从上往下解读一些更难的AJS代码。</p><p>现在上课！</p><hr><p>空间查询，是GIS的一个重头戏，除了基础定义（坐标系统、投影、符号等）、数据准备外，紧接着就是空间查询和下一章的空间分析。</p><p>对于AJS的小部件，我们已经接触了两个了，如2D地图中的指北针和上一章的弹窗（Popup）。这个例子也是小部件的应用，名为：“Search”。</p><p>本例是最普通的空间查询，即在3D地图中搜索地物。</p><p>举例：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170221102241366-1147368868.jpg" alt="img"></p><p>在搜索小部件中输入上海，结果就会以goTo()动画跳转到搜索结果中。</p><p>给出引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"esri/Map"</span>,</span><br><span class="line">      <span class="string">"esri/views/SceneView"</span>,</span><br><span class="line">      <span class="string">"esri/widgets/Search"</span>,</span><br><span class="line">      <span class="string">"dojo/domReady!"</span></span><br><span class="line">    ], </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">Map, SceneView, Search</span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>可以看到，使用了widgets/Search引用。</p><p>函数参数骨架</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">Map, SceneView, Search</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> map = <span class="built_in">Map</span>(&#123;...&#125;);</span><br><span class="line">    <span class="keyword">var</span> view = SceneView(&#123;...&#125;);</span><br><span class="line">    <span class="keyword">var</span> searchWidget = <span class="keyword">new</span> Search(&#123;...&#125;);</span><br><span class="line">    view.ui.add(searchWidget, &#123;...&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是很简单？</p><p>在常规的map和view实例化后，实例化一个Search对象，名为searchWidget，然后在view.ui属性中添加即可，空间搜索原来这么容易？</p><p>我们展开Search({…})和add()中的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchWidget = <span class="keyword">new</span> Search(&#123;</span><br><span class="line">    view: view</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">view.ui.add(searchWidget, &#123;</span><br><span class="line">    position: <span class="string">"top-left"</span>,</span><br><span class="line">    index: <span class="number">0</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>要不要太简单？</p><p>Search()中是把view属性绑定到上方的view对象，add()中是确定搜索小部件的位置信息。</p><p>于是这个例子就完了。</p><hr><p>查阅API：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170221103230023-1641279865.png" alt="img"></p><p>Search是个类，继承自Accessor类。</p><p>它提供了为地图搜索地物的功能，对于要素图层，用空间查询更佳。</p><p>它显示为：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170221103307085-370152159.png" alt="img"></p><p>它的属性和方法很多，列举几个：</p><p>属性：view、popupTemplate、sources、viewModel、container，等等。</p><p>方法：on()、search()、clear()、destroy()，等等。</p><p>可以看出，Search类支持定义弹窗模板。</p><p>view.ui</p><p>ui是DefaultUI类的属性，在MapView的帮助文档中，查阅得到常用的方法是：</p><p>add()、remove()、move()、empty()。</p><p>而DefaultUI类继承自UI类，UI类继承自Accessor类。</p><p>add()方法接受两个参数，前一个参数是html元素（组），这里是searchWidget；后一个参数是小部件的位置，有两个可选参数：position和index。</p><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
  </entry>
  
  <entry>
    <title>吾爱破解论坛2019年07月21日开放注册通知</title>
    <link href="https://ibrucekong.github.io/posts/4173973714/"/>
    <id>https://ibrucekong.github.io/posts/4173973714/</id>
    <published>2019-07-08T14:01:05.000Z</published>
    <updated>2019-07-08T14:01:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>吾爱破解论坛注册喜讯：</strong><br>吾爱开放注册来了，此次是2019年第二次开放注册，在今年前一次未能成功上车的小伙伴，这次可要抓住了，又是正值周末，又是天时地利人和，赶快整理好自己的注册资料。</p><a id="more"></a><div style="text-align: center;font-weight: bold;font-size: 2rem; color: red"><br>    喜讯、喜讯、喜讯<br></div><div style="text-align: center;font-weight: bold;font-size: 1.5rem"><br>    <span>吾爱破解论坛开通开放注册</span><br>    <span>2019年07月21日12:00-14:00和20:00-22:00</span><br></div><div style="text-align: center;font-weight: bold;font-size: 1.5rem;padding-top: 0;margin-top: 0;height: 106px;line-height: 106px"><a href="https://www.52pojie.cn/?fromuid=575811" style="text-align: center;" target="_blank" rel="noopener">我要吾爱</a></div><br><div></div><br><strong><em>注册注意事项：</em></strong><br><br>1. 吸取上次上车失败的教训！！！<br>2. 注意不要错过注册时间<br>3. 认真读注册须知（需要等10分钟）<br>4. 事先把注册信息写在本子或word里（独一无二的邮箱和用户名） <a href="https://www.52pojie.cn/misc.php?mod=faq&amp;action=faq&amp;id=15&amp;messageid=16" target="_blank" rel="noopener">需要准备什么</a><br>5. 耐心检查填写内容（看是否都符合要求）<br>6. 邮箱验证阶段，有的要到邮箱的垃圾箱中查看有没有验证邮件，而有的邮箱则需要设置白名单才能收到验证邮件 <a href="https://www.52pojie.cn/thread-98585-1-1.html" target="_blank" rel="noopener">帮助</a><br>7. 提醒一下，在注册成功后，要记得保持活跃度哦，不要只在官网签到，还要有互动（发帖、回复），不然会被清理的。<br><br><div style="text-align: center;font-weight: bold;font-size: 1.5rem"><br>    祝愿小伙伴们都能获得自己的吾爱账号！<br></div><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;吾爱破解论坛注册喜讯：&lt;/strong&gt;&lt;br&gt;吾爱开放注册来了，此次是2019年第二次开放注册，在今年前一次未能成功上车的小伙伴，这次可要抓住了，又是正值周末，又是天时地利人和，赶快整理好自己的注册资料。&lt;/p&gt;
    
    </summary>
    
      <category term="tips" scheme="https://ibrucekong.github.io/categories/tips/"/>
    
    
      <category term="活动" scheme="https://ibrucekong.github.io/tags/%E6%B4%BB%E5%8A%A8/"/>
    
      <category term="吾爱破解" scheme="https://ibrucekong.github.io/tags/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[17] 官方第七章Searching（空间查询）概览与解释</title>
    <link href="https://ibrucekong.github.io/posts/3843056894/"/>
    <id>https://ibrucekong.github.io/posts/3843056894/</id>
    <published>2019-05-20T05:45:03.000Z</published>
    <updated>2019-05-20T05:45:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6399661.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6399661.html</a></strong></p><hr><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170214232725691-569666059.png" alt="img"></p><p>空间分析和空间查询是WebGIS有别于其他Web平台的特点。到这一章，就开始步入空间分析的内容了。</p><p>【Search widget】</p><p>介绍空间查询的核心小部件“Search”。</p><p>【Search widget with multiple sources】</p><p>在多种信息源中进行空间搜索。</p><p>【Query features from a FeatureLayer】</p><p>这个是在要素图层中进行查询。注意，查询（Query）和搜索（Search）的区别。</p><p>（其实我也不是很清楚这个的界限）</p><p>感觉查询就是在地理数据层面的遍历，结果是定制的。而搜索更强调单规则的查找。</p><p>这个例子用地震地点来做示范，半径可以指定，地震级别也可以指定。</p><p>【SceneLayer - query a linked FeatureLayer】</p><p>这个例子比较复杂。</p><p>在3D视图下进行点击后，把点击到的点映射到2D的FeatureLayer上，然后进行信息查询，然后把查询的结果用弹窗的形式显示出来。</p><p>【Qurey using QueryTask】</p><p>这个例子是用QueryTask这个类来进行空间查询。具体和上面的有什么不同，到代码中就知道了。</p><p>【Use FindTask without a map】</p><p>这个例子比较清新脱俗，没有地图的情况下，进行查询，结果也不在地图上显示，而在表格中显示。是基于什么原理呢？</p><p>【IdentifyTask】</p><p>识别任务“IdentifyTask”，一个类。识别结果在弹窗中显示。</p><hr><p>最后三个例子有个共同点，就是都有“Task”，Task是一个类，继承自Accessor。学习后进行补充。</p><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
      <category term="AAJ4.2" scheme="https://ibrucekong.github.io/tags/AAJ4-2/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[16] 弹窗自定义功能按钮及为要素自定义按钮（第五章完结）</title>
    <link href="https://ibrucekong.github.io/posts/2525638783/"/>
    <id>https://ibrucekong.github.io/posts/2525638783/</id>
    <published>2019-05-20T05:21:33.000Z</published>
    <updated>2019-05-20T05:21:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6399657.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6399657.html</a></strong></p><hr><p>这节对Popups这一章的最后两个例子进行介绍和解析。</p><p>第一个【Popup Actions】介绍了弹窗中如何自定义工具按钮（名为actions），以PopupTemplate+FeatureLayer的形式测量要素的长度为例子进行介绍。</p><p>第二个【Custom popup actions per feature】则是上一个的升级，如果说上一个例子的功能是写死的，那么这个例子就把这个功能写活了。什么意思呢？上个例子的测距仅仅能测距，没有什么别的特别的。而这个例子以啤酒店的分布（点要素图层）为例，在自定义的按钮中弹出在谷歌搜索的结果甚至弹出这个啤酒店的网站。</p><blockquote><p>actions是什么？</p><p>actions是Popup类的一个属性，类型是Collection，即同类型AJS对象或原生JS对象的数组容器。</p><p>它能装什么？</p><p>能装一些“动作”，这些动作在点击弹窗左下角按钮时，会触发这个容器中的“动作”。每个弹窗都有一个默认的“动作”，就是“Zoom-To”缩放功能，就是一个小放大镜。</p></blockquote><p>看第一个例子的结果：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170216230111816-28231111.png" alt="img"></p><p>按下弹窗中的小测距尺子按钮后，灰色文字条中就出现了这个红色线要素的长度：11.82miles。</p><p>看第二个例子的结果：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170216230445457-1130746483.png" alt="img"></p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170216230650722-845370568.png" alt="img"></p><p>按下按钮后就会弹出谷歌搜索的结果。</p><p>来看代码解析吧！</p><hr><p>【Part I 简单action：测距】</p><p>给出引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"esri/Map"</span>,</span><br><span class="line">      <span class="string">"esri/layers/FeatureLayer"</span>,</span><br><span class="line">      <span class="string">"esri/views/MapView"</span>,</span><br><span class="line">      <span class="string">"esri/geometry/geometryEngine"</span>,</span><br><span class="line">      <span class="string">"dojo/domReady!"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">...</span>)</span>&#123;...&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>多了个geometryEngine，暂时不管它是干啥用的，继续往下看。</p><p>事先说明一下，CDN的引用又多了一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://js.arcgis.com/4.2/dijit/themes/claro/claro.css&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://js.arcgis.com/4.2/esri/css/main.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://js.arcgis.com/4.2/&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>函数参数骨架</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">Map, FeatureLayer, MapView, geometryEngine</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;...&#125;);</span><br><span class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> MapView(&#123;...&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> measureThisAction = &#123;...&#125;;</span><br><span class="line">    <span class="keyword">var</span> template = &#123;...&#125;;</span><br><span class="line">    featureLayer =<span class="keyword">new</span> FeatureLayer(&#123;...&#125;);</span><br><span class="line">    map.add(featureLayer);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">measureThis</span>(<span class="params"></span>)</span>&#123;...&#125;;</span><br><span class="line">    view.popup.on(<span class="string">"trigger-action"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;...&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>套路依旧，map和view实例化。var的template是PopupTemplate对象赋给了featureLayer的popupTemplate属性，再把featureLayer丢进map中。</p><p>好了，其余陌生的是什么？measureThisAction这个对象、measureThis这个方法、和view.popup.on方法？</p><p>别急，一个一个来。</p><p>measureThisAction出现的地方一一揪出来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> measureThisAction = &#123;</span><br><span class="line">  title: <span class="string">"Measure Length"</span>,</span><br><span class="line">  id: <span class="string">"measure-this"</span>,</span><br><span class="line">  image: <span class="string">"Measure_Distance16.png"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> template = &#123;</span><br><span class="line">  title: <span class="string">"Trail run"</span>,</span><br><span class="line">  content: <span class="string">"&#123;name&#125;"</span>,</span><br><span class="line">  actions: [measureThisAction]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>OK了，很明显，measureThisAction是一个Object，有title、id和image，分别对应标题、ID和按钮上的图案。这个png文件在html的同级别目录下。</p><p>下面这个template是featureLayer的PopupTemplate属性所需的对象，有title、content，第三个actions属性就将上方的measureThisAction赋给了它（数组形式，因为是Collection类型）。</p><p>可以理解如下：</p><p>measureThisAction是一个“动作”的声明，本身无功能，可以说是一个UI层上的描述。</p><p>————</p><p>那么measureThis()这个方法呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">measureThis</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> geom = view.popup.selectedFeature.geometry;</span><br><span class="line">  <span class="keyword">var</span> distance = geometryEngine.geodesicLength(geom, <span class="string">"miles"</span>);</span><br><span class="line">  distance = <span class="built_in">parseFloat</span>(<span class="built_in">Math</span>.round(distance * <span class="number">100</span>) / <span class="number">100</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">  view.popup.content = view.popup.selectedFeature.attributes.name +</span><br><span class="line">    <span class="string">"&lt;div style='background-color:DarkGray;color:white'&gt;"</span> + distance +</span><br><span class="line">    <span class="string">" miles.&lt;/div&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里出现了新玩意儿：popup类的selectedFeature属性以及其子属性geometry/attributes，geometryEngine类的geodesicLength方法。</p><p>查询API，解读一下：</p><blockquote><p>selectedFeature属性类别：Graphic类，当前选择的要素。</p><p>所以Graphic的geometry和attributes属性就容易查到：</p><p>geometry：几何体，没什么好说的。类型：Geometry类。</p><p>attributes：要素的字段名和字段值的成对集合。</p><p>————</p><p>geodesicLength()：计算传入几何体（Geometry）的长度。</p></blockquote><p>于是这个方法就是：获取几何体，然后把长度用geodesicLength()计算出来，单位是miles。然后设定popup的content动态设置为获取的要素长度值。</p><p>————</p><p>那么view.popup.on()这个方法呢？</p><p>看看完整的方法体：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">view.popup.on(<span class="string">"trigger-action"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.action.id === <span class="string">"measure-this"</span>) &#123;</span><br><span class="line">    measureThis();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>已经灰常、灰常灰常明显了，在popup这个类的“trigger-action”事件上，绑定一个事件方法体：如果“触发”的“动作（action）”的id是“measure-this”，那么执行measureThis()方法执行测距并输出到popup的content上。</p><p>于是，这个trigger-action是什么？</p><blockquote><p>trigger-action是popup的事件的一种，和普通的click事件是一样的，意义就是popup的“当动作（action）被触发时”。click即“当鼠标点击时”。</p><p>而Popup的triggerAction()方法则接受一个索引，去触发trigger-action这个事件，然后执行索引对应的action。</p></blockquote><p>现在明白了吧！</p><p>总结一下。</p><p>想要自己弄个按钮在弹窗上，就要：告诉AJS我要创建一个按钮，这个按钮能做什么事情。</p><p>第一步，创建一个按钮，使用Object对象measureThisAction来创建，并添加到PopupTemplate的actions属性中（数组形式）。</p><p>第二步，写出这个按钮的事件方法measureThis，然后把它绑定到trigger-action事件上。</p><hr><p>【Part II 为按钮定制更高级的独特的功能】</p><p>节约篇幅，引用和函参骨架一起给出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(</span><br><span class="line">    [ </span><br><span class="line">        <span class="string">"esri/Map"</span>,<span class="string">"esri/views/MapView"</span>,<span class="string">"esri/layers/FeatureLayer"</span>,<span class="string">"dojo/domReady!"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">Map,MapView,FeatureLayer</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;&#125;);</span><br><span class="line">        <span class="keyword">var</span> view = <span class="keyword">new</span> MapView(&#123;&#125;);</span><br><span class="line">        <span class="keyword">var</span> featureLayer = <span class="keyword">new</span> FeatureLayer(&#123;</span><br><span class="line">            ...</span><br><span class="line">            definitionExpression: <span class="string">"country = 'United States'"</span>,</span><br><span class="line">            popupTemplate: &#123;</span><br><span class="line">                  ...</span><br><span class="line">                  actions: [&#123; <span class="attr">id</span>: <span class="string">"find-brewery"</span>, <span class="attr">image</span>: <span class="string">"beer.png"</span>,<span class="attr">title</span>: <span class="string">"Brewery Info"</span>&#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        map.add(featureLayer);</span><br><span class="line">        view.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> popup = view.popup;</span><br><span class="line">            popup.viewModel.on(<span class="string">"trigger-action"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;...&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>鉴于JavaScript的语法特性及面向对象的特性，Part I的很多对象、方法参数都直接用{}赋值了。</p><p>可以看到仍然是map和view的实例化，用的也是featureLayer和actions，actions不是[对象名]而是[{}]这种写法给定，不过并没有什么实质性的区别。</p><p>然后把featureLayer添加到map中去。</p><p>最后和Part I就有所不同了，Part I是view.popup.on(“trigger-action”, function(event){…})</p><p>而这里Part II，则是在view的回调函数中先获取popup，然后使用popup.viewModel.on(“trigger-action”, function(event){…})</p><p>我们暂时不看这有什么区别，先看看这个function(event){…}做了什么：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">popup.viewModel.on(<span class="string">"trigger-action"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.action.id === <span class="string">"find-brewery"</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> attributes = popup.viewModel.selectedFeature.attributes;</span><br><span class="line">    <span class="keyword">var</span> info = attributes.website;</span><br><span class="line">    <span class="keyword">if</span> (info !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">window</span>.open(info.trim());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.open(<span class="string">"https://www.google.com/search?q="</span> +</span><br><span class="line">        attributes.name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>仍和Part I没有什么区别，同样是获取一些信息，若info存在则直接打开，若不存在则到Google上搜索这个关键词，即如果选择的啤酒店有网站链接，那么就跳转到这个网站；如果啤酒店没有网站，就给出谷歌的搜索页面。</p><p>所以我觉得，popup.viewModel.on()的写法和view.popup.on()的写法没什么不同，多一层引用而已。</p><p>我们最后到官方的例子中看看有什么遗漏的信息：</p><p>没有。说明这两个写法应该是通用的？留个标记，以后测试。</p><p>至此，第五章也结束了学习，这一章是我比较忙的时候写的，可能读起来比较费劲，各位看官还请见谅。</p><p>在下一章”Searching”即空间查询中，我将转换一下心情，写出更好的笔记来学习AJS 4.2。</p><p>空间查询的代码量会激增，而AJS 4.3发布也快了，所以学习AJS 4.2的时间也不多了，新版本出来必定有新特性，我也会保持跟进继续更新4.3的新特性，并予以解读、测试。</p><p>下一章再见！</p><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
      <category term="AAJ4.2" scheme="https://ibrucekong.github.io/tags/AAJ4-2/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[15] 弹窗内容的格式与自定义格式</title>
    <link href="https://ibrucekong.github.io/posts/2569294447/"/>
    <id>https://ibrucekong.github.io/posts/2569294447/</id>
    <published>2019-05-19T10:07:17.000Z</published>
    <updated>2019-05-19T10:07:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6399654.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6399654.html</a></strong></p><hr><p>先看结果截图吧（不看过程可以直接看总结，在文末）：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170216220724925-1083796722.png" alt="img"><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170216221103347-539459134.png" alt="img"></p><p>随便点击了两个城市斑块，出现结果如图。</p><p>我来解读一下这结果和以前的有什么不同：</p><p>这个例子使用了PopupTemplate，数据是Layer（使用PortalID创建的Layer）。</p><p>但是我们看到图中有个地方不同：当Percent change is这个东西是负数的时候，就是红色+红色下箭头，反之则是绿色字+绿色上箭头。</p><p>实际上，这两个箭头是两个png图片。</p><p>见html同目录下的两个文件：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170216221348238-1965855856.png" alt="img"></p><p>所以说，这种特定格式，能随着数字正负自动判断使用什么图片、什么样式的content是怎么实现的呢？</p><p>解读开始。</p><hr><h1 id="一、给出引用（用到的模块）"><a href="#一、给出引用（用到的模块）" class="headerlink" title="一、给出引用（用到的模块）"></a>一、给出引用（用到的模块）</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">"esri/Map"</span>, <span class="string">"esri/views/MapView"</span>, <span class="string">"esri/layers/Layer"</span>,</span><br><span class="line">        <span class="string">"dojo/dom"</span>, <span class="string">"dojo/number"</span>, <span class="string">"dojo/on"</span>, <span class="string">"dojo/domReady!"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="二、函数参数（第二参数-回调函数）"><a href="#二、函数参数（第二参数-回调函数）" class="headerlink" title="二、函数参数（第二参数/回调函数）"></a>二、函数参数（第二参数/回调函数）</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">Map, MapView, Layer, dom, number, on</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;...&#125;);</span><br><span class="line">    <span class="keyword">var</span> view = MapView(&#123;...&#125;);</span><br><span class="line">    Layer.fromPortalItem(&#123;...&#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">layer</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            map.add(layer);</span><br><span class="line">            <span class="keyword">var</span> popupTemplate = &#123;...&#125;;</span><br><span class="line">            layer.popupTemplate = popupTemplate;</span><br><span class="line">            populationChange = <span class="function"><span class="keyword">function</span>(<span class="params">...</span>)</span>&#123;...&#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>省略了部分代码。在Layer.fromPortalItem返回的Promise对象中，使用了then()方法回调一个函数，操作此Promise返回的layer对象。</p><p>首先使用map的add()方法添加layer到地图中去。</p><p>然后是定义一个popupTemplate，并赋给layer的popupTemplate属性。</p><p>到这里，都很正常，问题是，</p><p>到现在为止都没说那个自定义的content是怎么弄的？后面的populationChange方法又是干什么用的？</p><h1 id="三、popupTemplate的content属性"><a href="#三、popupTemplate的content属性" class="headerlink" title="三、popupTemplate的content属性"></a>三、popupTemplate的content属性</h1><p>直接看下文代码块中的content属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> popupTemplate = &#123;</span><br><span class="line">  title: <span class="string">"Population in &#123;NAME&#125;"</span>,</span><br><span class="line">  content: <span class="string">"As of 2010, the population in this area was &lt;b&gt;&#123;POP2010:NumberFormat&#125;&lt;/b&gt; "</span> +</span><br><span class="line">    <span class="string">"and the density was &lt;b&gt;&#123;POP10_SQMI:NumberFormat&#125;&lt;/b&gt; sq mi. "</span> +</span><br><span class="line">    <span class="string">"As of 2013, the population here was &lt;b&gt;&#123;POP2013:NumberFormat&#125;&lt;/b&gt; "</span> +</span><br><span class="line">    <span class="string">"and the density was &lt;b&gt;&#123;POP13_SQMI:NumberFormat&#125;&lt;/b&gt; sq mi. &lt;br/&gt; &lt;br/&gt;"</span> +</span><br><span class="line">    <span class="string">"Percent change is &#123;POP2013:populationChange&#125;"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到，有5个{}在content中，也就是说有5个值是动态变化的，在弹窗时会改变。</p><p>前4个使用的格式是NumbreFormat，当然这个是可以指定一个方法给它的，</p><p>就是第5个{}中的POP2013字段，它的格式就指定为了populationChange方法。我们来看看populationChange方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">populationChange = function(value, key, data) &#123;</span><br><span class="line">  var diff = data.POP2013 - data.POP2010;</span><br><span class="line">  var pctChange = (diff * 100) / data.POP2010;</span><br><span class="line">  var result = diff &gt; 0 ? &quot;up.png&quot; : &quot;down.png&quot;;</span><br><span class="line"></span><br><span class="line">  return &quot;&lt;img src=&apos;&quot; + result + &quot;&apos;/&gt;&quot; +</span><br><span class="line">    &quot;&lt;span style=&apos;color: &quot; +</span><br><span class="line">    (pctChange &lt; 0 ? &quot;red&quot; : &quot;green&quot;) + &quot;;&apos;&gt;&quot; +</span><br><span class="line">    number.format(pctChange, &#123;</span><br><span class="line">      places: 3</span><br><span class="line">    &#125;) +</span><br><span class="line">    &quot;%&lt;/span&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>result中有一个三元判断符 “A?B:C”，意思是若A为真，则选择B作为结果，否则选择C。</p><p>看样子就知道diff就是变化数了，它&gt;0就”up.png”，否则就”down.png”。</p><p>返回一串html代码，看就知道是什么了，这与我们在开头看到的例子的结果一致。</p><p>这个方法的参数中data即各个字段的集合。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>popupTemplate的content中如何用自己的规则去控制样式？</p><p>这样即可对变化值进行格式自定义控制：</p><p>content: “…{字段：Function名}…”</p><p>在代码后补全同名方法即可。</p><p>就是这么简单！熟悉html组织文本样式的童鞋就能创造更多好看复杂的样式了。</p><p>给出源代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=1,user-scalable=no&quot;&gt;</span><br><span class="line">  &lt;title&gt;PopupTemplate Function - 4.2&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://js.arcgis.com/4.2/esri/css/main.css&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;https://js.arcgis.com/4.2/&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    html,</span><br><span class="line">    body,</span><br><span class="line">    #viewDiv &#123;</span><br><span class="line">      padding: 0;</span><br><span class="line">      margin: 0;</span><br><span class="line">      height: 100%;</span><br><span class="line">      width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var populationChange;</span><br><span class="line">    require([</span><br><span class="line">        &quot;esri/Map&quot;,</span><br><span class="line">        &quot;esri/views/MapView&quot;,</span><br><span class="line">        &quot;esri/layers/Layer&quot;,</span><br><span class="line">        &quot;dojo/dom&quot;,</span><br><span class="line">        &quot;dojo/number&quot;,</span><br><span class="line">        &quot;dojo/on&quot;,</span><br><span class="line">        &quot;dojo/domReady!&quot;</span><br><span class="line">      ],</span><br><span class="line">      function(</span><br><span class="line">        Map, MapView, Layer,</span><br><span class="line">        dom, number, on</span><br><span class="line">      ) &#123;</span><br><span class="line">        var map = new Map(&#123;</span><br><span class="line">          basemap: &quot;dark-gray&quot;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        // Create the MapView</span><br><span class="line">        var view = new MapView(&#123;</span><br><span class="line">          container: &quot;viewDiv&quot;,</span><br><span class="line">          map: map,</span><br><span class="line">          zoom: 7,</span><br><span class="line">          center: [-87, 34]</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Layer.fromPortalItem(&#123;</span><br><span class="line">          portalItem: &#123; // autocast as esri/portal/PortalItem</span><br><span class="line">            id: &quot;e8f85b4982a24210b9c8aa20ba4e1bf7&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).then(function(layer) &#123;</span><br><span class="line">          // add the layer to the map</span><br><span class="line">          map.add(layer);</span><br><span class="line"></span><br><span class="line">          // create a new popupTemplate for the layer</span><br><span class="line">          // format the numeric field values using out of the box</span><br><span class="line">          // NumberFormat function. Call populationChange() custom</span><br><span class="line">          // function to calculate percent change for the county.</span><br><span class="line">          var popupTemplate = &#123;</span><br><span class="line">            title: &quot;Population in &#123;NAME&#125;&quot;,</span><br><span class="line">            content: &quot;As of 2010, the population in this area was &lt;b&gt;&#123;POP2010:NumberFormat&#125;&lt;/b&gt; &quot; +</span><br><span class="line">              &quot;and the density was &lt;b&gt;&#123;POP10_SQMI:NumberFormat&#125;&lt;/b&gt; sq mi. &quot; +</span><br><span class="line">              &quot;As of 2013, the population here was &lt;b&gt;&#123;POP2013:NumberFormat&#125;&lt;/b&gt; &quot; +</span><br><span class="line">              &quot;and the density was &lt;b&gt;&#123;POP13_SQMI:NumberFormat&#125;&lt;/b&gt; sq mi. &lt;br/&gt; &lt;br/&gt;&quot; +</span><br><span class="line">              &quot;Percent change is &#123;POP2013:populationChange&#125;&quot;</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">          layer.popupTemplate = popupTemplate;</span><br><span class="line"></span><br><span class="line">          populationChange = function(value, key, data) &#123;</span><br><span class="line">            // calculate the population percent change from 2010 to 2013.</span><br><span class="line">            var diff = data.POP2013 - data.POP2010;</span><br><span class="line">            var pctChange = (diff * 100) / data.POP2010;</span><br><span class="line">            var result = diff &gt; 0 ? &quot;up.png&quot; : &quot;down.png&quot;;</span><br><span class="line"></span><br><span class="line">            // add green arrow if the percent change is positive.</span><br><span class="line">            // red arrow for negatice percent change.</span><br><span class="line">            return &quot;&lt;img src=&apos;&quot; + result + &quot;&apos;/&gt;&quot; +</span><br><span class="line">              &quot;&lt;span style=&apos;color: &quot; +</span><br><span class="line">              (pctChange &lt; 0 ? &quot;red&quot; : &quot;green&quot;) + &quot;;&apos;&gt;&quot; +</span><br><span class="line">              number.format(pctChange, &#123;</span><br><span class="line">                places: 3</span><br><span class="line">              &#125;) +</span><br><span class="line">              &quot;%&lt;/span&gt;&quot;;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;viewDiv&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
      <category term="AAJ4.2" scheme="https://ibrucekong.github.io/tags/AAJ4-2/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[14] 弹窗的位置、为弹窗添加元素</title>
    <link href="https://ibrucekong.github.io/posts/2771055875/"/>
    <id>https://ibrucekong.github.io/posts/2771055875/</id>
    <published>2019-05-19T09:53:31.000Z</published>
    <updated>2019-05-11T09:53:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6399651.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6399651.html</a></strong></p><hr><p>这一节我们来看看弹窗的位置和弹窗上能放什么。</p><p>先一句话总结：</p><p>位置：可以随便（点击时出现或者一直固定在某个位置），也可以指定位置</p><p>能放什么：四种，文字、媒体（图片等）、表格、附件。</p><hr><p>【Part I 位置】</p><p>这一例子和下一个例子中，CDN的引用多了一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://js.arcgis.com/4.2/esri/css/main.css&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://js.arcgis.com/4.2/dijit/themes/claro/claro.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://js.arcgis.com/4.2/&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>我也不知道多出来这个claro.css是干嘛的，不过还是注意的好。</p><p>这个例子官方给的很复杂，尽管实现上很简单。从html代码开始看看吧！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"viewDiv"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"docking-control"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"dockPositionControl"</span>&gt;</span>Popup Dock Position<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"dockPositionControl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">value</span>=<span class="string">"auto"</span>&gt;</span>Auto<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"top-left"</span>&gt;</span>Top Left<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"top-center"</span>&gt;</span>Top Center<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"top-right"</span>&gt;</span>Top Right<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"bottom-left"</span>&gt;</span>Bottom Left<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"bottom-center"</span>&gt;</span>Bottom Center<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"bottom-right"</span>&gt;</span>Bottom Right<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到有一个select选择表单，内含7个可选项，第一个被定义为默认选中的项目。每个option标签的value对应PopupTemplate的position的值。</p><p>引用</p><p>照常，给出引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(</span><br><span class="line">    [</span><br><span class="line">        <span class="string">"esri/Map"</span>,<span class="string">"esri/views/MapView"</span>,<span class="string">"esri/WebMap"</span>,</span><br><span class="line">        <span class="string">"dojo/dom"</span>, <span class="string">"dojo/on"</span>, <span class="string">"dojo/domReady!"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">Map,MapView,WebMap,dom,on</span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>好的，没有疑问。下一个。</p><p>函数参数骨架</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">Map,MapView,WebMap,dom,on</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> webmap = <span class="keyword">new</span> WebMap(&#123;...&#125;);</span><br><span class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> MapView(&#123;...&#125;);</span><br><span class="line">    popup = view.popup;</span><br><span class="line">    view.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好的，没有疑问，下——好吧，有疑问，这个popup是什么？就是view实例化后的内置默认弹窗对象啊！（看我上一篇随笔）</p><p>——既然说到这个就贴多一部分代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> view = <span class="keyword">new</span> MapView(&#123;</span><br><span class="line">  map: webmap,</span><br><span class="line">  popup: &#123;</span><br><span class="line">    dockEnabled: <span class="literal">true</span>,</span><br><span class="line">    dockOptions: &#123;</span><br><span class="line">      buttonEnabled: <span class="literal">false</span>,</span><br><span class="line">      breakpoint: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  container: <span class="string">"viewDiv"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对，就是MapView的实例化代码。</p><p>其他的地方没什么不同，就popup这个不同，与上一节方法略微不同，上一节说的是先声明一个匿名对象，而这里直接把匿名对象在构造函数里写上了。</p><p>dockEnabled就是是否能停靠在页面旁边。</p><p>dockOptions是Object类型，这里写了buttonEnabled和breakpoint两个属性。意义分别为“停靠按钮是否隐藏”、“是否在点击的地方显示”（后一个参数不确定是什么意思，我猜的，英文水平不是很好哈哈）</p><p>view.then()这个方法见我第七篇随笔。</p><p>总之，数据（用的是WebMap）和视图都准备好后，就要在then()方法里设置相关的操作了。</p><p>then()方法回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">view.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> centerPoint = view.center.clone();</span><br><span class="line"></span><br><span class="line">    popup.open(&#123;&#125;);</span><br><span class="line">    popup.watch(<span class="string">"currentDockPosition"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;...&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> selectNode = dom.byId(<span class="string">"dockPositionControl"</span>);</span><br><span class="line">    on(selectNode,<span class="string">"change"</span>,funcion(e)&#123;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>整体大概是上面的样子。</p><p>解读如下：</p><p>首先，获取view的中央位置。</p><p>然后，打开view的默认弹窗。</p><p>之后，默认弹窗监听自己的currentDockPosition属性，如果currentDockPosition属性发生更改，就重新打开一次弹窗。</p><p>最后获取下拉可选框里的值，把popup的position属性更改。</p><p>——————</p><p>是不是很乱？</p><p>我也觉得很乱。</p><p>实际在页面操作的结果如下：</p><p>刚打开的页面是这样的：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170215193421972-362473212.png" alt="img"></p><p>中间的下拉框选择控件是html组织的，并不是AJS的widget；右上角是“buttonEnabled: false,breakpoint: false”+默认position的结果。</p><p>当我切换中间下拉框的选项时，如：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170215193851035-75659415.png" alt="img"></p><p>默认的弹窗的位置就发生了变化。这里，是触发了上面代码中“on(selectNode,”change”,function(e){…});”这段代码。</p><p>而点击视图任意位置时，如：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170215194126879-1417670875.png" alt="img"></p><p>view的弹窗的内容（content）就发生了变化（至于popup的content属性是怎么更改的，不知道，代码里没有，可能是WebMap的特殊性吧）</p><p>好了，官方绕了这么大一圈就是想说：</p><p>要想改popup的位置，只需更改dockOptions这个属性下的position属性即可。</p><p>目前只支持上下×左中右配对的6个位置。</p><p>所以各位看官看到这里知道原理就行啦，给出on(selectNode,”change”,function(e){…});这段完整的代码，就更加清晰了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">on(selectNode, <span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  popup.set(<span class="string">"dockOptions"</span>, &#123;</span><br><span class="line">    breakpoint: <span class="literal">false</span>,</span><br><span class="line">    buttonEnabled: <span class="literal">false</span>,</span><br><span class="line">    position: e.target.value</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>源代码也给完：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1,maximum-scale=1,user-scalable=no"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Dock Positions with Popup - 4.2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html,</span></span><br><span class="line"><span class="undefined">    body,</span></span><br><span class="line"><span class="undefined">    #viewDiv &#123;</span></span><br><span class="line"><span class="undefined">      padding: 0;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">      height: 100%;</span></span><br><span class="line"><span class="undefined">      width: 100%;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    .docking-control &#123;</span></span><br><span class="line"><span class="undefined">      font-family: "Avenir Next", "Helvetica Neue", Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      z-index: 10;</span></span><br><span class="line"><span class="undefined">      top: 50%;</span></span><br><span class="line"><span class="undefined">      left: 50%;</span></span><br><span class="line"><span class="undefined">      width: 250px;</span></span><br><span class="line"><span class="undefined">      height: 80px;</span></span><br><span class="line"><span class="undefined">      padding: 10px;</span></span><br><span class="line"><span class="undefined">      box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">      margin: -40px 0 0 -125px;</span></span><br><span class="line"><span class="undefined">      background-color: #fff;</span></span><br><span class="line"><span class="undefined">      color: #323232;</span></span><br><span class="line"><span class="undefined">      text-align: center;</span></span><br><span class="line"><span class="undefined">      -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);</span></span><br><span class="line"><span class="undefined">      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    .docking-control label &#123;</span></span><br><span class="line"><span class="undefined">      display: inline-block;</span></span><br><span class="line"><span class="undefined">      font-weight: bold;</span></span><br><span class="line"><span class="undefined">      margin: 0 0 10px 0;</span></span><br><span class="line"><span class="undefined">      padding: 0;</span></span><br><span class="line"><span class="undefined">      font-size: 16px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://js.arcgis.com/4.2/dijit/themes/claro/claro.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://js.arcgis.com/4.2/esri/css/main.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://js.arcgis.com/4.2/"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">require</span>([</span></span><br><span class="line"><span class="javascript">      <span class="string">"esri/Map"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"esri/views/MapView"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"esri/WebMap"</span>,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="string">"dojo/dom"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"dojo/on"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"dojo/domReady!"</span></span></span><br><span class="line"><span class="javascript">    ], <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">Map</span>, MapView, WebMap,</span></span><br><span class="line"><span class="undefined">      dom, on</span></span><br><span class="line"><span class="undefined">    ) &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> webmap = <span class="keyword">new</span> WebMap(&#123;</span></span><br><span class="line"><span class="javascript">          portalItem: &#123; <span class="comment">// autocasts as new PortalItem()</span></span></span><br><span class="line"><span class="javascript">            id: <span class="string">"3af548bac6054938b615d08104197ba0"</span></span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> view = <span class="keyword">new</span> MapView(&#123;</span></span><br><span class="line"><span class="undefined">          map: webmap,</span></span><br><span class="line"><span class="undefined">          popup: &#123;</span></span><br><span class="line"><span class="javascript">            dockEnabled: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">            dockOptions: &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// Disables the dock button from the popup</span></span></span><br><span class="line"><span class="javascript">              buttonEnabled: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">              <span class="comment">// Ignore the default sizes that trigger responsive docking</span></span></span><br><span class="line"><span class="javascript">              breakpoint: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          container: <span class="string">"viewDiv"</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        popup = view.popup;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        view.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> centerPoint = view.center.clone();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">          popup.open(&#123;</span></span><br><span class="line"><span class="javascript">            title: <span class="string">"Popup dock positions"</span>,</span></span><br><span class="line"><span class="undefined">            location: centerPoint,</span></span><br><span class="line"><span class="javascript">            content: <span class="string">"Use the control in the center of the map to change the location where the popup will dock."</span></span></span><br><span class="line"><span class="undefined">          &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// Watch currentDockPosition of the popup and open the </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// popup at the at position. </span></span></span><br><span class="line"><span class="javascript">          popup.watch(<span class="string">"currentDockPosition"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            popup.open();</span></span><br><span class="line"><span class="undefined">          &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> selectNode = dom.byId(<span class="string">"dockPositionControl"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// Let user change the position dockOptions.position property of the </span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// popup at runtime from the drop-down list. </span></span></span><br><span class="line"><span class="javascript">          on(selectNode, <span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            popup.set(<span class="string">"dockOptions"</span>, &#123;</span></span><br><span class="line"><span class="javascript">              breakpoint: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">              buttonEnabled: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">              position: e.target.value</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">          &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"viewDiv"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"docking-control"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"dockPositionControl"</span>&gt;</span>Popup Dock Position<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"dockPositionControl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">value</span>=<span class="string">"auto"</span>&gt;</span>Auto<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"top-left"</span>&gt;</span>Top Left<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"top-center"</span>&gt;</span>Top Center<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"top-right"</span>&gt;</span>Top Right<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"bottom-left"</span>&gt;</span>Bottom Left<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"bottom-center"</span>&gt;</span>Bottom Center<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"bottom-right"</span>&gt;</span>Bottom Right<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>记住记住关键是popup.dockOptions的position属性即可（规定好的6种）！ </p><hr><p>【Part II 能放什么】</p><p>这个例子数据又切换回了Map而不是上面的WebMap。</p><p>这个例子用的是PopupTemplate而不是Popup，所以数据用了featureLayer。</p><p>所以，给出预览图：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170215200804957-1728803372.png" alt="img"></p><p>哇！弹出窗的内容丰富了有木有！</p><p>其实就是Popup的content的内容可以定制而已！（上一篇已经着重说过，PopupTemplate这个类的content和Popup的类有点不同，PopupTemplate这个类的content可以是string，也可以是Object[]。</p><p>这就有意思了，Object类型的数组就可以指定很多东西给它。</p><p>给出featureLayer的声明骨架代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> featureLayer = <span class="keyword">new</span> FeatureLayer(&#123;</span><br><span class="line">    url: <span class="string">"..."</span>,</span><br><span class="line">    popupTemplate: &#123;</span><br><span class="line">        title: <span class="string">"..."</span></span><br><span class="line">        content: [&#123;...&#125;,&#123;...&#125;,&#123;...&#125;,&#123;...&#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    outFields: [<span class="string">"*"</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到content是Object[]类型的了，具体代码是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">content: [</span><br><span class="line">&#123;</span><br><span class="line">    type: <span class="string">"fields"</span>,</span><br><span class="line">    fieldInfos: [</span><br><span class="line">    &#123;</span><br><span class="line">        fieldName: <span class="string">"Point_Count"</span>,</span><br><span class="line">        visible: <span class="literal">false</span>,</span><br><span class="line">        label: <span class="string">"Count of Points"</span>,</span><br><span class="line">        format: </span><br><span class="line">        &#123;</span><br><span class="line">          places: <span class="number">0</span>,</span><br><span class="line">          digitSeparator: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        fieldName: <span class="string">"relationships/0/Point_Count_COMMON"</span>,</span><br><span class="line">        visible: <span class="literal">true</span>,</span><br><span class="line">        label: <span class="string">"Sum of species tree count"</span>,</span><br><span class="line">        format: </span><br><span class="line">        &#123;</span><br><span class="line">          places: <span class="number">0</span>,</span><br><span class="line">          digitSeparator: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        statisticType: <span class="string">"sum"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        fieldName: <span class="string">"relationships/0/COMMON"</span>,</span><br><span class="line">        visible: <span class="literal">false</span>,</span><br><span class="line">        label: <span class="string">"Common Name"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        fieldName: <span class="string">"BLOCKCE10"</span>,</span><br><span class="line">        visible: <span class="literal">true</span>,</span><br><span class="line">        label: <span class="string">"Block"</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    type: <span class="string">"text"</span>,</span><br><span class="line">    text: <span class="string">"There are &#123;Point_Count&#125; trees within census block &#123;BLOCKCE10&#125;"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    type: <span class="string">"media"</span>,</span><br><span class="line">    mediaInfos: [</span><br><span class="line">    &#123;</span><br><span class="line">        title: <span class="string">"&lt;b&gt;Count by type&lt;/b&gt;"</span>,</span><br><span class="line">        type: <span class="string">"pie-chart"</span>,</span><br><span class="line">        caption: <span class="string">""</span>,</span><br><span class="line">        value:</span><br><span class="line">        &#123;</span><br><span class="line">          theme: <span class="string">"Grasshopper"</span>,</span><br><span class="line">          fields: [<span class="string">"relationships/0/Point_Count_COMMON"</span>],</span><br><span class="line">          normalizeField: <span class="literal">null</span>,</span><br><span class="line">          tooltipField: <span class="string">"relationships/0/COMMON"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        title: <span class="string">"&lt;b&gt;Welcome to Beverly Hills&lt;/b&gt;"</span>,</span><br><span class="line">        type: <span class="string">"image"</span>,</span><br><span class="line">        value: </span><br><span class="line">        &#123;</span><br><span class="line">          sourceURL: <span class="string">"https://www.beverlyhills.org/cbhfiles/storage/files/13203374121770673849/122707_039r_final.jpg"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        title: <span class="string">"&lt;b&gt;Palm tree lined street&lt;/b&gt;"</span>,</span><br><span class="line">        type: <span class="string">"image"</span>,</span><br><span class="line">        value: </span><br><span class="line">        &#123;</span><br><span class="line">        sourceURL: <span class="string">"https://cdn.loc.gov/service/pnp/highsm/21600/21679r.jpg"</span></span><br><span class="line">         &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  type: <span class="string">"attachments"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>一颗很庞大的树，缩起来就成了：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170215202742269-2049393005.png" alt="img"></p><p>四个红框框，看type和对应的信息即可。</p><p>第一个是fields类型的，所以就是fieldInfos，再往下展开设置输出文本的格式等等即可。（表格，数据源自PopupTemplate.fieldInfos属性，如果没有就要先进行设置，本例中featureLayer来源自ESRI的服务器，应该是有的）</p><p>第二个是text，文本类型的，格式在这截图可以看到。</p><p>第三个是media，所以就是mediaInfos，往下还能再分pie-chart（饼图）、image（图片）等等。</p><p>第四个是附着物，就是附件，提供下载功能，如PDF文档。</p><p>media的类型可以是：image | pie-chart | bar-chart | column-chart | line-chart</p><p>再往下就不细看了，需要什么就对应找到PopupTemplate的参考文档即可。下面给出超链接</p><p><a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html" target="_blank" rel="noopener">PopupTemplate</a></p><p>（发文时是4.2，如果有更新请自行寻找4.2的SDK中的API Reference）</p><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
      <category term="AAJ4.2" scheme="https://ibrucekong.github.io/tags/AAJ4-2/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[13] Layer的弹窗（PopupTemplate）</title>
    <link href="https://ibrucekong.github.io/posts/2427708618/"/>
    <id>https://ibrucekong.github.io/posts/2427708618/</id>
    <published>2019-05-19T09:35:25.000Z</published>
    <updated>2019-05-19T09:35:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6399632.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6399632.html</a></strong></p><hr><p>上一篇文章中讲到Popup是一个弹窗，是View对象的默认内置弹窗，并且在View对象构造时就顺便构造了。</p><p>那么这个PopupTemplate是什么呢？</p><p>后半截单词Template是“模板”的意思，我最初理解就是可以定制的弹窗。仔细阅读API ref后给出更为准确的定义：</p><blockquote><p>PopupTemplate是一个针对Layer和Graphic的弹窗，它与Popup最大的不同的是作用对象不同（Popup主要是针对View）。它服务的对象是Layer中的要素类或者Graphic，它能从要素中获取字段，并用HTML的语法显示到弹窗的content属性中去。</p><p>大白话说，PopupTemplate定制程度更高，很多时候复杂的数据显示都要依靠PopupTemplate而不是简单的Popup。</p></blockquote><p>查询得知，PopupTemplate的属性比较少，但是保留了Popup的重要的属性，如</p><p>actions、content、title</p><p>惊奇的发现，PopupTemplate的title和content有别于Popup的title和content，前者的title和content除了string类型外，还可以是一个方法，content更提供了Object[]的支持。这点很重要，对于后面要介绍的PopupTemplate with Function有关，这里先打个招呼，以后会详细介绍的。</p><p>在这个例子中，数据是基于FeatureLayer的。不认识FeatureLayer无妨，就当是桌面版的FeatureLayer即可，拥有简单的要素类和字段等。</p><hr><p>给出引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"esri/Map"</span>,</span><br><span class="line">      <span class="string">"esri/views/MapView"</span>,</span><br><span class="line">      <span class="string">"esri/layers/FeatureLayer"</span>,</span><br><span class="line">      <span class="string">"dojo/domReady!"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">Map, MapView, FeatureLayer</span>)</span>&#123;&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>函数参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">Map, MapView, FeatureLayer</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> map  = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;...&#125;);</span><br><span class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> MapView(&#123;...&#125;);</span><br><span class="line">    <span class="keyword">var</span> template = &#123;...&#125;;</span><br><span class="line">    <span class="keyword">var</span> featureLayer = <span class="keyword">new</span> FeatureLayer(&#123;...&#125;);</span><br><span class="line">    map.add(featureLayer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽出主干内容后，这个示例代码就显得十分简洁：</p><ol><li><p>照例实例化Map和MapView</p></li><li><p>var一个template匿名对象，这个就是PopupTemplate对象</p></li><li><p>new一个FeatureLayer</p></li><li><p>把featureLayer添加到map中</p></li></ol><p>最关键的部分就是template这个匿名对象的内容和featureLayer这个对象如何与template绑定了，其他都不是难事。</p><p>template对象是怎么组织的呢？</p><p>仍然是抽取主干，看看template有些什么：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> template = &#123;</span><br><span class="line">    title: <span class="string">"Marriage in NY, Zip Code: &#123;ZIP&#125;"</span>,</span><br><span class="line">    content: <span class="string">"..."</span>,</span><br><span class="line">    fieldInfos: [&#123;...&#125;,&#123;...&#125;,&#123;...&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显而易见，就是PopupTemplate的几个关键属性：title、content、fieldInfos</p><p>前两个是标题和内容。在content里，就用HTML的语法显示了“template”的威力：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">content: <span class="string">"&lt;p&gt;As of 2015, &lt;b&gt;&#123;MARRIEDRATE&#125;%&lt;/b&gt; of the population in this zip code is married.&lt;/p&gt;"</span> +</span><br><span class="line">   <span class="string">"&lt;ul&gt;&lt;li&gt;&#123;MARRIED_CY&#125; people are married&lt;/li&gt;"</span> +</span><br><span class="line">   <span class="string">"&lt;li&gt;&#123;NEVMARR_CY&#125; have never married&lt;/li&gt;"</span> +</span><br><span class="line">   <span class="string">"&lt;li&gt;&#123;DIVORCD_CY&#125; are divorced&lt;/li&gt;&lt;/ul&gt;"</span></span><br></pre></td></tr></table></figure><p>熟悉html语法的同学一定不陌生这几个标签是什么含义。但是——</p><p>{MARRIEDRATE}、{NEVMARR_CY}、{DIVORCD_CY}还有上面title的{ZIP}是什么鬼？</p><p>原来，这个就是featureLayer的各个字段名，当弹窗的时候，对应的字段值就会替换这个大括号。</p><p>那么fieldInfo里的Object数组又是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">fieldInfos: [</span><br><span class="line">    &#123;</span><br><span class="line">      fieldName: <span class="string">"MARRIED_CY"</span>,</span><br><span class="line">      format: &#123;</span><br><span class="line">        digitSeparator: <span class="literal">true</span>, </span><br><span class="line">        places: <span class="number">0</span> </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">      fieldName: <span class="string">"NEVMARR_CY"</span>,</span><br><span class="line">      format: &#123;<span class="comment">//同上&#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      fieldName: <span class="string">"DIVORCD_CY"</span>,</span><br><span class="line">      format: &#123;<span class="comment">//同上&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里的//同上是完全相同的意思，为了省略就没有再写一次。</p><p>看得出，每一个Object里都含有fieldName，看来是和featureLayer的字段的字段名是对应的了。</p><p>而format，即格式，内含输出到弹窗的数字格式，其中digitSeparator就是分隔符，如这样的数字“10,000,000”，逗号就是分隔符；places就是小数位数。</p><p>所以这个fieldInfo也是描述数据及其格式的一个属性。</p><p>那么，template这个PopupTemplate对象（匿名的）如何与featureLayer绑定呢？</p><p>弹窗与要素图层绑定</p><p>其实，featureLayer里有一个属性，叫popupTemplate。这就很容易懂了吧？上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> featureLayer = <span class="keyword">new</span> FeatureLayer(&#123;</span><br><span class="line">  url: <span class="string">"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/ArcGIS/rest/services/NYCDemographics1/FeatureServer/0"</span>,</span><br><span class="line">  outFields: [<span class="string">"*"</span>],</span><br><span class="line">  popupTemplate: template</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其他什么的先不管，featureLayer这个对象绑定PopupTemplate的方法就是将template对象之间赋值给featureLayer的popupTemplate属性。</p><p>好了，我们来看看结果：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170215131934519-1847115274.png" alt="img"></p><p>结果很明显了，刚刚设置的所有格式都在弹窗上有对应的显示。</p><p>MapView中多了一层矢量的图层，这是featureLayer。（看得出ESRI对矢量图形的描边算法还不是很好，尖锐的地方处理的不如桌面版的好，应该是缓冲区算法出的毛病）</p><hr><p>总结一下。</p><p>给特定的要素图层或者图形设置定制好的弹窗步骤如下：</p><ol><li><p>实例化map和view对象</p></li><li><p>创建PopupTemplate对象，可以匿名创建也可以new创建</p></li><li><p>创建featureLayer时在构造函数中把popupTemplate属性赋值即可。</p></li><li><p>map中添加featureLayer</p></li></ol><p>over~！</p><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
      <category term="AAJ4.2" scheme="https://ibrucekong.github.io/tags/AAJ4-2/"/>
    
  </entry>
  
  <entry>
    <title>监听事件多次绑定多次触发的解决方案</title>
    <link href="https://ibrucekong.github.io/posts/353147208/"/>
    <id>https://ibrucekong.github.io/posts/353147208/</id>
    <published>2019-05-19T05:48:07.000Z</published>
    <updated>2019-05-19T05:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>事件监听多次绑定多次触发：</strong><br>对于同一DOM多次绑定同一监听事件，可导致绑定的函数触发多次，不满足冗余绑定容差错问题。想要的效果是多次绑定的情况下，在触发时只响应一次。</p><a id="more"></a><hr><p>在做项目时，遇到了有时地图不能拖动的问题，一开始以为是ArcGIS for JavaScript使用不当造成的，连调好长时间，发现代码并未有问题。加断点，写LOG，查看DOM触发时的代码走向。发现在绑定的函数中的LOG打印了多次，这很不正常啊。</p><p>思考出现多次的原因：1）DOM重复创建了；2）监听是不是多绑定了。</p><p>针对两个问题，检查发现确实是多次绑定导致的，首先想到的是方案一，查完资料找到了方案二。</p><ol><li><p>方案一</p><p>最简单的方法就是放在外围，不用每次都设置监听，这样做的好处是不用每次都去绑定，只在初始化时完成监听，增加了初始化时的运算量。</p></li><li><p>方案二</p><p>冲了会浪，找到另一个解决办法，这样可以根据什么时候需要设置监听而随时绑定，方法接着往下看~</p></li></ol><ul><li><p>问题示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomeThing</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'something is'</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'circle'</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    doSomeThing(e);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    doSomeThing(e);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li></ul><p>上面的代码会在触发时执行两次，并不是我们想看到的，我们本想预料的是执行一次绑定的函数，完成时间监听的闭环。</p><ul><li><p>问题永远不会偶然并单独出现，你遇到了，别人肯定也会遇到，方案也会有很多，以下是别人的解决方案。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomeThing</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'something is'</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'circle'</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, doSomeThing, <span class="literal">false</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, doSomeThing, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>在接收监听函数时使用实名函数，不要使用匿名函数，不然都没办法取消事件监听。</p><p><a href="https://stackoverflow.com/questions/26146108/addeventlistener-firing-multiple-times-for-the-same-handle-when-passing-in-argum" target="_blank" rel="noopener">网友的问题</a> </p></li></ul><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;事件监听多次绑定多次触发：&lt;/strong&gt;&lt;br&gt;对于同一DOM多次绑定同一监听事件，可导致绑定的函数触发多次，不满足冗余绑定容差错问题。想要的效果是多次绑定的情况下，在触发时只响应一次。&lt;/p&gt;
    
    </summary>
    
      <category term="languages" scheme="https://ibrucekong.github.io/categories/languages/"/>
    
    
      <category term="JavasScript" scheme="https://ibrucekong.github.io/tags/JavasScript/"/>
    
      <category term="Event" scheme="https://ibrucekong.github.io/tags/Event/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[12] View的弹窗（Popup）</title>
    <link href="https://ibrucekong.github.io/posts/3310621046/"/>
    <id>https://ibrucekong.github.io/posts/3310621046/</id>
    <published>2019-05-11T03:50:22.000Z</published>
    <updated>2019-05-11T03:50:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6399628.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6399628.html</a></strong></p><hr><p>看本文前最好对第二章（Mapping and Views）中的Map和View类有理解。</p><p>视图类有一个属性是Popup类型的popup，查阅API知道这个就是视图的弹窗，每一个View的实例都有一个popup。</p><p>这个popup属性在View对象实例化的时候就实例化了的，即随着View的出生，它也会出生，它拥有默认的样子，它显示的文字也是默认的样式。</p><p>我们看看Popup这个类：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170214235644847-159453514.png" alt="img"></p><p>直接继承自Accessor，位于widgets模块下，说明Popup（弹窗）也是小部件的一种。但是为什么要单独拿出来讲呢？可能用法上比较复杂吧。</p><p>如果用户对弹窗有更高的样式要求，官方的说法是</p><p>可以自己new一个Popup对象，替换掉view默认的popup即可。</p><p>其实Popup有个兄弟类，叫PopupTemplate，它长得很像Popup，但是在功能上更服务于Layer和Graphic，即地理数据，而且也是高度可自定义的，在下一节会细说这两个的区别。</p><p>说完了Popup这个新玩意儿，我就来说说第一个例子吧！</p><p>它的功能就是点击View上的一个地方，就会弹出一个小窗，显示经纬度和其他信息。</p><hr><p>引用</p><p>直接给：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"esri/tasks/Locator"</span>,</span><br><span class="line">      <span class="string">"esri/Map"</span>,</span><br><span class="line">      <span class="string">"esri/views/MapView"</span>,</span><br><span class="line">      <span class="string">"dojo/domReady!"</span></span><br><span class="line">    ], </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>函数参数中因为Map和View 对象是经常性出现的，所以就用 var map = new Map(…);代替了（以后也是）</p><p>所以函数参数的关键代码是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function(Locator, Map, MapView)&#123;</span><br><span class="line">        var map = new Map(...);</span><br><span class="line">        var view = new MapView(...);</span><br><span class="line">        var locatorTask = new Locator(&#123;</span><br><span class="line">            url : &quot;https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer&quot;;</span><br><span class="line">　　　　 &#125;);</span><br><span class="line">        view.on(&quot;click&quot;, funcion(event)&#123;...&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>locatorTask是一个Locator类的对象，用于定位服务。这个不用知道太详细，因为本例中重点并不是它。</p><p>重点应该是view的事件“click”，写法同上，但是事件的方法体没有写完整。</p><p>我们就来看看这个事件的方法体具体是什么：</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//获取经纬度</span></span><br><span class="line">        <span class="keyword">var</span> lat = <span class="built_in">Math</span>.round(event.mapPoint.latitude * <span class="number">1000</span>) / <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">var</span> lon = <span class="built_in">Math</span>.round(event.mapPoint.longitude * <span class="number">1000</span>) / <span class="number">1000</span>;</span><br><span class="line">        view.popup.open(&#123;</span><br><span class="line">            title: <span class="string">"Reverse geocode: ["</span> + lon + <span class="string">", "</span> + lat + <span class="string">"]"</span>,</span><br><span class="line">            location: event.mapPoint</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定位服务，可以省略，不是本例中的主要内容</span></span><br><span class="line">        locatorTask.locationToAddress(event.mapPoint)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> address = response.address.Match_addr;</span><br><span class="line">          view.popup.content = address;</span><br><span class="line">        &#125;)</span><br><span class="line">        .otherwise(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">          view.popup.content =</span><br><span class="line">            <span class="string">"No address was found for this location"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到了，从click事件的event参数中获取到了lat和lon，即经纬度，用Math.round方法对数字进行了一定的处理。</p><p>然后关键的一句：</p><p>view.popup.open({…});</p><p>我们先不说这个是什么，但是肯定是一个方法。</p><p>下面的then()方法，是Locator对象的locationToAddress方法的Promise返回对象的回调，用于获取地址成功后把地址显示到popup上。</p><p>关键的一句：</p><p>view.popup.content = address;</p><p>在下面otherwise()方法也有类似的。</p><p>现在，我们转到Popup这个类的定义。</p><blockquote><p>Popup类</p><p>继承自Accessor类</p><p>主要属性：actions（Collection类型）、content（String或Node类型）、location（Point类型）、title（String类型）…</p><p>主要方法：open()、destroy()…</p></blockquote><p>看得出，上面的代码使用了open方法，content属性、location属性、title属性。</p><p>open方法会把popup的visible属性改为true，然后显示到指定的位置：location。</p><p>是不是很简单呢？</p><p>更深一层的理解，既然能open，那么肯定是有这个实例的，更说明了popup这个属性是一个对象，在View实例化的时候就完成了实例化。</p><p>对其content、title属性进行设置就可以在弹出窗中看到想要的内容和标题了。</p><hr><p>总结一下。</p><ol><li><p>View对象自带Popup实例，并随着View对象实例化而实例化。</p></li><li><p>Popup使用open()方法显示出来，接受location、title、content等可选参数以指定内容、弹窗点等。</p></li></ol><p>最后给个图：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170215113704316-1722350220.png" alt="img"></p><p>很显而易见。</p><p>给出官方的源代码（没有删除注释）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"initial-scale=1,maximum-scale=1,user-scalable=no"</span>&gt;</span><br><span class="line">  &lt;title&gt;Get started <span class="keyword">with</span> popups - <span class="number">4.2</span>&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">    html,</span></span><br><span class="line"><span class="regexp">    body,</span></span><br><span class="line"><span class="regexp">    #viewDiv &#123;</span></span><br><span class="line"><span class="regexp">      padding: 0;</span></span><br><span class="line"><span class="regexp">      margin: 0;</span></span><br><span class="line"><span class="regexp">      height: 100%;</span></span><br><span class="line"><span class="regexp">      width: 100%;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    #instruction &#123;</span></span><br><span class="line"><span class="regexp">      z-index: 99;</span></span><br><span class="line"><span class="regexp">      position: absolute;</span></span><br><span class="line"><span class="regexp">      top: 15px;</span></span><br><span class="line"><span class="regexp">      left: 50%;</span></span><br><span class="line"><span class="regexp">      padding: 5px;</span></span><br><span class="line"><span class="regexp">      margin-left: -175px;</span></span><br><span class="line"><span class="regexp">      height: 20px;</span></span><br><span class="line"><span class="regexp">      width: 350px;</span></span><br><span class="line"><span class="regexp">      background: rgba(25, 25, 25, 0.8);</span></span><br><span class="line"><span class="regexp">      color: white;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line"></span><br><span class="line">  &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://js.arcgis.com/4.2/esri/css/main.css"</span>&gt;</span><br><span class="line">  &lt;script src=<span class="string">"https://js.arcgis.com/4.2/"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="built_in">require</span>([</span><br><span class="line">      <span class="string">"esri/tasks/Locator"</span>,</span><br><span class="line">      <span class="string">"esri/Map"</span>,</span><br><span class="line">      <span class="string">"esri/views/MapView"</span>,</span><br><span class="line">      <span class="string">"dojo/domReady!"</span></span><br><span class="line">    ], <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      Locator,</span></span></span><br><span class="line"><span class="function"><span class="params">      Map,</span></span></span><br><span class="line"><span class="function"><span class="params">      MapView</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Set up a locator task using the world geocoding service</span></span><br><span class="line">      <span class="keyword">var</span> locatorTask = <span class="keyword">new</span> Locator(&#123;</span><br><span class="line">        url: <span class="string">"https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer"</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Create the Map</span></span><br><span class="line">      <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span><br><span class="line">        basemap: <span class="string">"streets-navigation-vector"</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Create the MapView</span></span><br><span class="line">      <span class="keyword">var</span> view = <span class="keyword">new</span> MapView(&#123;</span><br><span class="line">        container: <span class="string">"viewDiv"</span>,</span><br><span class="line">        map: map,</span><br><span class="line">        center: [<span class="number">-116.3031</span>, <span class="number">43.6088</span>],</span><br><span class="line">        zoom: <span class="number">12</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*******************************************************************</span></span><br><span class="line"><span class="comment">       * This click event sets generic content on the popup not tied to</span></span><br><span class="line"><span class="comment">       * a layer, graphic, or popupTemplate. The location of the point is</span></span><br><span class="line"><span class="comment">       * used as input to a reverse geocode method and the resulting</span></span><br><span class="line"><span class="comment">       * address is printed to the popup content.</span></span><br><span class="line"><span class="comment">       *******************************************************************/</span></span><br><span class="line">      view.on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Get the coordinates of the click on the view</span></span><br><span class="line">        <span class="keyword">var</span> lat = <span class="built_in">Math</span>.round(event.mapPoint.latitude * <span class="number">1000</span>) / <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">var</span> lon = <span class="built_in">Math</span>.round(event.mapPoint.longitude * <span class="number">1000</span>) / <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        view.popup.open(&#123;</span><br><span class="line">          <span class="comment">// Set the popup's title to the coordinates of the location</span></span><br><span class="line">          title: <span class="string">"Reverse geocode: ["</span> + lon + <span class="string">", "</span> + lat + <span class="string">"]"</span>,</span><br><span class="line">          location: event.mapPoint <span class="comment">// Set the location of the popup to the clicked location</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Display the popup</span></span><br><span class="line">        <span class="comment">// Execute a reverse geocode using the clicked location</span></span><br><span class="line">        locatorTask.locationToAddress(event.mapPoint).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">          response</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// If an address is successfully found, print it to the popup's content</span></span><br><span class="line">          <span class="keyword">var</span> address = response.address.Match_addr;</span><br><span class="line">          view.popup.content = address;</span><br><span class="line">        &#125;).otherwise(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// If the promise fails and no result is found, print a generic message</span></span><br><span class="line">          <span class="comment">// to the popup's content</span></span><br><span class="line">          view.popup.content =</span><br><span class="line">            <span class="string">"No address was found for this location"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"viewDiv"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;div id=<span class="string">"instruction"</span>&gt;Click any location on the map to see its street address&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="ArcGIS API for Javascript 4.2" scheme="https://ibrucekong.github.io/tags/ArcGIS-API-for-Javascript-4-2/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[11] 官方第五章Popups（弹窗）概览与解释</title>
    <link href="https://ibrucekong.github.io/posts/2760278425/"/>
    <id>https://ibrucekong.github.io/posts/2760278425/</id>
    <published>2019-05-11T03:25:02.000Z</published>
    <updated>2019-05-11T03:25:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6399346.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6399346.html</a></strong></p><hr><p>直接跳过第三第四章了，第三章Layer和第四章可视化，怎么说呢，Layer是组织数据的，是Map的属性之一。可视化属于符号化编程，暂时不看。</p><p>第五章是对数据、结果的显示，类似于alert()、.NET的MessageBox，弹窗嘛。</p><p>官方的解释很清楚了，我翻译过来，再加上自己的一些理解。</p><p>Popup，是Accessor的 一个子类，它的实例是弹窗对象。像这样</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170214212651254-336683179.png" alt="img"></p><p>是不是很熟悉？对，在老版本的百度地图中，也有很多这种弹窗的例子。</p><p>这一章比较短，给出预览：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170214213321754-740696313.png" alt="img"></p><hr><p>【Get started with popups】</p><p>【Get started with PopupTemplate】</p><p>前两节是预热，通过例子告诉用户怎么使用 Popup 和 PopupTemplate 这两个直接继承自Accessor的类，去弹出一个窗口，以及简单介绍如何使用这两个类的属性。</p><p>Popup作用于View对象，而PopupTemplate作用于一些Layer对象或者Graphic对象。</p><p>【Popup dock positions】</p><p>这节从名字就知道了，控制弹窗的位置。</p><p>【Multiple popup elements】</p><p> 使用多个弹窗元素。弹窗里可以放置很多种元素，因为弹窗不可能只有文本，还可以有图表、外链等。</p><p> 还介绍了怎么使用related table（并不知道是什么，等看到源代码就知道怎么回事了吧？）</p><p>【PopupTemplate with functions】</p><p> PopupTemplate这个类的实例，和functions？</p><p> 口语点的解释就是：</p><p> 在Layer或者Graphic的弹出窗（PopupTemplate）中，如果对输出文本（输出信息）有特殊的格式需求，是可以指定一段代码来完成这个格式化过程的。</p><p> 官方的例子，拿人口变化比率来说明。人口变化这个比率（如下图）</p><p> <img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170214230626894-50661014.png" alt="img"></p><p> 有一个图案，就是红色的向下箭头和红色的数字（如果是增长的就是绿色向上箭头和绿色数字）。</p><p> 这个就不是官方的格式字符串方法了，所以就要自定义方法去完成这个信息的格式化。</p><p>【Popup actions】</p><p> 给弹出窗添加一些自定义的动作——看到初始弹出窗下面那个放大镜按钮没？这就是说，允许自定义按钮并添加一些功能。</p><p>【Custom popup actions per feature】</p><p> <img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170214220723722-428140646.png" alt="img"></p><p>这个看图就好解释了，字面义就是每个要素（feature）都可以定制功能，图中那个啤酒按钮就可以弹出这个地址的网站（大概）。</p><p>重点应该不是这个啤酒按钮的功能了，而是能对feature的定制。这个feature的弹窗和View的弹窗有什么不同呢？到代码里看看吧。</p><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="ArcGIS API for Javascript 4.2" scheme="https://ibrucekong.github.io/tags/ArcGIS-API-for-Javascript-4-2/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[10] 2D添加指北针widget、视图保存、视图padding（第二章完结）</title>
    <link href="https://ibrucekong.github.io/posts/2160033807/"/>
    <id>https://ibrucekong.github.io/posts/2160033807/</id>
    <published>2019-05-11T03:10:12.000Z</published>
    <updated>2019-05-11T03:10:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6391517.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6391517.html</a></strong></p><hr><p>这几个例子是第二章除了入门之外比较简单的几个，就做个合集，把最核心的代码（第二参数）和 引用放上来即可，不作多解释。</p><p>2D地图添加指北针widget</p><p>2D地图一般修正方向为正北方就需要这个widget。</p><p>引用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">        <span class="string">"esri/Map"</span>,</span><br><span class="line">        <span class="string">"esri/views/MapView"</span>,</span><br><span class="line">        <span class="string">"esri/widgets/Compass"</span>,</span><br><span class="line">        <span class="string">"dojo/domReady!"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在function(Map,MapView,Compass)实例化Map和MapView后，添加这两行代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compassWidget = <span class="keyword">new</span> Compass(&#123;<span class="attr">view</span>: view&#125;);</span><br><span class="line">view.ui.add(compassWidget, <span class="string">"top-left"</span>);</span><br></pre></td></tr></table></figure><p>即可。有关Compass这个widget的构造函数，可以查阅API了解更多，我感觉不会那么少吧…还有这个ui.add()方法，感觉日后添加widget布局的时候可以仔细学学。</p><p>ps：Compass在SceneView中是默认显示的。</p><p>视图padding改变</p><p>这个几乎没有难度。</p><p>给个图预览吧：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170213051054832-1769929522.png" alt="img"></p><p>本来小岛这种东西就应该在地图的最中央位置，但是由于右边多了一块DIV（宽度320px），所以地图为了避开DIV而对齐就必须把视图的padding值改为320（和DIV一样）。在百度地图旧版本中，就喜欢搞一个面板，用于提供搜索信息的输入框和结果框、筛选按钮等。</p><p>直接给出源代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(</span><br><span class="line">    [ <span class="string">"esri/Map"</span>, <span class="string">"esri/views/MapView"</span>, <span class="string">"dojo/domReady!"</span> ], </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">Map,MapView</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span><br><span class="line">        basemap: <span class="string">"topo"</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">var</span> view = <span class="keyword">new</span> MapView(&#123;</span><br><span class="line">        container: <span class="string">"viewDiv"</span>,</span><br><span class="line">        map: map,</span><br><span class="line">        center: [<span class="number">-74.045459</span>, <span class="number">40.690083</span>], </span><br><span class="line">        zoom: <span class="number">16</span>,</span><br><span class="line">        padding: &#123;</span><br><span class="line">          right: <span class="number">320</span> </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>仅仅是在view的实例化中把padding的right改为320，在html中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"viewDiv"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"sidebar"</span>&gt;</span><br><span class="line">      &lt;div id=<span class="string">"text"</span>&gt;</span><br><span class="line">            内容云云，此处省略</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>在style标签中，把sidebar这个div的width设置成了同样的320px。</p><p>视图保存</p><p>这个就比较有趣了。首先要提供一个输入title的地方，还要有一个保存image的地方。</p><p>这个例子，使用了SceneView，SceneView的map属性使用了服务器上的WebScene（专题三维地图）。由于这个比较容易，就忽略了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"viewDiv"</span>&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=<span class="string">"createSlideDiv"</span>&gt;</span><br><span class="line">    New slide: &lt;input type="text" id="createSlideTitleInput" size="10" /&gt;</span><br><span class="line">    &lt;button</span><br><span class="line">      id="createSlideButton"&gt;Create&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div id=<span class="string">"slidesDiv"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><p>从html代码可以看出，提供了一个createSlideDiv，内含input和一个button以供输入。</p><p>还有一个slidesDiv以供保存img列表。</p><p>见下图：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170213044625879-907335029.png" alt="img"></p><p>第一步，把这几个div加入到view对象的ui中去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.ui.add([&quot;createSlideDiv&quot;, &quot;slidesDiv&quot;], &quot;top-right&quot;);</span><br></pre></td></tr></table></figure><p>第二步，在view创建好后，执行以下代码。关于then()，请查看鹰眼一文的末尾。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">view.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  dom.byId(<span class="string">"slidesDiv"</span>).style.visibility = <span class="string">"visible"</span>;</span><br><span class="line">  <span class="keyword">var</span> slides = scene.presentation.slides;</span><br><span class="line">  slides.forEach(createSlideUI);</span><br><span class="line"></span><br><span class="line">  on(dom.byId(<span class="string">"createSlideButton"</span>), <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Slide.createFrom(view).then(<span class="function"><span class="keyword">function</span>(<span class="params">slide</span>) </span>&#123;</span><br><span class="line">      slide.title.text = dom.byId(<span class="string">"createSlideTitleInput"</span>)</span><br><span class="line">        .value;</span><br><span class="line">      scene.presentation.slides.add(slide);</span><br><span class="line">      createSlideUI(slide, <span class="string">"first"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>首先，将slidesDiv置为可视。</p><p>第二，若WebScene存在slide，那么就全部装到列表中去。</p><p>然后var一个slides变量，获取WebScene实例scene的当前所有的slides。</p><p>然后遍历每一个slides成员，对其进行createSlideUI操作（见下，即创建DIV列表里的UI对象）。</p><p>第三，调用dojo的on(DOM元素，事件类型，事件方法体)，为新增slide的那个按钮添加click事件。</p><p>注意Slide.createFrom()方法，它将从view中创建slide。</p><p>在这个方法的回调函数中，设置输入框的文本slide的标题。</p><p>然后把slide添加到scene这个WebScene中去。</p><p>最后调用createSlideUI创建div即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSlideUI</span>(<span class="params">slide, placement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> slideElement = domConstruct.create(<span class="string">"div"</span>, &#123;</span><br><span class="line">    id: slide.id,</span><br><span class="line">    className: <span class="string">"slide"</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> position = placement ? placement : <span class="string">"last"</span>;</span><br><span class="line">  domConstruct.place(slideElement, <span class="string">"slidesDiv"</span>, position);</span><br><span class="line">  domConstruct.create(<span class="string">"div"</span>, &#123;</span><br><span class="line">    textContent: slide.title.text,</span><br><span class="line">    className: <span class="string">"title"</span></span><br><span class="line">  &#125;, slideElement);</span><br><span class="line">  domConstruct.create(<span class="string">"img"</span>, &#123;</span><br><span class="line">    src: slide.thumbnail.url,</span><br><span class="line">    title: slide.title.text</span><br><span class="line">  &#125;, slideElement);</span><br><span class="line">  on(slideElement, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    query(<span class="string">".slide"</span>).removeClass(<span class="string">"active"</span>);</span><br><span class="line">    domClass.add(slideElement, <span class="string">"active"</span>);</span><br><span class="line">    slide.applyTo(view);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createSlideUI()方法就是创建DIV了，首先用domConstruct.create()方法创建一个divDOM元素，然后确定位置position，</p><p>紧接着在这个div里添加标题div、图片div，最后为这个div添加click事件。</p><p>虽然最后一个例子看起来比较长，但是逻辑都很清晰，代码也没什么碎片化，完全可以直接照抄两个代码段。</p><hr><p>至此，第二章的学习就差不多了，关于WebScene、WebMap这两个从Map类中派生出来的子类（和Basemap同级），我觉得查阅API更有效果，而且可能是得配合ArcServer才能弄懂的东西，就先不学了。</p><p>要说数据准备这块这一章还真没写，所以极有可能在Layers那章才会学到了吧，再不济，百度啊谷歌啊干什么用的？</p><p>所以，整理一下所学，开始准备学习Popups（弹出框）、Searching（空间查询）和Analysis（空间分析）吧~</p><p>Layers和Widgets两章留给三月份研读。</p><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="ArcGIS API for Javascript 4.2" scheme="https://ibrucekong.github.io/tags/ArcGIS-API-for-Javascript-4-2/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[9] 同一种视图不同数据（Map）同步</title>
    <link href="https://ibrucekong.github.io/posts/3849267338/"/>
    <id>https://ibrucekong.github.io/posts/3849267338/</id>
    <published>2019-05-11T02:56:06.000Z</published>
    <updated>2019-05-11T02:56:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6391513.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6391513.html</a></strong></p><hr><p>本例子核心：对MapView对象的map属性值进行替换即可达到更改地图数据的效果。</p><hr><p>这个例子用的不是Map对象了，而是用的发布在服务器上的专题地图（WebMap）来加载到MapView上进行显示。</p><p>在html标签中，使用了section标签，不过没什么稀奇的，就把仨按钮放一块而已。</p><p>先给出预览图</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170213034630800-895613805.png" alt="img"></p><p>三张专题地图：失踪人口密度分布、难民迁徙路线、2015年欧洲来港者。</p><p>这个东西很有用，尤其是在展示同一地区的专题地图的时候，这里也展示了什么叫View，什么叫Map。</p><p>因为中心点、比例尺是由View对象管控的，所以改变WebMap这个数据的时候，并不会改变位置和比例尺。</p><p>我们来看代码：</p><p>给出引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">      <span class="string">"esri/views/MapView"</span>,</span><br><span class="line">      <span class="string">"esri/WebMap"</span>,</span><br><span class="line">      <span class="string">"dojo/on"</span>,</span><br><span class="line">      <span class="string">"dojo/domReady!"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>很清爽。</p><p>既然要用到3个专题地图，那么就创建3个WebMap对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">MapView, WebMap, on</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> webmapids = [</span><br><span class="line">        <span class="string">"ad5759bf407c4554b748356ebe1886e5"</span>,</span><br><span class="line">        <span class="string">"71ba2a96c368452bb73d54eadbd59faa"</span>,</span><br><span class="line">        <span class="string">"45ded9b3e0e145139cc433b503a8f5ab"</span></span><br><span class="line">      ];</span><br><span class="line">      <span class="comment">// 匿名函数返回一个WebMap实例</span></span><br><span class="line">      <span class="keyword">var</span> webmaps = webmapids.map(<span class="function"><span class="keyword">function</span>(<span class="params">webmapid</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMap(&#123;</span><br><span class="line">          portalItem: &#123;</span><br><span class="line">            id: webmapid</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">var</span> view = <span class="keyword">new</span> MapView(&#123;</span><br><span class="line">        map: webmaps[<span class="number">0</span>],</span><br><span class="line">        container: <span class="string">"viewDiv"</span></span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是很简单。</p><p>给定一个webmap的ID字符串数组，每个ID是WebMap的唯一标识符。</p><p>然后用Collection对象的map()方法进行遍历操作，对传入的每一个ID，匿名函数返回一个WebMap实例。</p><p>如何实例化WebMap，请参考API中WebMap的构造函数。</p><p>然后，实例化一个MapView，map属性给定webmaps数组的第一个元素，即第一个WebMap——失踪人口图。</p><p>在实例化MapView后，就是给顶头的3个按钮添加事件了。</p><p>dojo给DOM元素添加事件还记得吗？就是goTo()动画那篇文章。</p><p>基本语法：</p><blockquote><p>on(DOM元素,事件类型,事件方法体);</p></blockquote><p>见下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">on(<span class="built_in">document</span>.querySelector(<span class="string">".btns"</span>), </span><br><span class="line">     <span class="string">".btn-switch:click"</span>, </span><br><span class="line">     <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> id = event.target.getAttribute(<span class="string">"data-id"</span>);</span><br><span class="line">         <span class="keyword">if</span> (id) &#123;</span><br><span class="line">            <span class="keyword">var</span> webmap = webmaps[id];</span><br><span class="line">            view.map = webmap;</span><br><span class="line">            <span class="keyword">var</span> nodes = <span class="built_in">document</span>.querySelectorAll(<span class="string">".btn-switch"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> idx = <span class="number">0</span>; idx &lt; nodes.length; idx++) &#123;</span><br><span class="line">                 <span class="keyword">var</span> node = nodes[idx];</span><br><span class="line">                 <span class="keyword">var</span> mapIndex = node.getAttribute(<span class="string">"data-id"</span>);</span><br><span class="line">                 <span class="keyword">if</span> (mapIndex === id) &#123;</span><br><span class="line">                      node.classList.add(<span class="string">"active-map"</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">else</span> &#123;</span><br><span class="line">                     node.classList.remove(<span class="string">"active-map"</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用css选择器点选，即对类进行选择。btns被选中。</p><p>在方法体内，先获取data-id这个自定义属性，进入if判断。</p><p>先按data-id选择到序号一致的WebMap，假如data-id=“2”，则选中第三张WebMap。</p><p>然后更改view.map属性为选择到的WebMap。</p><p>这里，数据就替换完成了。</p><p>从var nodes…到for循环体结束，讲的是：</p><p>获取全部class为btn-switch的DOM元素。</p><p>对这个数组进行遍历操作，若当前点击的div的data-id和遍历到的data-id三等号相同，那么就往这个DOM元素的classList添加active-map。</p><p>若不，则移除active-map。</p><p>意思就是说，如果点击的div就是当前地图，那么就标记为当前活动的WebMap，否则就不是活动的WebMap。</p><p>————————</p><p>整个程序就是这么简单，替换MapView对象的map属性值，修改DOM元素的classList和操作DOM元素而已。</p><p>给出官方源代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1,maximum-scale=1,user-scalable=no"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Load a basic WebMap and swap with another on the same View - 4.2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html,</span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">      font-family: sans-serif;</span></span><br><span class="line"><span class="undefined">      padding: 0;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">      height: 100%;</span></span><br><span class="line"><span class="undefined">      width: 100%;</span></span><br><span class="line"><span class="undefined">      overflow: hidden;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    #viewDiv &#123;</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      right: 0;</span></span><br><span class="line"><span class="undefined">      left: 0;</span></span><br><span class="line"><span class="undefined">      top: 60px;</span></span><br><span class="line"><span class="undefined">      bottom: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    .header &#123;</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      top: 0;</span></span><br><span class="line"><span class="undefined">      width: 100%;</span></span><br><span class="line"><span class="undefined">      height: 10%;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    .btns &#123;</span></span><br><span class="line"><span class="undefined">      margin: 0 auto;</span></span><br><span class="line"><span class="undefined">      display: flex;</span></span><br><span class="line"><span class="undefined">      flex-direction: row;</span></span><br><span class="line"><span class="undefined">      justify-content: center;</span></span><br><span class="line"><span class="undefined">      align-items: center;</span></span><br><span class="line"><span class="undefined">      overflow: auto;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    .btn-switch &#123;</span></span><br><span class="line"><span class="undefined">      flex-grow: 4;</span></span><br><span class="line"><span class="undefined">      background-color: rgba(34, 111, 14, 0.5);</span></span><br><span class="line"><span class="undefined">      color: #FFF;</span></span><br><span class="line"><span class="undefined">      margin: 1px;</span></span><br><span class="line"><span class="undefined">      width: 50%;</span></span><br><span class="line"><span class="undefined">      padding: 20px;</span></span><br><span class="line"><span class="undefined">      overflow: auto;</span></span><br><span class="line"><span class="undefined">      text-align: center;</span></span><br><span class="line"><span class="undefined">      cursor: pointer;</span></span><br><span class="line"><span class="undefined">      font-size: 0.7em;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    .active-map &#123;</span></span><br><span class="line"><span class="undefined">      color: #fff;</span></span><br><span class="line"><span class="undefined">      background-color: rgba(34, 111, 14, 1);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://js.arcgis.com/4.2/esri/css/main.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://js.arcgis.com/4.2/"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">require</span>([</span></span><br><span class="line"><span class="javascript">      <span class="string">"esri/views/MapView"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"esri/WebMap"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"dojo/on"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="string">"dojo/domReady!"</span></span></span><br><span class="line"><span class="javascript">    ], <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span></span><br><span class="line"><span class="undefined">      MapView, WebMap,</span></span><br><span class="line"><span class="undefined">      on</span></span><br><span class="line"><span class="undefined">    ) &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> webmapids = [</span></span><br><span class="line"><span class="javascript">        <span class="string">"ad5759bf407c4554b748356ebe1886e5"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">"71ba2a96c368452bb73d54eadbd59faa"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">"45ded9b3e0e145139cc433b503a8f5ab"</span></span></span><br><span class="line"><span class="undefined">      ];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      /************************************************************</span></span><br><span class="line"><span class="undefined">       * Create multiple WebMap instances</span></span><br><span class="line"><span class="undefined">       ************************************************************/</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> webmaps = webmapids.map(<span class="function"><span class="keyword">function</span>(<span class="params">webmapid</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> WebMap(&#123;</span></span><br><span class="line"><span class="undefined">          portalItem: &#123;</span></span><br><span class="line"><span class="undefined">            id: webmapid</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      /************************************************************</span></span><br><span class="line"><span class="javascript">       * Initialize the View <span class="keyword">with</span> the first WebMap</span></span><br><span class="line"><span class="undefined">       ************************************************************/</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> view = <span class="keyword">new</span> MapView(&#123;</span></span><br><span class="line"><span class="undefined">        map: webmaps[0],</span></span><br><span class="line"><span class="javascript">        container: <span class="string">"viewDiv"</span></span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="javascript">      on(<span class="built_in">document</span>.querySelector(<span class="string">".btns"</span>), <span class="string">".btn-switch:click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span></span><br><span class="line"><span class="undefined">        event) &#123;</span></span><br><span class="line"><span class="undefined">        /************************************************************</span></span><br><span class="line"><span class="javascript">         * On a button click, change the map <span class="keyword">of</span> the View</span></span><br><span class="line"><span class="undefined">         ************************************************************/</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> id = event.target.getAttribute(<span class="string">"data-id"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (id) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> webmap = webmaps[id];</span></span><br><span class="line"><span class="undefined">          view.map = webmap;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> nodes = <span class="built_in">document</span>.querySelectorAll(<span class="string">".btn-switch"</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">var</span> idx = <span class="number">0</span>; idx &lt; nodes.length; idx++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> node = nodes[idx];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> mapIndex = node.getAttribute(<span class="string">"data-id"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (mapIndex === id) &#123;</span></span><br><span class="line"><span class="javascript">              node.classList.add(<span class="string">"active-map"</span>);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              node.classList.remove(<span class="string">"active-map"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btns"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-switch active-map"</span> <span class="attr">data-id</span>=<span class="string">"0"</span>&gt;</span>Missing Migrants<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-switch"</span> <span class="attr">data-id</span>=<span class="string">"1"</span>&gt;</span>Refugee Routes<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-switch"</span> <span class="attr">data-id</span>=<span class="string">"2"</span>&gt;</span>2015 European Sea Arrivals<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"viewDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="ArcGIS API for Javascript 4.2" scheme="https://ibrucekong.github.io/tags/ArcGIS-API-for-Javascript-4-2/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[8] 2D与3D视图同步</title>
    <link href="https://ibrucekong.github.io/posts/1258689047/"/>
    <id>https://ibrucekong.github.io/posts/1258689047/</id>
    <published>2019-05-11T02:34:56.000Z</published>
    <updated>2019-05-11T02:34:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6391509.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6391509.html</a></strong></p><hr><p>同一份数据不同视图查看可能用的比较少，因为3D视图放大很多后就和2D地图差不多了，畸变很小，用于超大范围的地图显示时有用，很多时候都是在平面地图上进行分析、查询、操作。教学需要可能会对这个有要求？</p><p>本文没有深究两个比较复杂的函数，希望有朝一日能读懂吧，对于这种同一个Map对象不同视图的同步显示，建议直接copy后半截内容即可。</p><hr><p>鹰眼功能和这个类似，不过鹰眼功能（即上一篇文章）是利用watch()和watchUtils.when()来实现的同步，这个例子又有什么不同呢？探究之。</p><p>直接看结果图：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170213022338066-1544447155.png" alt="img"></p><p>看起来就是两个无边框的DIV，宽度各占50%。</p><p>实际上操作的结果就是，在任意一个视图拖动、缩放、旋转视图，另一个也跟着变，几乎就是放大版的鹰眼，也可以说是鹰眼的另一种写法。</p><hr><p>给出require的引用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"esri/Map"</span>,</span><br><span class="line">      <span class="string">"esri/views/MapView"</span>,</span><br><span class="line">      <span class="string">"esri/views/SceneView"</span>,</span><br><span class="line">      <span class="string">"esri/core/watchUtils"</span>,</span><br><span class="line">      <span class="string">"dojo/domReady!"</span></span><br><span class="line">    ],</span><br><span class="line">     <span class="function"><span class="keyword">function</span>(<span class="params">Map,MapView, SceneView,watchUtils</span>)</span>&#123;</span><br><span class="line">          <span class="comment">//你的代码  </span></span><br><span class="line">     &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>嗯？又是watchUtils？看来和监听少不了干系了。</p><p>//事实上，本例还是用watch监听和watchUtils监听完成的同步，但是代码难于理解，就没有仔细深究。</p><p>看骨干部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">Map,MapView,SceneView,watchUtils</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;&#125;);</span><br><span class="line">    <span class="keyword">var</span> view1 = <span class="keyword">new</span> SceneView(&#123;&#125;);</span><br><span class="line">    <span class="keyword">var</span> view2 = <span class="keyword">new</span> MapView(&#123;&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> synchronizeView = <span class="function"><span class="keyword">function</span>(<span class="params">view, others</span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> synchronizeViews = <span class="function"><span class="keyword">function</span>(<span class="params">views</span>)</span>&#123;&#125;;</span><br><span class="line">    synchronizeViews([view1,view2]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化一张地图，实例化两个视图，看来和上一个例子还是有区别的。</p><p>对此，博主表示暂时保留原代码。</p><p>因为synchronizeView长达60行，这个方法一定不普通。</p><p>博主的建议是：</p><p>如果需要对同一份底图的2D和3D视图进行同步观察显示，那么请直接把这两个syn方法copy过来，甚至包装成一个方法都可以，传入参数是两个view即可。</p><blockquote><p>有兴趣的同学可以查阅这个类：esri/core/Collection</p><p>这两个难于理解的方法体内用到了这个类和其几个方法，如map()方法、slice()方法、concat()方法。</p></blockquote><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="ArcGIS API for Javascript 4.2" scheme="https://ibrucekong.github.io/tags/ArcGIS-API-for-Javascript-4-2/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[7] 鹰眼（缩略图的实现及异步处理、Promise、回调函数、监听的笔记）</title>
    <link href="https://ibrucekong.github.io/posts/3118632505/"/>
    <id>https://ibrucekong.github.io/posts/3118632505/</id>
    <published>2019-05-10T11:21:11.000Z</published>
    <updated>2019-05-10T11:21:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6389054.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6389054.html</a></strong></p><hr><p>文前说明：关于style就是页面的css暂时不做评论，因为官方给的例子的样式实在太简单了，照抄阅读即可。</p><p>这篇文章有着大量AJS 4.x版本添加的内容，如监听watch、Promise对象、回调函数、异步处理等内容，原理性的东西我会在文末解释，各位看官不用担心看不懂，我尽量用通俗的语言解释这些。</p><p>惯例，如果不习惯从头看到尾，可以直接跳到后面看总结。</p><hr><p>大家应该看过商业地图的缩略图功能吧？以度娘地图为例，在使用街景地图的时候，左下角会出现一个地点一样的2D小地图：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170211124618151-753389095.png" alt="img"></p><p>这个就是鹰眼功能的应用，在很多桌面软件中如Erdas、Envi，鹰眼是很常见的。</p><p>//如果以下超链接日后更新了4.3或更高版本，请自行寻找4.2的sample配合本文学习~</p><p>这次就解读<a href="https://developers.arcgis.com/javascript/latest/sample-code/overview-map/live/index.html" target="_blank" rel="noopener">2D overview map in SceneView</a>这个例子。</p><p>源代码：<a href="view-source:https://developers.arcgis.com/javascript/latest/sample-code/overview-map/live/index.html" target="_blank" rel="noopener">点我</a></p><p>其实就是一个2D的MapView在3D的SceneView的显示而已，关键就在数据的同步，官方指出了watch()方法是关键。</p><p>话不多说，先上最终效果图：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170211132205244-2055284662.png" alt="img"></p><p>结构大概就是，大的DIV里放SceneView，小的DIV里放MapView。</p><p>小的DIV里又有一个黑色的区域来标识当前SceneView的区域。小的DIV的widgets被移除。</p><p>html代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"viewDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"overviewDiv"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"extentDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>老样子，require给出引用（以前都叫第一个字符串数组参数，为了省事，以后直接叫引用了）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"esri/Map"</span>,</span><br><span class="line">      <span class="string">"esri/views/SceneView"</span>,</span><br><span class="line">      <span class="string">"esri/views/MapView"</span>,</span><br><span class="line">      <span class="string">"esri/core/watchUtils"</span>,</span><br><span class="line">      <span class="string">"dojo/dom"</span>,</span><br><span class="line">      <span class="string">"dojo/promise/all"</span>,</span><br><span class="line">      <span class="string">"dojo/domReady!"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">Map, SceneView, MapView, watchUtils, dom, all</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//你的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>重点应该是：</p><p>view的watch()方法、watchUtils的when方法、view的toScreen方法、view的extent属性、view的then方法。</p><hr><p>既然有两个view（DIV），那么肯定要有两份map（数据）。</p><p>所以第二参数（以前的文章叫函数参数，之后都叫第二参数）先将map和view定义如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mainMap = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span><br><span class="line">  basemap: <span class="string">"hybrid"</span>,</span><br><span class="line">  ground: <span class="string">"world-elevation"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> overviewMap = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span><br><span class="line">  basemap: <span class="string">"osm"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> mainView = <span class="keyword">new</span> SceneView(&#123;</span><br><span class="line">  container: <span class="string">"viewDiv"</span>,</span><br><span class="line">  map: mainMap</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> mapView = <span class="keyword">new</span> MapView(&#123;</span><br><span class="line">  container: <span class="string">"overviewDiv"</span>,</span><br><span class="line">  map: overviewMap</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>mainMap、mainView是3D的，overviewMap、mapView是2D的。</p><p>当然，我们看到的2D的小地图是没有放大缩小那些控件的，只需1行代码，就可以置空那些控件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapView.ui.components = [];</span><br></pre></td></tr></table></figure><p>查阅API，可以知道ui属性是DefaultUI类，DefaultUI继承自UI类。components是字符串数组，若赋值为空数组则清空。相应的，DefaultUI类有remove和empty方法可以清除控件，就不细说了。</p><p>为了便于操作，把当前区域的DIV“extendDiv”的DOM元素获取为变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> extentDiv = dom.byId(<span class="string">"extentDiv"</span>);</span><br></pre></td></tr></table></figure><hr><p>以上就完成了准备部分。</p><p>接下来，数据加载完成后，就要对2D的地图和3D的地图进行“同步”了，需要用到两个view的then方法。</p><blockquote><p>then()方法是Promise对象的特有方法，而Promise是什么暂时无需了解，只要知道在AJS 4.x中Promise是一个很重要的东西。</p><p>而且，MapView和SceneView类都继承了Promise类。不仅如此，AJS 4.x中很多方法返回的都是Promise对象。</p></blockquote><p>先看看mainView（3D视图）的then方法看看它做了什么：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mainView.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  mainView.goTo(&#123;</span><br><span class="line">    center: [<span class="number">7</span>, <span class="number">46</span>],</span><br><span class="line">    scale: <span class="number">200000</span>,</span><br><span class="line">    heading: <span class="number">35</span>,</span><br><span class="line">    tilt: <span class="number">60</span></span><br><span class="line">  &#125;,</span><br><span class="line">　&#123;</span><br><span class="line">    animate: <span class="literal">true</span>,</span><br><span class="line">    duration: <span class="number">100000</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>很好，它接受了一个参数，类型是方法。这个匿名方法干了什么呢？这不就是上一篇文章里说的缩放动画嘛！（goTo）跳过，看mapView（2D视图）的then方法看它做了什么：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mapView.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  mainView.watch(<span class="string">"extent"</span>, updateOverviewExtent);</span><br><span class="line">  mapView.watch(<span class="string">"extent"</span>, updateOverviewExtent);</span><br><span class="line"></span><br><span class="line">  watchUtils.when(mainView, <span class="string">"stationary"</span>, updateOverview);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updateOverview</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    mapView.goTo(&#123;</span><br><span class="line">      center: mainView.center,</span><br><span class="line">      scale: mainView.scale * <span class="number">2</span> * <span class="built_in">Math</span>.max(mainView.width /</span><br><span class="line">        mapView.width,</span><br><span class="line">        mainView.height / mapView.height)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updateOverviewExtent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> extent = mainView.extent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> bottomLeft = mapView.toScreen(extent.xmin, extent.ymin);</span><br><span class="line">    <span class="keyword">var</span> topRight = mapView.toScreen(extent.xmax, extent.ymax);</span><br><span class="line"></span><br><span class="line">    extentDiv.style.top = topRight.y + <span class="string">"px"</span>;</span><br><span class="line">    extentDiv.style.left = bottomLeft.x + <span class="string">"px"</span>;</span><br><span class="line"></span><br><span class="line">    extentDiv.style.height = (bottomLeft.y - topRight.y) + <span class="string">"px"</span>;</span><br><span class="line">    extentDiv.style.width = (topRight.x - bottomLeft.x) + <span class="string">"px"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>很长的样子。</p><p>我慢慢解释。</p><p>仍然是接受一个方法作为参数（为什么then接受的参数那么奇怪？文末会解释的）</p><p><em>//题外话：在javascript里头传函数/方法是很常见的，函数/方法是js的一种变量类型，在C/C++里头可以传递函数指针，在C#里头可以传递委托变量。</em></p><p>这个方法里有两个方法，命名为 updateOverview 和 updateOverviewExtent，我们根据这两个方法把这个then方法的代码拆开看，发现watch和watchUtils.when是跟这两个方法配对的。</p><p>即：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两个视图都与updateOverviewExtent方法绑定</span></span><br><span class="line">mainView.watch(<span class="string">"extent"</span>, updateOverviewExtent);</span><br><span class="line">mapView.watch(<span class="string">"extent"</span>, updateOverviewExtent);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateOverviewExtent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> extent = mainView.extent;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> bottomLeft = mapView.toScreen(extent.xmin, extent.ymin);</span><br><span class="line">  <span class="keyword">var</span> topRight = mapView.toScreen(extent.xmax, extent.ymax);</span><br><span class="line"></span><br><span class="line">  extentDiv.style.top = topRight.y + <span class="string">"px"</span>;</span><br><span class="line">  extentDiv.style.left = bottomLeft.x + <span class="string">"px"</span>;</span><br><span class="line"></span><br><span class="line">  extentDiv.style.height = (bottomLeft.y - topRight.y) + <span class="string">"px"</span>;</span><br><span class="line">  extentDiv.style.width = (topRight.x - bottomLeft.x) + <span class="string">"px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查阅API，得知视图的父类Accessor就支持watch方法了。值得一提的是，为了实现监听变化，AJS4.x版本专门提供了watch方法代替了以前的旧方法。</p><p>watch的用法是：</p><blockquote><p>对象.watch(“该需要监听的属性名”, 属性变化后需要执行的回调函数);</p><p>即某对象监听了它的某个属性后，这个属性一旦发生改变，就会去执行某些代码。</p></blockquote><p>在本例中，需要监听的是两个view对象的extent（范围）属性，一旦extent发生变化，那么updateOverviewExtent()方法就会被执行。</p><p>updateOverviewExtent()方法的大概意思就是：获取3D视图的范围-&gt;获取2D视图的对角线两个角点-&gt;更改2D视图上方的区域框的DOM元素的尺寸属性（top、left、height、width）</p><p>光改变区域框是不行的，还要改变2D地图的范围。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">watchUtils.when(mainView, <span class="string">"stationary"</span>, updateOverview);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateOverview</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  mapView.goTo(&#123;</span><br><span class="line">    center: mainView.center,</span><br><span class="line">    scale: mainView.scale * <span class="number">2</span> * <span class="built_in">Math</span>.max(mainView.width /</span><br><span class="line">      mapView.width,</span><br><span class="line">      mainView.height / mapView.height)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>watchUtils这个对象，是位于esri/core/watchUtils模块下的一个类。</p><p>它代表的含义是：监听某个对象，当这个对象的某个属性是true时，执行给定的方法。</p><p>查阅API得知，这个类提供了when这个静态方法，when方法的意义是：</p><p>所以，在本例中，意思就是：</p><p>当mainView这个3D视图对象的”stationary”属性是true时，刷新mapView这个2D视图对象。</p><p>刷新2D视图对象主要用的是上一篇中说到的goTo()方法，本例只指定了center和scale这两个属性组成的Object匿名对象。</p><p>SceneView类的stationary属性是布尔类型的，意义是当前视图是否已经静止（一般视图会由鼠标拖拽或者goTo()方法产生动态效果，一旦停止下来，stationary就会变成true）</p><p>总结一下。</p><p>这个例子大概思路就是：</p><p>·先实例化两个map和两个view，对3D的mainView在创建完成后使用then()方法缩放到指定位置。</p><p>·其中，对2D的mapView创建完成后使用then()方法，分别监听两个view的extent属性，还监听3D视图的stationary属性。</p><p>·当extent属性发生变化时，2D视图上方范围框先进行变化，然后2D地图紧随变化。</p><p>·当3D视图静止下来后，刷新2D视图。</p><p>监听还算比较好理解，需要注意的不多，注意到watch和watchUtils.when这两个方法返回的都是WatchHandle对象。待以后研究多了监听后，再仔细看看别的监听方法。</p><p>难点就在于then方法。</p><hr><p>难点。</p><p>then()方法怎么来的？这要从ES6（全名ECMAScript 2015）的新规范Promise对象说起。ECMAScript是JavaScript的标准，JS是ES的实现。</p><p>Promise是什么？这个东西说复杂也很复杂，它是：</p><p>为了处理异步操作多层回调函数的写法枯燥、难以阅读维护而产生的，由CommonJS社区发起的一个新规范的类。</p><p>最显著的特征是它实例化的对象都有then()和catch()方法（PromiseA+规范？好像是)</p><p>在AJS中，继承了Promise的类有：</p><p>全部的Layers</p><p>MapView、SceneView、LayerView</p><p>ViewAnimation</p><p>能返回Promise对象的类数不胜数。</p><p>所以说，为什么要用Promise？</p><p>这又要从异步操作说起了。</p><p>————</p><p>在AJS 4.x中，数据（Map类）和视图（View类）是分开的，3.x版本绘图渲染是Map自己完成的。</p><p>由于View视图类被分离开，绘图逻辑就成了它的主要功能。当然，绘图不会很快，往往有一个过程，尤其是超大数据量的绘图的时候会有一个比较长的等待过程。</p><p>所以，在JS里，较长的处理会丢给异步处理（就是同时进行好几个操作）</p><p>但是但是，我们知道JS是单线程的，它是怎么处理异步处理的呢？简单说说，JS的异步处理其实是个“伪异步”，是先完成同步代码才执行异步代码的。</p><p>通常，异步代码会做一些计算量比较大的事情，而同步代码则做一些不怎么耗时间的初始化工作。就是说</p><p>同步代码花少量的时间去初始化一些事情，其间有n个异步任务丢给异步队列。当同步代码完成初始化后（时间短），异步代码开始按顺序执行。</p><p>比如：界面的构建交给同步代码，而其间有n个后台数据交换、处理、计算的任务，就丢给异步队列去准备。当界面构造好（时间往往很短，几乎是秒速），异步代码就在后面开始执行。</p><p>这先看到的界面会让体验好很多，如果异步代码（就是耗时比较大的任务）放在同步代码里执行，那么由于同步的性质，必须等待这些耗时大的任务执行完成才能继续往下走（js的特点，单线程）</p><p>【在本例中】</p><p>初始化view，我不知道在云端是怎么运行的（因为我用的是CDN来运行AJS程序），但是我知道view的实例化肯定是用了异步操作。</p><p>即<em>先完成网页的加载（出现3D地球和2D地图，同步），再进行视图的渲染（山体拔高等，异步）。</em></p><p>sometimes，异步操作当然会有一个结果，比如异步在后面花好长时间算出个矩阵，但是同步代码已经结束了，异步任务丢过去的时候结果还没出来，怎么获取它？</p><p>我们可以用一个方法去获取它。这个方法，古时候叫回调函数。</p><p>在没有Promise类的时候，通常用回调函数这种办法实现（也能用事件、监听）异步是很正常的一种。</p><p>但是当回调函数本身也是个异步操作的时候，就会显得晕头转向。</p><p><em>异步第一层，有结果要用回调函数返回给同步代码-&gt;回调函数是第二层，这个回调函数里头需要用二级回调函数返回结果给第一层-&gt;……</em></p><p>举个例子：</p><blockquote><p>我是领导，我现在有两件事：有个事儿要做，和喝茶。</p><p>这两件事不冲突，虽然这个事儿很无聊，耗时大（如文字录入）。</p><p>所以我把这个事儿丢给经理（异步第一层），我继续喝茶（同步）</p><p>异步第一层就是经理要做这个事，但是这个事情绝大部分是无聊的，最后的整理比较简单。</p><p>所以经理就把这个无聊的部分丢给职员（异步第二层），等待职员把这部分做完的同时，也去喝茶（同步）。</p><p>于是，职员的结果就是二级回调函数，职员把结果完成后，“回调”给经理。</p><p>经理拿着职员的结果整理好，“回调”给领导。（第二层异步完成）</p><p>此时领导茶已经喝完了（同步完成），而任务也完成了（第一层异步完成）。</p></blockquote><p>这里如果用老的写法将会非常的烦，如果用Promise的then写法就是</p><blockquote><p>领导要做事儿.then(function(){让经理去做})</p><p>.then(function(){让职工做});</p></blockquote><p>链式写法，简单，容易看，也容易维护。</p><p>then里面的function就是回调函数，告诉异步任务完成后，要怎么处理异步结果的一段代码。</p><p>最后看看then方法的语法：</p><blockquote><p>then(function resolve, function rejected);</p></blockquote><p>我们一般只用前一个参数，即异步成功要怎么处理。而后一个参数是异步任务处理失败后要做什么。</p><p>甚至AJS官方还给出了处理中要做什么的第三个参数…这个就不说那么多了。</p><p>——</p><p>大概清楚是这么个过程后，我们知道View对象是Promise对象（继承），而且有异步操作的过程。</p><p>所以，mainView.then(function(){…});的意义就是</p><p>当3D视图在服务器端异步操作成功后，使用goTo()缩放到指定的位置。</p><p>文末，我还想说说监听，监听在AJS 3.x版本里是通过事件完成的，而AJS 4.x全新使用了watch一派写法。有关这些可以参考AJS 4.2的Guide文档。</p><p>最后的最后，关于异步和回调函数部分我也是学了一天后才给出的模糊定义，希望大家能看懂吧…我也不是很能理解，官方给的多层then()是这样的：</p><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170213015641832-1292521096.png" alt="img"></p><p>出处：<a href="https://developers.arcgis.com/javascript/latest/guide/working-with-promises/index.html" target="_blank" rel="noopener">点我</a></p><p>then里头当然是方法，无参的。只有子一层的结果完成的时候，父一层的then才能凭借子一层的结果的回调完成异步。</p><p>给一些我阅读中觉得不错的对异步、回调函数讲解的文章：</p><blockquote><p><a href="http://www.cnblogs.com/lvdabao/p/es6-promise-1.html" target="_blank" rel="noopener">大白话讲解Promise</a></p><p><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">ECMAScript 6入门</a></p><p><a href="http://www.cnblogs.com/fliu/articles/5246113.html" target="_blank" rel="noopener">Javascript异步编程的4种方法</a></p><p><a href="https://zhidao.baidu.com/question/1960024181274839300.html?fr=ala&amp;word=JavaScript为什么需要回调&amp;device=mobile&amp;ssid=0&amp;from=2001a&amp;uid=0&amp;pu=usm@0,sz@320_1003,ta@iphone_2_6.0_1_10.9&amp;bd_page_type=1&amp;baiduid=16B0F240A58D2AE4A6FDFB8BF05431C1&amp;tj=zhidao_2_0_10_l1" target="_blank" rel="noopener">百度知道-JS中回调函数怎么理解</a></p><p><a href="http://www.cnblogs.com/chrischjh/p/4648395.html" target="_blank" rel="noopener">Javascript异步编程之—异步原理</a></p><p><a href="http://blog.csdn.net/liwusen/article/details/54142748" target="_blank" rel="noopener">JS中的回调函数，以及ES6中通过promise处理回调</a></p></blockquote><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="ArcGIS API for Javascript 4.2" scheme="https://ibrucekong.github.io/tags/ArcGIS-API-for-Javascript-4-2/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[6] goTo()地图动画</title>
    <link href="https://ibrucekong.github.io/posts/929677808/"/>
    <id>https://ibrucekong.github.io/posts/929677808/</id>
    <published>2019-05-10T11:01:11.000Z</published>
    <updated>2019-05-10T11:01:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6388084.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6388084.html</a></strong></p><hr><p>这是个很有意思的例子，不过例子给的比较复杂，需要查很多API，我会在文章最后给出关键的类和属性解释。</p><p>同样发现一个很有意思的事儿：博客园似乎有爬虫，我4号发布的blogs，5号就在百度和google搜索页面上看到了转载或者复制。</p><p>这篇文章逻辑组织不太好，想知道怎么做缩放动画的可以直接拉到尾部看结论。</p><p>当然，这篇代码比较多，不建议手机看。</p><hr><p>进入正题，goTo()动画，官方的例子是在SceneView中实现的。</p><p>照例，给出require的第一个字符串数组参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(</span><br><span class="line">　　[</span><br><span class="line">　　　　<span class="string">"esri/Map"</span>,</span><br><span class="line">　　　　<span class="string">"esri/views/SceneView"</span>,</span><br><span class="line">　　　　<span class="string">"dojo/query"</span>,</span><br><span class="line">　　　　<span class="string">"dojo/on"</span></span><br><span class="line">　　　　<span class="string">"dojo/domReady!"</span></span><br><span class="line">　　]</span><br><span class="line">　　<span class="function"><span class="keyword">function</span>(<span class="params">Map,SceneView,query,on</span>)</span></span><br><span class="line"><span class="function">　　</span>&#123;</span><br><span class="line">　　　　<span class="comment">//你的代码</span></span><br><span class="line">　　&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p> 除了上一次熟悉的Map类和SceneView类，还多出来了query和on这俩，字面意思可以猜测是查询和事件有关。继续往下看。</p><p> 为了实现动画移动摄像机，就要在html页面组织一些按钮。</p><p> 于是，在html的body标签内如下组织：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"optionsDiv"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"default"</span>&gt;</span>Default flight<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"linearSlow"</span>&gt;</span>Linear slow flight<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"linearFast"</span>&gt;</span>Linear fast flight<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"expoIncrease"</span>&gt;</span>Exponentially increasing speed flight<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"fixedDuration"</span>&gt;</span>10 seconds flight<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"bounceBerlin"</span>&gt;</span>Bounce to Berlin<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"viewDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6个按钮，分别是：默认漫游、较慢漫游、较快漫游、渐渐加快漫游、10秒钟漫游、弹性缩放到柏林</p><p>于是，在require的第二个函数参数里，就这样给这些button添加事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">funtion(<span class="built_in">Map</span>,SceneView,query,on)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 仍然是实例化两个对象，map和view</span></span><br><span class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span><br><span class="line">        basemap: <span class="string">"osm"</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> SceneView(&#123;</span><br><span class="line">          container: <span class="string">"viewDiv"</span>,</span><br><span class="line">          map: map,</span><br><span class="line">          zoom: <span class="number">4</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    on(dojo.query(<span class="string">"#default"</span>), <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;);    </span><br><span class="line">    on(dojo.query(<span class="string">"#linearSlow"</span>), <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;);   </span><br><span class="line">    on(dojo.query(<span class="string">"#linearFast"</span>), <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;);   </span><br><span class="line">    on(dojo.query(<span class="string">"#expoIncrease"</span>), <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;);   </span><br><span class="line">    on(dojo.query(<span class="string">"#fixedDuration"</span>), <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;);</span><br><span class="line">    on(dojo.query(<span class="string">"#bounceBerlin"</span>), <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;);</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>仅仅是一个on(dojo.query(), , function(){})方法即可实现为DOM元素添加对应的事件。这里，指定了“click”事件。</p><blockquote><p>关于dojo.query()，参考博客自 - <a href="http://blog.csdn.net/dojotoolkit/article/details/6265337" target="_blank" rel="noopener">http://blog.csdn.net/dojotoolkit/article/details/6265337</a></p><p>这里借用了CSS的语法，dojo.query(“#default”)，这样就能获取到元素了.</p><p>需要注意的是query方法获取到的是数组，如果只有一个那就是它本身。</p><p>单个按ID查找DOM元素的方法是dojo.byId()</p></blockquote><hr><p>我们继续。获取html中定义的按钮元素后添加了事件以及函数体后，自然就是为它添加动画效果了。</p><p>我们取完整函数体看看，有什么异同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">on(dojo.query(<span class="string">"#default"</span>), <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          view.goTo(shiftCamera(<span class="number">60</span>));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        on(dojo.query(<span class="string">"#linearSlow"</span>), <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          view.goTo(shiftCamera(<span class="number">60</span>),</span><br><span class="line">            &#123;</span><br><span class="line">              speedFactor: <span class="number">0.1</span>,</span><br><span class="line">              easing: <span class="string">"linear"</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        on(dojo.query(<span class="string">"#linearFast"</span>), <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          view.goTo(shiftCamera(<span class="number">60</span>),</span><br><span class="line">            &#123;</span><br><span class="line">              speedFactor: <span class="number">6</span>,</span><br><span class="line">              easing: <span class="string">"linear"</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        on(dojo.query(<span class="string">"#expoIncrease"</span>), <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          view.goTo(shiftCamera(<span class="number">60</span>),</span><br><span class="line">            &#123;</span><br><span class="line">              duration: <span class="number">4000</span>,</span><br><span class="line">              easing: <span class="string">"in-expo"</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        on(dojo.query(<span class="string">"#fixedDuration"</span>), <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          view.goTo(shiftCamera(<span class="number">30</span>),</span><br><span class="line">          &#123;</span><br><span class="line">            duration: <span class="number">10000</span>,</span><br><span class="line">            maxDuration: <span class="number">10000</span> </span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义时间函数体</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">customEasing</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span> - <span class="built_in">Math</span>.abs(<span class="built_in">Math</span>.sin(<span class="number">-1.7</span> + t * <span class="number">4.5</span> * <span class="built_in">Math</span>.PI)) * <span class="built_in">Math</span>.pow(</span><br><span class="line">            <span class="number">0.5</span>, t * <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        on(dojo.query(<span class="string">"#bounceBerlin"</span>), <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          view.goTo(&#123;</span><br><span class="line">            position: &#123;</span><br><span class="line">              x: <span class="number">13.40</span>,</span><br><span class="line">              y: <span class="number">52.52</span>,</span><br><span class="line">              z: <span class="number">700000</span>,</span><br><span class="line">              spatialReference: &#123;</span><br><span class="line">                wkid: <span class="number">4326</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            heading: <span class="number">0</span>,</span><br><span class="line">            tilt: <span class="number">0</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            speedFactor: <span class="number">0.3</span>,</span><br><span class="line">            easing: customEasing</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>我们可以发现有很多东西是多出来的。以默认漫游按钮为切入点，发现使用了view这个对象的goTo()方法，参数未知，看来是一个有返回值的方法。查看官方API和本例代码得知goTo()方法和shiftCamera()方法的含义：</p><blockquote><p>goTo()方法</p><p>将视图转移到给定的目标。参数可以是：Geometry或Geometry数组、Graphic或Graphic数组、Viewpoint对象、Camera对象。</p><p>本例中就使用了Camera对象（shiftCamera方法的返回值就是一个Camera）或Object对象（缩放到柏林）。</p><p>以上的参数是“target”，即目标。</p><p>后面还有一些可选的参数，用{}括起来作为一个Object对象：</p><p>animate（boolean）、speedFactor（number类型）、duration（numer类型）、maxDuration（number类型）、easing（string或方法体）</p><p>speedFactor是速度因子，很好理解，默认是1.</p><p>duration是持续时间，如果有这个，那么speedFactor就会被覆盖。</p><p>maxDuration是最大持续时间。</p><p>easing是缓动方式。</p><p>通常，easing必选，speedFactor和duration、maxDuration三选一。</p><p>参数均可选。</p><p>shiftCamera()方法</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; function shiftCamera(deg)&#123;</span><br><span class="line">&gt;      var camera = view.camera.clone();</span><br><span class="line">&gt;      camera.position.longitude += deg;</span><br><span class="line">&gt;      return camera;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>给定一个deg（旋转角，角度制），camera的position的longitude值加上deg值。当然，deg要和longitude类型一样。</p><p>position是一个空间点（Point类，继承自Geometry），longitude是经度。AJS4.2是默认用Web Mercator或WGS 84参考系的。</p><p>本例中默认漫游传入了60度，即每次按按钮就会把视角旋转60度。</p></blockquote><hr><p>我们再来看看第2-第5个漫游按钮。</p><p>它们除了shiftCamera方法返回的Camera对象（target）外，还多了一个{}Object对象（option）。</p><p>本例中，除了弹性缩放到柏林这个按钮外，其余都是用Camera对象和Object对象组合的方式，达到动画效果。</p><p>我们当然可以直接用{}来定义一个Camera对象，就像弹性缩放到柏林这个按钮的方法体内写的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">on(dojo.query(<span class="string">"#bounceBerlin"</span>), <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  view.goTo(&#123;             <span class="comment">//这一层大括号定义的是Camera对象</span></span><br><span class="line">    position:</span><br><span class="line">    &#123;           <span class="comment">//这一层大括号定义的是Camera的position属性</span></span><br><span class="line">      x: <span class="number">13.40</span>,</span><br><span class="line">      y: <span class="number">52.52</span>,</span><br><span class="line">      z: <span class="number">700000</span>,</span><br><span class="line">      spatialReference:</span><br><span class="line">      &#123;            <span class="comment">//这一层是空间参考</span></span><br><span class="line">        wkid: <span class="number">4326</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    heading: <span class="number">0</span>,        <span class="comment">//Camera.heading</span></span><br><span class="line">    tilt: <span class="number">0</span>           <span class="comment">//Camera.tilt</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;      <span class="comment">//这一层大括号就是跟上面类似的Object对象了</span></span><br><span class="line">    speedFactor: <span class="number">0.3</span>,</span><br><span class="line">    easing: customEasing</span><br><span class="line">  &#125;);<span class="comment">//这个小括号结束的是goTo的范围</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在Object对象中，easing参数可以指定为一个方法体（返回值是number即可）。这里customEasing就是这样的一个方法。（看起来略复杂）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">customEasing</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span> - <span class="built_in">Math</span>.abs(<span class="built_in">Math</span>.sin(<span class="number">-1.7</span> + t * <span class="number">4.5</span> * <span class="built_in">Math</span>.PI)) * <span class="built_in">Math</span>.pow(<span class="number">0.5</span>, t * <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（插一句：如果在C#中，可不能随便这样给个方法名就行了，要用委托才能操作方法）</p><p>关于easing这个参数的string值，大家可以自行到API查询，我简单列出这几个枚举：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linear, in-cubic, out-cubic, in-out-cubic, in-expo, out-expo, in-out-expo</span><br></pre></td></tr></table></figure><p>都可以自己试试，估计就是速度的不同而已。官方推荐小于1s的动画就用自己定义的方法体，超过1s的就用上面的枚举就行了。</p><hr><p>总结。</p><p>地图缩放动画的核心就是view对象的goTo()方法的使用。</p><p>goTo()方法在MapView类和SceneView类中都有提供，但是在它们的父类View类中没有。</p><p>本文就对官方的API和例子进行学习，主要了解goTo()方法的参数的使用。</p><p>用法：view对象.goTo(target, option);</p><p>可以是：{定义Camera对象}+{Option参数}传入（前5个按钮）</p><p>也可以是：直接传一个Camera对象+{Option参数}（最后一个按钮）。</p><p>Option参数中的easing是“必选”的（不然就没动画效果了呀），speedFactor、duration、maxDuration是三选一。</p><p>Camera对象可以自己用方法体返回，也可以直接用js的大括号定义。</p><p>改变Camera对象的一些属性值，如经纬度，就可以达到改变视角。</p><p>至于其他的，如Geometry、Graphic、Viewpoint就没有进行学习了，参考API可以解决，本文只是解读官方的例子达到入门效果。</p><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="ArcGIS API for Javascript 4.2" scheme="https://ibrucekong.github.io/tags/ArcGIS-API-for-Javascript-4-2/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[5] 官方API大章节概述与内容转译</title>
    <link href="https://ibrucekong.github.io/posts/1307306721/"/>
    <id>https://ibrucekong.github.io/posts/1307306721/</id>
    <published>2019-05-10T10:42:30.000Z</published>
    <updated>2019-05-10T10:42:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6363915.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6363915.html</a></strong></p><hr><p><img src="https://images2015.cnblogs.com/blog/1097074/201702/1097074-20170204053145370-164038531.png" alt="img"></p><p>内容如上，截图自ESRI官网，连接：<a href="https://developers.arcgis.com/javascript/latest/sample-code/index.html" target="_blank" rel="noopener">ArcGIS API for JavaScript 4.2</a>（可能会跳转到4.3或者更高最新版本，如果有需要，到CSDN可以下载到4.2的离线文档）</p><p>【Get Started】</p><p>类似于绪论一样的东西，抽取了最需要关注的几个例子。如：加载Map和View，加载layers，使用弹出窗口，视觉化，与使用窗口小部件。（wtf居然没有分析你想搞事情啊web除了展示难道不应该有（）&amp;&amp;*……@）好吧，4.2刚出的时候分析功能确实不太全。</p><p><a href="http://www.cnblogs.com/onsummer/p/6363912.html" target="_blank" rel="noopener">【Mapping and Views】</a> </p><p>最基础的，知道地图和视图的区别，能使用2D和3D地图，对地图的布局有一定的了解，对地图的动画也有小小的使用示例。还介绍了2D3D视图同步、鹰眼、指北针等功能。这一章是最基础的了，其中第一小节介绍了入口函数的参数意义。</p><p>【Layers】</p><p>这一章很庞大，和地理数据有关。按顺序读下去：</p><p>支持多图层叠加显示</p><p>支持要素图层、场景图层（直接把影像拔高，推出了一个盒子形状的立体物件的场景图层）、矢量瓦片图层（这个很厉害啊）、影像图层、流图层、CSV图层、OpenStreet地图图层、Web瓦片图层、点云图层（这个更厉害1.1亿的激光雷达点云数据都能加载进来）</p><p>其中，对MapImageLayer和ImageryLayer有着重的介绍，前者不知道是什么东西，后者是影像图层（栅格图层）。这也是数据中最关键的了。</p><p>最后我想问一下：图层这种东西，是怎么创建的（查API应该可以查到如何创建实例）？数据又如何从硬盘中获取？需要服务器环境吗？（尚待解决）</p><p>回答上一句提到的问题。图层通过ArcGIS Server发布的各种服务创建，也可以通过Online或者Portal上的ID创建。</p><p>【Visualization】</p><p>这一章是符号的定制和色彩、样式的管理，主要是视觉方面的工作，在Web上不可能弄得很丑，Web最重要的功能就是“演示”，可视化这章就是为此而生。这一章内容繁多但是不难，简单看过去就是自定义符号、色彩设置、色带设置等，和桌面版的差不多。短时间内没法看完，以后待功能性章节完成学习后再进行攻读。</p><p><a href="http://www.cnblogs.com/onsummer/p/6399346.html" target="_blank" rel="noopener">【Popups】</a> </p><p>Popups意思为弹出窗口，第一个就以坐标的显示为例子。</p><p>弹出窗口也是一个相当基础的功能，因为有的查询功能的结果就需要用这种输出方式。</p><p>紧接的是：使用弹出小窗口的模板、对popups的位置进行固定（Dock，上下左右相对固定）</p><p>然后是在popups上加需要的内容，官方演示了表格、多媒体、文档和图表。</p><p>最后，在弹出窗口上也是可以添加按钮的（官方演示了Zoom功能和测量功能），也可以定制自己的功能（跳转到别的地方什么的）</p><p>【Graphics】</p><p>这章简单，和GDI差不多的东西，往视图中添加图形。支持2D和3D视图添加。</p><p><a href="http://www.cnblogs.com/onsummer/p/6399661.html" target="_blank" rel="noopener">【Searching】</a> </p><p>这章就是空间查询了。不过是基于widget的查询，底层似乎没给出。</p><p>使用Search widget可以查询，这功能在国内的地图厂商上都有，并且他们很像。不同的是，这是WebGIS，而不是商用GIS，功能是可以自己定制的。</p><p>当然，也可以对3D、2D地图进行筛选查询、点击查询。</p><p>ESRI也提供了最古老的方式——在表格上显示查询结果。</p><p><a href="http://www.cnblogs.com/onsummer/p/6414565.html" target="_blank" rel="noopener">【Analysis】</a></p><p>这一章是空间分析，虽然不及Desktop上的ArcMap和ArcGIS Pro那么强悍，不过对于基础的业务倒也足够。</p><p>ESRI已经说了，空间分析仍会在未来的版本中发布更新以与3.x产品线追平。</p><p>WebGIS的空间分析主要是：缓冲区分析和网络分析。例子中的网络分析是求解最短路径，比桌面版的操作友好多了（见本人的ArcGIS 网络分析专辑）。</p><p>此外官方还提供了：可视域分析、热点分析、查询高程（点高程变化和线路海拔变化等）。</p><p>【Widgets】</p><p>这属于UI的定制，大布局上可以用第三方JS库，在地图上的UI控件就交给ESRI吧。</p><p>粗看下去，主要有：</p><p>Home按钮控件、图层列表控件、图例控件、定位控件、地图打印到本地磁盘控件、追踪定位控件（平面的）、导航定位控件（用于导航）、快速布局控件（widget太多了可以用一个东西管理，view对象的ui属性）</p><p>ESRI强大到：widget似乎是可以自定义的（支持第三方JS库！如Angular、React），我看到了custom的字样，但是没有仔细往下看，因为提供的控件和功能已经满足大多数的需求了。甚至，widget还可以给它弄个皮肤。</p><p>颤抖吧人类。</p><p>【More 3D】</p><p>这章跟数字高程模型有关，能使用大地高程进行3D可视化，并控制摄像机的位置和角度。</p><p>同时，也可以把高程信息叠加到要素类上，进行高程3D显示。</p><p>我还看到了一个好玩的东西：控制太阳（就是控制日照角度，根据时间），其实就是环境的控制。</p><p>AJS的3D引擎是可以拓展的，甚至提及了Threejs公共3D引擎库（Threejs差评，文档忒少难读）。</p><p>ESRI提供了WebGL的检测功能，因为3D的支持需要WebGL，如果浏览器不支持，那肯定是不行的。</p><p>【Other】</p><p>这里是一些杂项，如从服务器上获取资料、许可，连接服务器等。</p><hr><p>API从esri这个大类分下去，有以下一级模块及与一级模块并列的类：</p><p>类：Basemap、Camera、Color、config、Graphic、Ground、kernel、PopupTemplate、request、Viewpoint、WebMap、WebScene</p><p>一级模块：/core  /geometry /identity /layers /portal /renderers /support /symbols /tasks /views /webmap /webscene /widgets</p><p>一些重要的二三级模块展示如下</p><p>/core： /accessorSupport /workers</p><p>/geometry： /support</p><p>/layers： /support</p><p>/renderers： /smartMapping/statistics      /smartMapping/symbology       /support</p><p>/symbols： /support</p><p>/tasks： /support</p><p>/views： /3d    /layers   /ui</p><p>/widgets： /support</p><p>对于API Reference，等用到一定时候会做类图，未完待续。其实官方的API已经很不错了，但是就是没有中文版，需要用过的人去做一些工作。</p><p>最后，善用API Reference。</p><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="ArcGIS API for Javascript 4.2" scheme="https://ibrucekong.github.io/tags/ArcGIS-API-for-Javascript-4-2/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API for JavaScript 4.2学习笔记[4] 第二章其余感兴趣的例子</title>
    <link href="https://ibrucekong.github.io/posts/642960823/"/>
    <id>https://ibrucekong.github.io/posts/642960823/</id>
    <published>2019-05-10T10:22:13.000Z</published>
    <updated>2019-05-10T10:22:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ArcGIS API for JavaScript 4.x：</strong><br>从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。</p><a id="more"></a><p>本系列是转载至博客园原创作者-<a href="https://home.cnblogs.com/u/onsummer/" target="_blank" rel="noopener">秋意正寒</a>-致敬!</p><p><strong>原地址：<a href="https://www.cnblogs.com/onsummer/p/6363914.html" target="_blank" rel="noopener">https://www.cnblogs.com/onsummer/p/6363914.html</a></strong></p><hr><blockquote><p>目录如下（点击即可超链接跳转）：</p><p><a href="http://www.cnblogs.com/onsummer/p/6391517.html" target="_blank" rel="noopener">视图存档</a></p><p><a href="http://www.cnblogs.com/onsummer/p/6391517.html" target="_blank" rel="noopener">2D地图添加指南针</a></p><p><a href="http://www.cnblogs.com/onsummer/p/6391517.html" target="_blank" rel="noopener">视图移动</a></p><p><a href="http://www.cnblogs.com/onsummer/p/6389054.html" target="_blank" rel="noopener">鹰眼</a> 【重要】</p><p><a href="http://www.cnblogs.com/onsummer/p/6391509.html" target="_blank" rel="noopener">2D3D视图同步</a> 【重要】</p><p><a href="http://www.cnblogs.com/onsummer/p/6391513.html" target="_blank" rel="noopener">同视图不同数据同步</a> 【重要】</p></blockquote><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode" src="https://coding.net/u/ibrucekong/p/images/git/raw/master/wechat-blog.png" alt="关注公众号"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ArcGIS API for JavaScript 4.x：&lt;/strong&gt;&lt;br&gt;从3.x版本升级到4.x，变化比较大，学习、开发体验也会不一样。&lt;/p&gt;
    
    </summary>
    
      <category term="ArcGIS API for JavaScript 4.x" scheme="https://ibrucekong.github.io/categories/ArcGIS-API-for-JavaScript-4-x/"/>
    
    
      <category term="ArcGIS" scheme="https://ibrucekong.github.io/tags/ArcGIS/"/>
    
      <category term="ArcGIS API for Javascript 4.2" scheme="https://ibrucekong.github.io/tags/ArcGIS-API-for-Javascript-4-2/"/>
    
      <category term="WebGIS" scheme="https://ibrucekong.github.io/tags/WebGIS/"/>
    
      <category term="AJS" scheme="https://ibrucekong.github.io/tags/AJS/"/>
    
  </entry>
  
</feed>
